<head>
  <title>Tasty Tails</title>
  <!-- <link rel="stylesheet" type="text/css" href="/css/normalize.css" /> -->
  <link rel="stylesheet" type="text/css" href="/css/index.css" />

  <meta charset="UTF-8">
  <title>Chatting with people you can see</title>
  <!-- <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" -->
  <!-- integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"> -->
  <style>
    footer {
      position: absolute;
      height: 100px;
      top:90%;
      bottom: 0%;
    }
    #voreMenu {
      position: absolute;
      top: 63.5%;
      left: 200px;
      background: #ed2ae5;
      width: 200px;
      height: auto;
      box-shadow: 0 0 20px 0 #ccc;
    }
    .normalMenu {
      float: left;
      background: #f6f6f6;
      width: 200px;
      height: auto;
      box-shadow: 0 0 20px 0 #ccc;
    }
    .context-menu {

      position: absolute;
      display: none;
    }
    .context-menu ul {
      list-style: none;
      padding: 5px 0px 5px 0px;
    }
    .context-menu ul li:not(.separator) {
      padding: 10px 5px 10px 5px;
      border-left: 4px solid transparent;
      cursor: pointer;
    }
    .context-menu ul li:hover {
      background: #eee;
      border-left: 4px solid #666;
    }
    .separator {
      height: 1px;
      background: #dedede;
      margin: 2px 0px 2px 0px;
    }
    .specialActions {
      display: none;
    }
  </style>
</head>

<section id="game">
    <div id="phaserApp" tabindex="0" oncontextmenu="return showContextMenu(event);">

      <!--Right Click Custom Menu-->
      <div id="contextMenu" class="context-menu">
        <div class="normalMenu" >
          <ul>
            <li id="examineItem">Examine</li>
            <li class="separator"></li>
            <li id="pickUp">Pick Up</li>
            <li id="special" onmouseover="return specialTestFunction(event);" onmouseout="return specialMouseOut(event)">Special -></li>
          </ul>
        </div>

        <div id="voreMenu" onmouseover="return specialTestFunction(event);" onmouseout="return specialMouseOut(event)">
          <ul id="voreMenuUl">
            <!--<li id="voreContextMenu">test</li>-->
          </ul>
        </div>
      </div>
    </div>

  <div id="sidePanel">

    <div id="menu" tabindex="1">
      <div class="navBar">
        <ul>
          <li class="menuTabs button" id="lookTab">
            Look
          </li>
          <li class="menuTabs button" id="itemsTab">
            Items
          </li>
          <li class="menuTabs button" id="spellsTab">
            Spells
          </li>
          <li class="menuTabs button" id="mapTab">
            Map
          </li>
          <li class="menuTabs button" id="voreTab">
            Vore
          </li>
          <li class="menuTabs button" id="optionsTab">
            Options
          </li>
        </ul>
      </div>

      <div id="menuDisplay">
        <div id="lookDisplay" class="tabDisplay">
          you are in the look tab
        </div>
        <div id="itemsDisplay" class="tabDisplay">
          you are in the items tab
        </div>
        <div id="spellsDisplay" class="tabDisplay">
          you are in the spells tab
          <table id="spellsTable">
            <tr>
              <td id="tableIcon" class="empty">
                <div class="fill" draggable="true"></div>
              </td>
              <td id="tableName" class="empty"></td>
              <td id="tableDescrip" class="empty"></td>
            </tr>
          </table>
        </div>

        <div id="mapDisplay" class="tabDisplay">
          you are in the map tab
        </div>
        <div id="voreDisplay" class="tabDisplay">
          <div id="voreTypesInGame">
            <h1>Vore Anatomy</h1>
            <ul id="voreList">

            </ul>
            <!-- <button type="button" id="addVore" class="button main"><span>Add New Vore</span></button> -->
          </div>
          <div id="chamberContents">
            <h1>Chamber Contents</h1>
            <ul id="chamberContentsList">

            </ul>
          </div>
        </div>
        <div id="optionsDisplay" class="tabDisplay">
          you are in the options tab
        </div>
      </div>
    </div>

    <!--Chat Box-->
    <!-- <div id="chat-container">
      <div class="container-fluid">
        <div class="row">
          <ul id="messages"></ul>
        </div>
        <div class="row">
          <div class="col-xs-12">
            <form id="message-form" action="">
              <div class="input-group">
                <textarea id="m" autocomplete="off" class="form-control" placeholder="message" aria-label="message"></textarea>

              </div>
            </form>
          </div>
        </div>
      </div>
    </div> -->
    <!-- New Chat HTML -->
    <button id="clearBtn">Clear</button>
    <div id="status">

    </div>
    <div class="container">
      <div id="chat">
        <input type="text" id="username" class="form-control" placeholder="Enter name...">
        <div class="chat-holder">
          <br>
          <div id="messages" >

          </div>
          <div id="message-box-container">
          <div class="control-btn-container">
            <button id="bold-btn" class="chat-control-btn tool-tip material-icons" name="bold-ctl" data-tooltip='Click or press "Ctrl B" to bold text.'>&#xe238;</button>
            <button id="italic-btn" class="chat-control-btn tool-tip material-icons" name="italic-ctl" data-tooltip='Click or press "Ctrl I" to italicize text.'>&#xe23f;</button>
            <button id="underline-btn" class="chat-control-btn tool-tip material-icons" name="underline-ctl" data-tooltip='Click or press "Ctrl U" to underline text.'>&#xe249;</button>
            <button id="strikethrough-btn" class="chat-control-btn tool-tip material-icons" name="strikethrough-ctl" data-tooltip='Click or press "Ctrl S" to strikethrough text.'>&#xe257;</button>
            <button id="subscript-btn" class="chat-control-btn tool-tip material-icons" name="subscript-ctl" data-tooltip='Click or press "Ctrl -" to subscript text.'>&#xf111;</button>
            <button id="superscript-btn" class="chat-control-btn tool-tip material-icons" name="superscript-ctl" data-tooltip='Click or press "Ctrl +" to superscript text.'>&#xf112;</button>

            <div id="spoiler-container"  class="tool-tip" data-tooltip='Select to hide message content.'>
              <label id="spoiler-label" for="spoilers" class="material-icons">&#xe8f4;</label>
              <select id="spoilers" name="spoilers">
                <option value="none"><div class="optionLabel">Not Spoiled</div></option>
                <option value="general" style="background-image:https://fonts.gstatic.com/s/i/materialicons/visibility/v16/24px.svg;">General</option>
                <option value="watersports">Watersports</option>
                <option value="disposal">Scat/Disposal</option>
                <option value="gore">Gore</option>
              </select>
            </div>

            <div class="dropdown" data-dropdown>
              <button class="link chat-control-btn material-icons" data-dropdown-button>&#xe8b8;</button>
              <div class="dropdown-menu information-grid">
                <div>
                  <div class="dropdown-heading">
                    Spoiler Preferences
                  </div>
                  <div class="dropdown-links">
                    <ul>
                      <li>
                        <input type="checkbox" id="watersportsBox" name="watersportsBox" checked="True">
                        <label for="watersportsBox">Hide Watersports by Default</label><br>
                      </li>
                      <li>
                        <input type="checkbox" id="disposalBox" name="disposal" checked="True">
                        <label for="disposalBox">Hide Scat/Disposal by Default</label><br>
                      </li>
                      <li>
                        <input type="checkbox" id="goreBox" name="goreBox" checked="True">
                        <label for="goreBox">Hide Gore by Default</label><br>
                      </li>
                    </ul>
                  </div>
                </div>

                <div>
                  <div class="dropdown-heading">
                    Settings 2
                  </div>
                  <div class="dropdown-links">
                      <a href="#" class="link">Test link 2</a>
                  </div>
                </div>

                <div>
                  <div class="dropdown-heading">
                    Settings 3
                  </div>
                  <div class="dropdown-links">
                      <a href="#" class="link">Test link 3</a>
                  </div>
                </div>

                <div>
                  <div class="dropdown-heading">
                    Settings 4
                  </div>
                  <div class="dropdown-links">
                      <a href="#" class="link">Test link 4</a>
                  </div>
                </div>

                <div>
                  <div class="dropdown-heading">
                    Settings 5
                  </div>
                  <div class="dropdown-links">
                      <a href="#" class="link">Test link 5</a>
                  </div>
                </div>

                <div>
                  <div class="dropdown-heading">
                    Settings 6
                  </div>
                  <div class="dropdown-links">
                      <a href="#" class="link">Test link 6</a>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div id="textarea" contenteditable="true" spellcheck="true" class="form-control" placeholder="Enter message...">

          </div>
          <div class="charlimit">
            0/10000
          </div>
        </div>
      </div>
    </div>










  <script src="https://cdn.jsdelivr.net/npm/phaser@3.24.1/dist/phaser.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <!-- <script type="module" src="/js/index.js"></script> -->
  <!-- <script type="module">
    const serverPlayerInfo = <% charList %>
    console.log('serverPlayerInfo = ', serverPlayerInfo);
    export serverPlayerInfo;
  </script> -->
  <!--Checks if the game is focused or the chat is focused-->
  <script>
    function alertFunction() {
      alert("this button does not work right now... Just press the ENTER key to send your message.");
    }
    var chatFocused = true;




    window.onclick = hideContextMenu;
    window.onkeydown = listenKeys;
    var contextMenu = document.getElementById('contextMenu');
    function showContextMenu (event) {
      contextMenu.style.display = 'block';
      voreMenu.style.display = 'none';
      contextMenu.style.left = event.clientX + 'px';
      contextMenu.style.top = event.clientY + 'px';
      return false;
    }

    function hideContextMenu () {
      contextMenu.style.display = 'none';
    }
    function listenKeys (event) {
      var keyCode = event.which || event.keyCode;
      console.log('listenkeys function keyCode = ', keyCode);
      if(keyCode == 27){
        hideContextMenu();
      }
    }

    var voreMenu = document.getElementById('voreMenu');
    function specialTestFunction (event) {
      //alert("You did a hover thingy!");
      voreMenu.style.display = 'block';
      //voreMenu.style.left = event.clientX + 'px';
      //voreMenu.style.top = event.clientY + 'px';
      return false;
    }
    function specialMouseOut (event) {
      voreMenu.style.display = 'none';
      return false;
    }











    var avatarSelected = false;

    let avatarInfo = {
      head:"emptyplayer",
      body:"emptyplayer"
    };

    var localPlayerInfo = <%- charList %>;
    localPlayerInfo.x = 3291;
    localPlayerInfo.y = 4287;
    localPlayerInfo.consumedBy = null;
    localPlayerInfo.rotation = 0;
    localPlayerInfo.isMoving = false;
    localPlayerInfo.Identifier = "player";
    localPlayerInfo.input = {
      left: false,
      right: false,
      up: false,
      down: false
    };



    var voreTypes = [];
    var clicked = {Identifier: ''};
    var toDestroy = '';
    var container = null;
    var cam1 = null;
    var arrows = 0;










    let config = {
      type: Phaser.AUTO,
      parent: 'phaser-example',
      width: 800,//window.innerWidth,
      height: 930,//window.innerHeight,
      parent: 'phaserApp',
      physics: {
        default: 'arcade',
    		arcade: {
    			debug: true
        }
      },
      scene: {
        preload: preload,
        create: create,
        update: update
      }
    };

    var game = new Phaser.Game(config);
    var showDebug = false;
    var blocked_tiles;
    var obj_spawning;
    var helpText;
    //----- This function is called when drawing the debug collision lines -----//
    function drawDebug () {
      debugGraphics.clear();
      if (showDebug) {
        console.log('debug button pressed');
        // Pass in null for any of the style options to disable drawing that component
        blocked_tiles.renderDebug(debugGraphics, {
          tileColor: null, // Non-colliding tiles
          collidingTileColor: new Phaser.Display.Color(243, 134, 48, 200), // Colliding tiles
          faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Colliding face edges
        });
        //blocked_tiles.depth = 10000;
        obj_spawning.renderDebug(debugGraphics, {
          tileColor: null, // Non-colliding tiles
          collidingTileColor: new Phaser.Display.Color(243, 134, 48, 200), // Colliding tiles
          faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Colliding face edges
        });
      }
      helpText.setText(getHelpMessage());
    }
    function getHelpMessage () {
      return 'Arrow keys to move.' +
      '\nPress "C" to toggle debug visuals: ' + (showDebug ? 'on' : 'off');
    }

    //----- Shows the current FrameRate of the game -----//
    function getFrameRate() {
      // frameRate.setText('FrameRate: ' + game.loop.actualFps.toFixed(2));
    }

    function preload() {
      console.log('Preload Started');
      let progressBar = this.add.graphics();
    		let progressBarHolder = this.add.graphics();
    		progressBarHolder.fillStyle(0x222222, 0.8);
    		progressBarHolder.fillRect(335, 170, 320, 50);
    		/* //This seems to tick through individual files, which isn't so useful.
    		boot.load.on('fileprogress', function (file, value) {
    			console.log("File progress event: ", file, ", ", value);
    		}); */
    		//This seems to capture a total ratio (between 0.0 and 1.0)
    		this.load.on('progress', function (ratio) {
    			progressBar.clear();
    			progressBar.fillStyle(0xffffff, 1);
    			progressBar.fillRect(345, 180, 300 * ratio, 30);
    		});

    		this.load.on('complete', function () {
    			progressBar.destroy();
    			progressBarHolder.destroy();
    		});
      // this.load.image('spritesheet', './../assets/images/spritesheet.png');
      this.load.image('tileset', './../assets/tilemaps/tileset.png');
      this.load.image('scroll', './../assets/images/Scroll_01.png')
      this.load.image('scroll2', './../assets/images/Scroll_02.png')

      this.load.spritesheet('empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
      this.load.spritesheet('head_01', './../assets/spritesheets/head_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_02', './../assets/spritesheets/head_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_03', './../assets/spritesheets/head_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_04', './../assets/spritesheets/head_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_05', './../assets/spritesheets/head_05.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_06', './../assets/spritesheets/head_06.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('body_01', './../assets/spritesheets/body_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('tail_01', './../assets/spritesheets/tail_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('tail_02', './../assets/spritesheets/tail_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('tail_03', './../assets/spritesheets/tail_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('tail_04', './../assets/spritesheets/tail_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('secondaryTail_02', './../assets/spritesheets/secondaryTail_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('secondaryTail_03', './../assets/spritesheets/secondaryTail_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('secondaryTail_04', './../assets/spritesheets/secondaryTail_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('hair_01', './../assets/spritesheets/hair_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('hair_02', './../assets/spritesheets/hair_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('hair_03', './../assets/spritesheets/hair_03.png', {frameWidth: 221, frameHeight: 243});

      this.load.spritesheet('ears_outer_01', './../assets/spritesheets/ears_outer_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('ears_inner_01', './../assets/spritesheets/ears_inner_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('ears_outer_04', './../assets/spritesheets/ears_outer_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('ears_inner_04', './../assets/spritesheets/ears_inner_04.png', {frameWidth: 221, frameHeight: 243});

      this.load.spritesheet('ear_05', './../assets/spritesheets/ear_05.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('eyes_whites_01', './../assets/spritesheets/eyes_whites_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('iris_01', './../assets/spritesheets/iris_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('eyes_whites_02', './../assets/spritesheets/eyes_whites_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('iris_02', './../assets/spritesheets/iris_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('eyes_whites_03', './../assets/spritesheets/eyes_whites_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('iris_03', './../assets/spritesheets/iris_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('eyes_whites_04', './../assets/spritesheets/eyes_whites_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('iris_04', './../assets/spritesheets/iris_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('eyes_whites_05', './../assets/spritesheets/eyes_whites_05.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('iris_05', './../assets/spritesheets/iris_05.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('eyes_whites_06', './../assets/spritesheets/eyes_whites_06.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('iris_06', './../assets/spritesheets/iris_06.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('secondaryBody_01', './../assets/spritesheets/secondaryBody_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('secondaryBody_02', './../assets/spritesheets/secondaryBody_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('secondaryBody_03', './../assets/spritesheets/secondaryBody_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('secondaryBody_04', './../assets/spritesheets/secondaryBody_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('accentBody_01', './../assets/spritesheets/accentBody_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('accentBody_02', './../assets/spritesheets/accentBody_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_01-secondaryHead_01', './../assets/spritesheets/head_01-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_01-secondaryHead_02', './../assets/spritesheets/head_01-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_01-secondaryHead_03', './../assets/spritesheets/head_01-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_01-secondaryHead_04', './../assets/spritesheets/head_01-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_01-secondaryHead_05', './../assets/spritesheets/head_01-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

      this.load.spritesheet('head_02-secondaryHead_01', './../assets/spritesheets/head_02-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_02-secondaryHead_02', './../assets/spritesheets/head_02-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_02-secondaryHead_03', './../assets/spritesheets/head_02-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_02-secondaryHead_04', './../assets/spritesheets/head_02-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_02-secondaryHead_05', './../assets/spritesheets/head_02-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

      this.load.spritesheet('head_03-secondaryHead_01', './../assets/spritesheets/head_03-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_03-secondaryHead_02', './../assets/spritesheets/head_03-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_03-secondaryHead_03', './../assets/spritesheets/head_03-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_03-secondaryHead_04', './../assets/spritesheets/head_03-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_03-secondaryHead_05', './../assets/spritesheets/head_03-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

      this.load.spritesheet('head_04-secondaryHead_01', './../assets/spritesheets/head_04-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_04-secondaryHead_02', './../assets/spritesheets/head_04-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_04-secondaryHead_03', './../assets/spritesheets/head_04-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_04-secondaryHead_04', './../assets/spritesheets/head_04-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_04-secondaryHead_05', './../assets/spritesheets/head_04-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

      this.load.spritesheet('head_05_beak', './../assets/spritesheets/head_05_beak.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_05-secondaryHead_01', './../assets/spritesheets/head_05-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_05-secondaryHead_02', './../assets/spritesheets/head_05-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_05-secondaryHead_03', './../assets/spritesheets/head_05-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_05-secondaryHead_04', './../assets/spritesheets/head_05-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_05-secondaryHead_05', './../assets/spritesheets/head_05-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

      this.load.spritesheet('head_06-secondaryHead_01', './../assets/spritesheets/head_06-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_06-secondaryHead_02', './../assets/spritesheets/head_06-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_06-secondaryHead_03', './../assets/spritesheets/head_06-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_06-secondaryHead_04', './../assets/spritesheets/head_06-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
      this.load.spritesheet('head_06-secondaryHead_05', './../assets/spritesheets/head_06-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});
      //This loads the map json file that says what coordinates have what pictures
      // this.load.tilemapTiledJSON('level_2', './../assets/tilemaps/level2.json');
      this.load.tilemapTiledJSON('tastytails_v01', './../assets/tilemaps/tastytails_v01.json');

      //----- Loads images used for interactive objects -----//
      this.load.image('tree_01', './../assets/tilemaps/tree_01.png');
      this.load.image('tree_02', './../assets/tilemaps/tree_02.png');
      this.load.image('lamp_01', './../assets/tilemaps/lamp_01.png');
      this.load.image('lamp_02', './../assets/tilemaps/lamp_02.png');
      this.load.image('cloth_shelf_01', './../assets/tilemaps/cloth_shelf_01.png');
      this.load.image('cloth_shelf_02', './../assets/tilemaps/cloth_shelf_02.png');
      this.load.image('mirror_01', './../assets/tilemaps/mirror_01.png');
      this.load.image('mannequin_00', './../assets/tilemaps/mannequin_00.png');
      this.load.image('mannequin_01', './../assets/tilemaps/mannequin_01.png');
      this.load.image('mannequin_02', './../assets/tilemaps/mannequin_02.png');
      this.load.image('sewing_machine_01', './../assets/tilemaps/sewing_machine_01.png');
      this.load.image('cloth_roll_basket01', './../assets/tilemaps/cloth_roll_basket01.png');
      this.load.image('yarn_basket_01', './../assets/tilemaps/yarn_basket_01.png');

      this.load.image('pub_table', './../assets/tilemaps/pub_table.png');
      this.load.image('pub_stool', './../assets/tilemaps/pub_stool.png');
      this.load.image('bar_front', './../assets/tilemaps/bar_front.png');
      this.load.image('card_table', './../assets/tilemaps/card_table.png');
      this.load.image('pub_stool_tall', './../assets/tilemaps/pub_stool_tall.png');

      this.load.image('spa_massage_bed', './../assets/tilemaps/spa_massage_bed.png');


      //----- Doors -----//
      this.load.spritesheet('door_clothing_store', './../assets/spritesheets/door_clothing_store.png', {frameWidth: 197, frameHeight: 255});
      this.load.image('clothing_store_exit_rug', './../assets/tilemaps/clothing_store_exit_rug.png');

      this.load.spritesheet('door_pub', './../assets/spritesheets/door_pub.png', {frameWidth: 197, frameHeight: 255});
      this.load.image('pub_exit_rug', './../assets/tilemaps/pub_exit_rug.png');

      this.load.spritesheet('door_spa', './../assets/spritesheets/door_spa.png', {frameWidth: 197, frameHeight: 255});
    }

    function create() {

      var test = 'this is a test';
      var self = this;
      this.players = this.add.group();
      this.physics.add.collider(this.players);
      this.socket = io();
      console.log('this.socket = ', this.socket);

      var otherPlayers = [];

      this.socket.on('currentPlayers', function (players, spells) {
        Object.keys(players).forEach(function (id) {
          console.log('Local players socket ID = ', players[id].playerId);
          if (players[id].playerId === self.socket.id) {
            localPlayerInfo.playerId = self.socket.id;
            self.socket.emit('characterUpdate', localPlayerInfo);
            //addPlayer(self, players[id]);
          } else {
            displayOtherPlayers(self, players[id]);
          }
        });
        spawnSpells(spells);
      });

      this.socket.on('newPlayer', function (playerInfo) {
        displayOtherPlayers(self, playerInfo);
      });

      this.socket.on('characterUpdated', function (playerInfo) {
        //console.log('characterUpdated is called');
        //console.log('characterUpdated', '\n', 'playerInfo.playerId = ', playerInfo.playerId, '\n', 'self.socket.id = ', self.socket.id);
          if (playerInfo.playerId === self.socket.id) {
            //console.log('playerInfo.playerId === self.socket.id');
            displayPlayers(self, playerInfo);
          }
          for (let i = 0; i < otherPlayers.length; i++) {
            //let movingPlayer = otherPlayers[i];
            if (playerInfo.playerId === otherPlayers[i].playerId) {
              displayOtherPlayers(self, playerInfo);
              console.log(playerInfo.playerId, 'chose username: ', playerInfo.username, '\n', 'Set head to: ', playerInfo.head, 'and body to: ', playerInfo.body, '\n', 'and head color to:', playerInfo.headColor,  'and body color to:', playerInfo.bodyColor, 'and they have described themselves as: ', playerInfo.descrip);
              return;
            }
          }
      });
      this.socket.on('avatarSelection', function (playerInfo) {
        /*self.otherPlayers.getChildren().forEach(function (otherPlayer) {
          if (playerInfo.playerId === otherPlayer.playerId) {
            displayOtherPlayers(self, playerInfo);
            console.log(playerInfo.playerId, 'chose username: ', playerInfo.username, '\n', 'Set head to: ', playerInfo.head, 'and body to: ', playerInfo.body, '\n', 'and head color to:', playerInfo.headColor,  'and body color to:', playerInfo.bodyColor, 'and they have described themselves as: ', playerInfo.descrip);
          }
        });*/
      });

      this.socket.on('removePlayer', function (playerId) {
        self.players.getChildren().forEach(function (player) {
          if(playerId === player.playerId) {
            player.destroy();
          }
        });
      });

      this.socket.on('playerUpdates', function (players) {
        //console.log('players = ', players);
        Object.keys(players).forEach(function (id) {
          //console.log('otherPlayers = ', otherPlayers);
          self.players.getChildren().forEach(function (player) {
            // console.log('players[id].playerId = ', players[id].playerId);
            // console.log('player.playerId = ', player);
            if (players[id].playerId === player.playerId) {
              player.setPosition(players[id].x, players[id].y);
              player.depth = players[id].y;
              //console.log('self.container = ', player, '\n', 'player coordinates are: X= ', players[id].x, 'Y= ', players[id].y);
              //console.log(players[id].input);
              if(players[id].input.down === true) {
                if(player.list[0].texture.key != 'tail_01') {
                  console.log('bottom layer is NOT tail')
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                }
                player.list[0].play(players[id].tail.sprite + 'Down', true);
                player.list[1].play(players[id].tail.secondarySprite + 'Down', true);
                player.list[2].play(players[id].tail.accentSprite + 'Down', true);
                player.list[3].play(players[id].body.sprite + 'Down', true);
                player.list[4].play(players[id].body.secondarySprite + 'Down', true);
                player.list[5].play(players[id].body.accentSprite + 'Down', true);
                player.list[6].play(players[id].head.sprite + 'Down', true);
                player.list[7].play(players[id].head.secondarySprite + 'Down', true);
                player.list[8].play(players[id].head.accentSprite + 'Down', true);
                player.list[9].play(players[id].ear.outerSprite + 'Down', true);
                player.list[10].play(players[id].ear.innerSprite + 'Down', true);
                player.list[11].play(players[id].eyes.outer + 'Down', true);
                player.list[12].play(players[id].eyes.iris + 'Down', true);
                player.list[13].play(players[id].hair.sprite + 'Down', true);
                player.list[14].play(players[id].genitles.sprite + 'Down', true);
                //playerContainer.list[14].play(players[id].hands.sprite + 'Down', true);
                //playerContainer.list[15].play(players[id].feet.sprite + 'Down', true);
              }
              if(players[id].input.right === true) {
                // console.log('player coordinates are: X= ', players[id].x, 'Y= ', players[id].y);
                if(player.list[0].texture.key != 'tail_01') {
                  console.log('bottom layer is NOT tail')
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                }
                player.list[0].play(players[id].tail.sprite + 'Right', true);
                player.list[1].play(players[id].tail.secondarySprite + 'Right', true);
                player.list[2].play(players[id].tail.accentSprite + 'Right', true);
                player.list[3].play(players[id].body.sprite + 'Right', true);
                player.list[4].play(players[id].body.secondarySprite + 'Right', true);
                player.list[5].play(players[id].body.accentSprite + 'Right', true);
                player.list[6].play(players[id].head.sprite + 'Right', true);
                player.list[7].play(players[id].head.secondarySprite + 'Right', true);
                player.list[8].play(players[id].head.accentSprite + 'Right', true);
                player.list[9].play(players[id].ear.outerSprite + 'Right', true);
                player.list[10].play(players[id].ear.innerSprite + 'Right', true);
                player.list[11].play(players[id].eyes.outer + 'Right', true);
                player.list[12].play(players[id].eyes.iris + 'Right', true);
                player.list[13].play(players[id].hair.sprite + 'Right', true);
                player.list[14].play(players[id].genitles.sprite + 'Right', true);
                //playerContainer.list[14].play(players[id].hands.sprite + 'Right', true);
                //playerContainer.list[15].play(players[id].feet.sprite + 'Right', true);
              }
              if(players[id].input.left === true) {
                // console.log('player coordinates are: X= ', players[id].x, 'Y= ', players[id].y);
                if(player.list[0].texture.key != 'tail_01') {
                  console.log('bottom layer is NOT tail')
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                }
                player.list[0].play(players[id].tail.sprite + 'Left', true);
                player.list[1].play(players[id].tail.secondarySprite + 'Left', true);
                player.list[2].play(players[id].tail.accentSprite + 'Left', true);
                player.list[3].play(players[id].body.sprite + 'Left', true);
                player.list[4].play(players[id].body.secondarySprite + 'Left', true);
                player.list[5].play(players[id].body.accentSprite + 'Left', true);
                player.list[6].play(players[id].head.sprite + 'Left', true);
                player.list[7].play(players[id].head.secondarySprite + 'Left', true);
                player.list[8].play(players[id].head.accentSprite + 'Left', true);
                player.list[9].play(players[id].ear.outerSprite + 'Left', true);
                player.list[10].play(players[id].ear.innerSprite + 'Left', true);
                player.list[11].play(players[id].eyes.outer + 'Left', true);
                player.list[12].play(players[id].eyes.iris + 'Left', true);
                player.list[13].play(players[id].hair.sprite + 'Left', true);
                player.list[14].play(players[id].genitles.sprite + 'Left', true);
                //playerContainer.list[14].play(players[id].hands.sprite + 'Left', true);
                //playerContainer.list[15].play(players[id].feet.sprite + 'Left', true);
              }
              if(players[id].input.up === true) {
                // console.log('player coordinates are: X= ', players[id].x, 'Y= ', players[id].y);
                if(player.list[0].texture.key == 'tail_01') {
                  console.log('bottom layer is tail')
                  player.bringToTop(player.list[0])
                  player.bringToTop(player.list[0])
                  player.bringToTop(player.list[0])
                }

                player.list[0].play(players[id].body.sprite + 'Up', true);
                player.list[1].play(players[id].body.secondarySprite + 'Up', true);
                player.list[2].play(players[id].body.accentSprite + 'Up', true);
                player.list[3].play(players[id].head.sprite + 'Up', true);
                player.list[4].play(players[id].head.secondarySprite + 'Up', true);
                player.list[5].play(players[id].head.accentSprite + 'Up', true);
                player.list[6].play(players[id].ear.outerSprite + 'Up', true);
                player.list[7].play(players[id].ear.innerSprite + 'Up', true);
                player.list[8].play(players[id].eyes.outer + 'Up', true);
                player.list[9].play(players[id].eyes.iris + 'Up', true);
                player.list[10].play(players[id].hair.sprite + 'Up', true);
                player.list[11].play(players[id].genitles.sprite + 'Up', true);
                player.list[12].play(players[id].tail.sprite + 'Up', true);
                player.list[13].play(players[id].tail.secondarySprite + 'Up', true);
                player.list[14].play(players[id].tail.accentSprite + 'Up', true);
                //playerContainer.list[14].play(players[id].hands.sprite + 'Up', true);
                //playerContainer.list[15].play(players[id].feet.sprite + 'Up', true);
              }
              if(players[id].input.down === false && players[id].input.right === false && players[id].input.left === false && players[id].input.up === false && players[id].isMoving == false) {
                if(player.list[0].texture.key != 'tail_01') {
                  console.log('bottom layer is NOT tail')
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                  player.sendToBack(player.list[14])
                }
                player.list[0].play(players[id].tail.sprite + 'Stop' + 'Down');
                player.list[1].play(players[id].tail.secondarySprite + 'Stop' + 'Down');
                player.list[2].play(players[id].tail.accentSprite + 'Down');
                player.list[3].play(players[id].body.sprite + 'Stop' + 'Down');
                player.list[4].play(players[id].body.secondarySprite + 'Stop' + 'Down');
                player.list[5].play(players[id].body.accentSprite + 'Stop' + 'Down');
                player.list[6].play(players[id].head.sprite + 'Stop' + 'Down');
                player.list[7].play(players[id].head.secondarySprite + 'Stop' + 'Down');
                player.list[8].play(players[id].head.accentSprite + 'Stop' + 'Down');
                player.list[9].play(players[id].ear.outerSprite + 'Stop' + 'Down');
                player.list[10].play(players[id].ear.innerSprite + 'Stop' + 'Down');
                player.list[11].play(players[id].eyes.outer + 'Stop' + 'Down');
                player.list[12].play(players[id].eyes.iris + 'Stop' + 'Down');
                player.list[13].play(players[id].hair.sprite + 'Stop' + 'Down');
                player.list[14].play(players[id].genitles.sprite + 'Stop' + 'Down');
                // playerContainer.list[14].play(players[id].hands.sprite + 'Stop' + 'Down');
                // playerContainer.list[15].play(players[id].feet.sprite + 'Stop' + 'Down');
              }
              // console.log(players[id].firstName, 'isMoving = ', players[id].isMoving);
            }
          });
        });
      });



      this.cursors = this.input.keyboard.createCursorKeys();
      this.leftKeyPressed = false;
      this.rightKeyPressed = false;
      this.upKeyPressed = false;
      this.downKeyPressed = false;


      //this is the code to determine wether the game or the chat is in focus
      let phaserApp = document.getElementById("phaserApp");
      phaserApp.onfocus = function () {
        chatFocused = false;
        releaseKeys(chatFocused);
        console.log('ChatFocused = ', chatFocused);
      }
      phaserApp.onblur = function () {
        //when you stop focusingon it
        chatFocused = true;
        // this.input.keyboard.disableGlobalCapture(); //why can I not use this.input.keyboard inside a function?????
        releaseKeys(chatFocused);
        console.log('ChatFocused = ', chatFocused);
      }
      function releaseKeys(focused){
        console.log('release keys called')
        if (focused == false) {
          self.input.keyboard.enabled = true;

          console.log('in game arrow keys enabled');
        }
        else {
          self.input.keyboard.disableGlobalCapture();
          // this.input.keyboard.enabled = false;
          console.log('in game arrow keys disabled');
        }
      }

      //----- this detects if the game has been clicked so as to move the focus off of the chat div and back onto the game allowing players to move again -----//
      this.input.on('pointerdown', function (pointer) {
        document.getElementById('phaserApp').focus();
        //console.log('phaser game was clicked');
      }, this);




      function spawnSpells(spells) {
        var spell0 = self.add.image(spells[0].x, spells[0].y, spells[0].Icon).setInteractive();
        var spell1 = self.add.image(spells[1].x, spells[1].y, spells[1].Icon).setInteractive();
        var spell2 = self.add.image(spells[2].x, spells[2].y, spells[2].Icon).setInteractive();
        var spellInfo = {selection:'', Name:'', Descrip:'',locationX:'', locationY:''};
        spell0.on('pointerdown', function (pointer){
          toDestroy = spell0;
          if (pointer.rightButtonDown()) {
            spellInfo.Name = spells[0].Name;
            clicked = spells[0];
            console.log(spellInfo.Name, ' was Right clicked');
          } else {
            console.log('spell was Left clicked');
          }
        });
        spell1.on('pointerdown', function (pointer){
          toDestroy = spell1;
          if (pointer.rightButtonDown()) {
            spellInfo.Name = spells[1].Name;
            clicked = spells[1];
            console.log(spellInfo.Name, ' was Right clicked');
          } else {
            console.log('spell was Left clicked');
          }
        });
        spell2.on('pointerdown', function (pointer){
          toDestroy = spell2;
          if (pointer.rightButtonDown()) {
            spellInfo.Name = spells[2].Name;
            clicked = spells[2];
            console.log(spellInfo.Name, ' was Right clicked');
          } else {
            console.log('spell was Left clicked');
          }
        });
      }

      var input = document.getElementById("examineItem");
      input.addEventListener("click", function(event) {
        event.preventDefault();
        self.socket.emit('examineClicked', clicked);
        console.log('clicked = ', clicked)
        //console.log('examineItem was clicked', '\n', 'Client Side clicked variable = ', clicked);
        clicked = {Identifier: ''};
        //console.log(playerInfo.username);
        //examineClicked(playerInfo);
      });

      this.socket.on('examinedInfo', function (examinedItem) {
        //console.log('examintedItem information from server = ', examinedItem);
        const lookDisplay = document.getElementById("lookDisplay")
        if (examinedItem.Identifier === 'spell') {
          lookDisplay.innerHTML = '<strong>Spell Name: </strong>'+examinedItem.Name+'<br><br><strong>Spell Description:</strong><br>'+examinedItem.Description
        }
        if (examinedItem.Identifier === 'player') {
          console.log('examinedItem = ', examinedItem);
          lookDisplay.innerHTML = '<strong>Name: </strong>'+examinedItem.firstName + ' ' + examinedItem.lastName+'<br><br><strong>Player Description:</strong><br>'+examinedItem.icDescrip
        }
        document.getElementById("lookDisplay").style.display = "block";
        document.getElementById("itemsDisplay").style.display = "none";
        document.getElementById("spellsDisplay").style.display = "none";
        document.getElementById("mapDisplay").style.display = "none";
        document.getElementById("voreDisplay").style.display = "none";
        document.getElementById("optionsDisplay").style.display = "none";
        //console.log('sprite was Right clicked');
      });

      var pickUpInput = document.getElementById("pickUp");
      pickUpInput.addEventListener("click", function(event) {
        event.preventDefault();
        self.socket.emit('pickUpClicked', clicked);
        clicked = {Identifier: ''};
      });
      this.socket.on('pickedUpItem', function (spellInventory) {
        console.log('picking up a spell');
        //console.log(playerInfo.username);
        const spellsDisplay = document.getElementById("spellsDisplay")
        var spellsTable = document.getElementById("spellsTable");
        var row = spellsTable.insertRow();
        var cell1 = row.insertCell();
        var cell2 = row.insertCell();
        var cell3 = row.insertCell();
        cell1.innerHTML = '<img src="assets/images/Scroll_02.png" alt="Spell1">';
        cell2.innerHTML = spellInventory[spellInventory.length-1].Name;
        cell3.innerHTML = spellInventory[spellInventory.length-1].Description;
        document.getElementById("lookDisplay").style.display = "none";
        document.getElementById("itemsDisplay").style.display = "none";
        document.getElementById("spellsDisplay").style.display = "block";
        document.getElementById("mapDisplay").style.display = "none";
        document.getElementById("optionsDisplay").style.display = "none";
        //console.log('spell was Right clicked');
        toDestroy.destroy();
        toDestroy = null;
        //console.log('spell0 = ', spell0);
      })














      //----- Chat box -----//
      rememberText();

        var element = function(id){
          return document.getElementById(id);
        }
        //Get Elements
        var status = element('status');
        var messages = element('messages');
        var textarea = element('textarea');
        var username = element('username');
        var clearBtn = element('clearBtn');

        //Set default status
        var statusDefault = status.textContent;
        var setStatus = function(s){
          //Set Status
          status.textContent = s;

          if(s !== statusDefault){
            var delay = setTimeout(function(){
              setStatus(statusDefault);
            }, 4000);
          }
        }







        // (function(){
        console.log('weird ass function thingy called');
        rememberText();

        var element = function(id){
          return document.getElementById(id);
        }
        //Get Elements
        var status = element('status');
        var messages = element('messages');
        var textarea = element('textarea');
        var username = element('username');
        var clearBtn = element('clearBtn');

        //Set default status
        var statusDefault = status.textContent;
        var setStatus = function(s){
          //Set Status
          status.textContent = s;

          if(s !== statusDefault){
            var delay = setTimeout(function(){
              setStatus(statusDefault);
            }, 4000);
          }
        }


        //----- Checking if socket is connected -----//
        if(this.socket !== undefined){
          console.log('Connected to Socket...');
          //----- Client is recieving message sent from server -----//
          this.socket.on('output', function(data){
            console.log(data);
            //----- Checking if there are any messages saved in history -----//
            if(data.length){
              for(var x = 0;x < data.length;x++){
                if(data[x].deleted.status == false){
                  //----- Runs function to check wether chat history is scrolled all the way down to bottom -----//
                  const isScrolledToBottom = scrollChecker();

                  //----- Create div that will hold received message -----//
                  var message = document.createElement('div');
                  //----- set the div's id to match the mongo id set for this post stored in database -----//
                  message.id = data[x]._id;
                  //----- Apply ".chat-message" class to div for styling -----//
                  message.setAttribute('class', 'chat-message');

                  var msgTitleBar = document.createElement('div');
                  msgTitleBar.setAttribute('class', 'msg-title-bar');
                  message.appendChild(msgTitleBar);

                  //----- Create a span element that will hold the message sent time in chat history -----//
                  var timeSpan = document.createElement('div');
                  //----- Take full date and convert it to user's local time zone -----//
                  //----- Then summerize it to show only hour and minutes and insert as raw HTML in span -----//
                  timeSpan.innerHTML = new Date(Date.parse(data[x].message[data[x].message.length-1].time)).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})+' ';
                  //----- Set ".postTime" class to this span to apply styling unique to timestamp -----//
                  timeSpan.className = 'postTime'
                  timeSpan.style.display = 'inline-block';
                  // timeSpan.style.cssFloat = "left";
                  //----- Insert timestamp as first item in the div that will hole the entire post -----//
                  msgTitleBar.appendChild(timeSpan);

                  //----- Create a span that will hold username assigned to sent message in chat history -----//
                  var userSpan = document.createElement('div');
                  //----- Insert username as raw HTML in span and make Bold -----//
                  userSpan.innerHTML = '<strong>'+data[x].name+': '+'</strong>';
                  userSpan.className = 'msgUsername'
                  userSpan.style.display = 'inline-block';
                  // userSpan.style.cssFloat = "left";
                  //----- Insert username as second item in the div that will hold the entire post -----//
                  msgTitleBar.appendChild(userSpan);

                  var spoilerSpan = document.createElement('div');
                  // spoilerSpan.style.display = 'inline-block';
                  // spoilerSpan.style.cssFloat = "left";
                  spoilerSpan.style.width = 'fit-content'
                  if(data[x].spoiler.status !== 'none'){
                    spoilerSpan.className = 'spoiled-'+data[x].spoiler.status+' hidden';
                  } else{
                    spoilerSpan.className = 'spoiled-'+data[x].spoiler.status;
                  }

                  spoilerSpan.onclick = function showHideSpoils(event){
                    console.log(event);
                    console.log(event.target.parentElement);
                    // ev.target.style.backgroundColor = '#191932'
                    event.target.parentElement.classList.toggle("hidden");
                    event.target.parentElement.classList.toggle("show");
                  };
                  message.appendChild(spoilerSpan);

                  if(data[x].spoiler.status == 'watersports' && document.querySelector("#watersportsBox").checked == false){
                    spoilerSpan.classList.toggle("hidden");
                    spoilerSpan.classList.toggle("show");
                  }
                  if(data[x].spoiler.status == 'disposal' && document.querySelector("#disposalBox").checked == false){
                    spoilerSpan.classList.toggle("hidden");
                    spoilerSpan.classList.toggle("show");
                  }
                  if(data[x].spoiler.status == 'gore' && document.querySelector("#goreBox").checked == false){
                    spoilerSpan.classList.toggle("hidden");
                    spoilerSpan.classList.toggle("show");
                  }

                  //----- Create a span that will hold actual message received from server to add to chat history -----//
                  var postSpan = document.createElement('div');
                  // postSpan.style.display = 'inline-block';
                  // postSpan.style.cssFloat = "left";
                  // console.log(data[x].message[data[x].message.length-1].content);
                  //----- Insert post text as raw HTML in the span -----//
                  postSpan.innerHTML = data[x].message[data[x].message.length-1].content;
                  //----- Insert message as 3rd item in the div that will hold the entire post -----//
                  spoilerSpan.appendChild(postSpan);


                  var editSpan = document.createElement('div');
                  // editSpan.innerHTML = 'Edit';
                  editSpan.className = 'editPost dropdown'
                  editSpan.setAttribute('data-dropdown', '');

                  var settingsBtn = document.createElement('button');
                  settingsBtn.innerHTML = '&#xe5d4;'
                  settingsBtn.className = 'link msg-control-btn material-icons md-18'
                  settingsBtn.setAttribute('data-dropdown-button', '')
                  editSpan.appendChild(settingsBtn);






                  settingsBtn.onclick = function(e){
                    console.log('Edit button element = ', e);
                    console.log('e.clientX = ', e.clientX, '\n', 'e.clientY = ', e.clientY)
                    console.log('post ID = ', e.target.parentElement.parentElement.parentElement.id);
                    console.log('message content = ', e.target.parentElement.parentElement.nextElementSibling.firstChild);
                    console.log('spoiler class = ', e.target.parentElement.parentElement.nextElementSibling.classList)

                    var messageId = e.target.parentElement.parentElement.parentElement.id;
                    var messageContent = e.target.parentElement.parentElement.nextElementSibling.firstChild;
                    var spoilerStatus = e.target.parentElement.parentElement.nextElementSibling.classList;
                    var btnLoc = {
                      x: e.clientX,
                      y: e.clientY
                    }

                    var container = document.getElementsByClassName('container');
                    console.log('container = ', container);

                    var dropDwnMnu = document.createElement('div');
                    dropDwnMnu.style.top = btnLoc.y+'px'
                    dropDwnMnu.style.left = btnLoc.x+'px'
                    dropDwnMnu.style.transform = 'translateX(-110%)'
                    dropDwnMnu.className = 'msg-settings-menu'
                    dropDwnMnu.tabIndex = 0;
                    dropDwnMnu.focus();



                    container[0].appendChild(dropDwnMnu);
                    dropDwnMnu.style.overflow = 'hidden';
                    setTimeout(function(){
                      console.log("Executed after 151 milliseconds");
                      dropDwnMnu.style.overflow = 'visible';
                    }, 550);


                    var extraDiv = document.createElement('div');
                    dropDwnMnu.appendChild(extraDiv)

                    var dropDwnEdit = document.createElement('div');
                    dropDwnEdit.innerHTML = 'Edit';
                    dropDwnEdit.className = 'msg-settings-option';
                    extraDiv.appendChild(dropDwnEdit);

                    var dropDwnDelete = document.createElement('div');
                    dropDwnDelete.innerHTML = 'Delete';
                    dropDwnDelete.className = 'msg-settings-option';
                    extraDiv.appendChild(dropDwnDelete);

                    var dropDwnSpoil = document.createElement('div');
                    dropDwnSpoil.innerHTML = 'Edit Spoiler';
                    dropDwnSpoil.style.position = 'relative'
                    dropDwnSpoil.className = 'msg-settings-option edit-expander';
                    extraDiv.appendChild(dropDwnSpoil);
                    dropDwnMnu.focus();
                    dropDwnMnu.style.height = 'fit-content'

                    var spoilerOptionsContainer = document.createElement('div');

                    // spoilerOptionsContainer.style.width = '100px'
                    // spoilerOptionsContainer.style.height = '100px'
                    // spoilerOptionsContainer.style.backgroundColor = 'pink'
                    // spoilerOptionsContainer.style.transform = 'translateX(-100%) translateY(-18%)'
                    spoilerOptionsContainer.className = 'spoilerOptionsContainer';
                    // spoilerOptionsContainer.style.transform = 'translateY(18%)'

                    dropDwnSpoil.appendChild(spoilerOptionsContainer);

                    var spoilerList = document.createElement('ul');
                    spoilerOptionsContainer.appendChild(spoilerList);
                    spoilerList.style.listStyleType = 'none'
                    spoilerList.style.margin = '0'
                    spoilerList.style.padding = '0'

                    var spoilerLi01 = document.createElement('li')
                    spoilerList.appendChild(spoilerLi01);
                    var radioSelect01 = document.createElement('input');
                    radioSelect01.type = 'radio';
                    radioSelect01.id = 'spoileEdit-general'
                    radioSelect01.name = 'spoilerEdit'
                    radioSelect01.value = 'general'
                    spoilerLi01.appendChild(radioSelect01);
                    var radioSelect01Label = document.createElement('label');
                    radioSelect01Label.for = 'spoileEdit-general'
                    radioSelect01Label.innerHTML = 'General';
                    spoilerLi01.appendChild(radioSelect01Label);
                    if(spoilerStatus.contains('spoiled-general')){
                      radioSelect01.checked = true;
                    }
                    radioSelect01.onclick = function(){
                      console.log('clicked the general spoil edit button');
                      spoilEdited(messageId, radioSelect01.value);
                    }

                    var spoilerLi02 = document.createElement('li')
                    spoilerList.appendChild(spoilerLi02);
                    var radioSelect02 = document.createElement('input');
                    radioSelect02.type = 'radio';
                    radioSelect02.id = 'spoileEdit-watersports'
                    radioSelect02.name = 'spoilerEdit'
                    radioSelect02.value = 'watersports'
                    spoilerLi02.appendChild(radioSelect02);
                    var radioSelect02Label = document.createElement('label');
                    radioSelect02Label.for = 'spoileEdit-watersports'
                    radioSelect02Label.innerHTML = 'Watersports';
                    spoilerLi02.appendChild(radioSelect02Label);
                    if(spoilerStatus.contains('spoiled-watersports')){
                      radioSelect02.checked = true;
                    }
                    radioSelect02.onclick = function(){
                      console.log('clicked the watersports spoil edit button');
                      console.log('messageId at onclick = ', messageId);
                      spoilEdited(messageId, radioSelect02.value);
                    }

                    var spoilerLi03 = document.createElement('li')
                    spoilerList.appendChild(spoilerLi03);
                    var radioSelect03 = document.createElement('input');
                    radioSelect03.type = 'radio';
                    radioSelect03.id = 'spoileEdit-disposal'
                    radioSelect03.name = 'spoilerEdit'
                    radioSelect03.value = 'disposal'
                    spoilerLi03.appendChild(radioSelect03);
                    var radioSelect03Label = document.createElement('label');
                    radioSelect03Label.for = 'spoileEdit-disposal'
                    radioSelect03Label.innerHTML = 'Scat/Disposal';
                    spoilerLi03.appendChild(radioSelect03Label);
                    if(spoilerStatus.contains('spoiled-disposal')){
                      radioSelect03.checked = true;
                    }
                    radioSelect03.onclick = function(){
                      console.log('clicked the disposal spoil edit button');
                      spoilEdited(messageId, radioSelect03.value);
                    }

                    var spoilerLi04 = document.createElement('li')
                    spoilerList.appendChild(spoilerLi04);
                    var radioSelect04 = document.createElement('input');
                    radioSelect04.type = 'radio';
                    radioSelect04.id = 'spoileEdit-gore'
                    radioSelect04.name = 'spoilerEdit'
                    radioSelect04.value = 'gore'
                    spoilerLi04.appendChild(radioSelect04);
                    var radioSelect04Label = document.createElement('label');
                    radioSelect04Label.for = 'spoileEdit-gore'
                    radioSelect04Label.innerHTML = 'Gore';
                    spoilerLi04.appendChild(radioSelect04Label);
                    if(spoilerStatus.contains('spoiled-gore')){
                      radioSelect04.checked = true;
                    }
                    radioSelect04.onclick = function(){
                      console.log('clicked the gore spoil edit button');
                      spoilEdited(messageId, radioSelect04.value);
                    }

                    var spoilerLi05 = document.createElement('li')
                    spoilerList.appendChild(spoilerLi05);
                    var radioSelect05 = document.createElement('input');
                    radioSelect05.type = 'radio';
                    radioSelect05.id = 'spoileEdit-none'
                    radioSelect05.name = 'spoilerEdit'
                    radioSelect05.value = 'none'
                    spoilerLi05.appendChild(radioSelect05);
                    var radioSelect05Label = document.createElement('label');
                    radioSelect05Label.for = 'spoileEdit-none'
                    radioSelect05Label.innerHTML = 'None';
                    spoilerLi05.appendChild(radioSelect05Label);
                    if(!spoilerStatus.contains('spoiled-general') && !spoilerStatus.contains('spoiled-watersports') && !spoilerStatus.contains('spoiled-disposal') && !spoilerStatus.contains('spoiled-gore')){
                      radioSelect05.checked = true;
                    }
                    radioSelect05.onclick = function(){
                      console.log('clicked the none spoil edit button');
                      spoilEdited(messageId, radioSelect05.value);
                    }


                    dropDwnEdit.onclick = function() {
                      console.log('onclick function messageContent', messageContent);
                      editBtnClicked(messageId, messageContent);
                    }

                    dropDwnDelete.onclick = function() {
                      deleteBtnClicked(messageId);
                    }

                    dropDwnMnu.onblur = function(){
                      const dropDwnMnuBlur = true;
                      console.log('activeElement = ', document.activeElement.tagName);
                      if (document.activeElement == spoilerOptionsContainer || document.activeElement == spoilerLi01|| document.activeElement == radioSelect01 || document.activeElement == radioSelect05Label){
                        console.log('menu thingy is in focus')
                      } else{
                        // dropDwnMnu.style.height = '0px'
                        // dropDwnMnu.style.overflow = 'hidden';
                        // 151 millisecond delay
                        setTimeout(function(){
                          console.log("Executed after 151 milliseconds");
                          dropDwnMnu.remove();
                          console.log('settings drop down menu no longer in focus');
                        }, 550);
                      };
                    }
                  }





                  msgTitleBar.appendChild(editSpan);

                  //----- Attach whole post div to the end of message history -----//
                  messages.appendChild(message);

                  spoilerSpan.style.marginLeft = timeSpan.offsetWidth+'px';
                  //----- Once th eabove code has run, the message will have been successfully added to chat history -----//

                  //----- After the new message has been added to chat history, the below code will check -----//
                  //----- to see if latest message is currently visible. If user is scrolled too far up -----//
                  //----- they will not see latest message. The below code will insert a "New messages" -----//
                  //----- label above the messages that were not in view port when they were added to chat history -----//
                  var bounding = message.getBoundingClientRect();
                  if (bounding.top >= 0 && bounding.left >= 0 && bounding.right <= window.innerWidth && bounding.bottom <= window.innerHeight) {
                    //----- This runs if the most recent message is visible when added to chat history -----//
                    // console.log('Most recent post is in the viewport!');
                  } else {
                    //----- This runs if user is scrolled up and unable to see most recentl added message -----//
                    // console.log('Most recent post is NOT in the viewport!');
                    //----- Search for "new message" marker to see if it already exists in chat history -----//
                    var newMessageChecker = document.getElementsByClassName('newMessages');
                    if (newMessageChecker.length > 0) {
                      //----- This runs if a new messages marker was found in the chat history -----//
                        // console.log('new message marker already exists')
                    } else{
                      //----- This runs if no new messages marker was found in chat history -----//
                      //----- Creates div that will hold "New Messages" marker -----//
                      var newMessages = document.createElement('div');
                      //----- Inserts raw HTML containing "New Messages" text -----//
                      newMessages.innerHTML = '----- New Messages -----'
                      //----- Sets color of new messages marker to red in chat history -----//
                      newMessages.color = 'red';
                      //----- Assigns a class of ".newMessages" to div for styling -----//
                      newMessages.className = 'newMessages';
                      //----- Finds the last message that was added to chat history -----//
                      //----- And insterts "new messages" marker BEFORE the message that was last added -----//
                      message.previousSibling.appendChild(newMessages);
                    }
                  }

                  // console.log('post time = ', new Date(Date.parse(data[x].message[data[x].message.length-1].time)).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'}));

                  // new Date(Date.parse(data[x].message[data[x].message.length-1].time)).toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})+' ';
                  //----- Calls a function to check if user is scrolled all the way down to bottom -----//
                  //----- If user is scrolled to bottom, this will automatically scroll the chat history down further -----//
                  //----- This ensures that new messages are always in view and the user does not have to manually scroll down -----//
                  //----- each time a new message is added to the chat history -----//
                  if (isScrolledToBottom) {
                    messages.scrollTop = messages.scrollHeight - messages.clientHeight;
                  }
                }
              }
            }
          });

          this.socket.on('editOutput', function(data){
            console.log('editOutput = ', data);
            console.log('data.id = ', data._id);
            if(data.deleted.status == false){
              const editedMsg = document.getElementById(data._id).firstChild.nextElementSibling.firstChild.innerHTML = data.message[data.message.length-1].content;
              console.log('document.getElementById(data._id) = ', document.getElementById(data._id));
              console.log('editedMsg', editedMsg);
            } else{
              const deletedMsg = document.getElementById(data._id);
              deletedMsg.remove();
            }
          })

          this.socket.on('editSpoilerOutput', function(data){
            console.log('editSpoilerOutput = ', data);
            console.log('data.id = ', data._id);
            var currentClass = document.getElementById(data._id).firstChild.nextElementSibling.classList[0];
            if(currentClass){
              const editedSpolier = document.getElementById(data._id).firstChild.nextElementSibling.classList.replace(currentClass,'spoiled-'+data.spoiler.status);
              document.getElementById(data._id).firstChild.nextElementSibling.classList.add('hidden');
            }else{
              document.getElementById(data._id).firstChild.nextElementSibling.classList.add('spoiled-'+data.spoiler.status);
              document.getElementById(data._id).firstChild.nextElementSibling.classList.add('hidden');
            }
          })

          //Get Status From Server
          this.socket.on('status', function(data){
            //get message status
            setStatus((typeof data === 'object')? data.message : data);

            //If status is clear, clear text
            if(data.clear){
              textarea.value = '';
            }
          })

          this.socket.on('tooManyChars', function(data, message){
            textarea.innerHTML = message;
            charCounter();
            tooManyChars(data);
          });



        //----- Controls how and when messages are sent from message box -----//
          // console.log('charCount = ', charCount)
          textarea.addEventListener('keydown', function(event){
            // console.log('keydown detected');
            // console.log('event.key = ', event.key);

            if(event.which === 13 && event.shiftKey == false){
              var charCount = charCounter();
              event.preventDefault()
              console.log('charCount = ', charCount)
              if(charCount <= 10000){
                // Emit to server input
                console.log('sending message...');
                console.log(document.getElementById('spoilers').value);
                socket.emit('input', {
                  name:username.value,
                  message:textarea.innerHTML,
                  spoiler:document.getElementById('spoilers').value
                });
                localStorage.setItem('previousMessage', textarea.innerHTML);
                textarea.innerHTML = '';
                charCount = 0;
                charCounter();
              }else{
                console.log('too many characters, could not send message');
                tooManyChars(charCount);
              }
              // event.preventDefault();
            }

            if(event.which === 38 && textarea.innerHTML === ''){
              textarea.innerHTML = localStorage.getItem("previousMessage");
              charCounter();
              document.getElementById('textarea').focus();
            }

            if (event.ctrlKey && event.key === 'b'){
              console.log('ctrl b pressed');
              event.preventDefault()
              document.execCommand('bold');
            }
            if (event.ctrlKey && event.key === 'i'){
              console.log('ctrl i pressed');
              event.preventDefault()
              document.execCommand('italic');
            }
            if (event.ctrlKey && event.key === 'u'){
              console.log('ctrl u pressed');
              event.preventDefault()
              document.execCommand('underline');
            }
            if (event.ctrlKey && event.key === 's'){
              console.log('ctrl s pressed');
              event.preventDefault()
              document.execCommand('strikethrough');
            }
            if (event.ctrlKey && event.key === '-'){
              console.log('ctrl - pressed');
              event.preventDefault()
              document.execCommand('subscript');
            }
            if (event.ctrlKey && event.key === '+'){
              console.log('ctrl + pressed');
              event.preventDefault()
              document.execCommand('superscript');
            }
          })

          //----- Controls Character Limits -----//
          textarea.addEventListener('input', function(event){
            var tempText = textarea.innerHTML;
            localStorage.setItem("textarea", tempText);

            charCounter();
          })

          //----- Edit Button Functions -----//
          function editBtnClicked(messageId, messageContent){
            console.log('editBtn messageContent = ', messageContent);
            console.log('messageContent = ', messageContent.innerHTML);
            console.log('editbtnclicked: ', messageContent.parentElement.classList.contains('hidden'));
            const oldMessage = messageContent.innerHTML;
            var urlRegex = /((?:(http|https|Http|Https|rtsp|Rtsp):\/\/(?:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,64}(?:\:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,25})?\@)?)?((?:(?:[a-zA-Z0-9][a-zA-Z0-9\-]{0,64}\.)+(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnrwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eouw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\:\d{1,5})?)(\/(?:(?:[a-zA-Z0-9\;\/\?\:\@\&\=\#\~\-\.\+\!\*\'\(\)\,\_])|(?:\%[a-fA-F0-9]{2}))*)?(?:\b|$)+/gi;



            var links = messageContent.innerText.match(urlRegex, function(url) {
              console.log('url inserted into a href = ', url);

              return url;
            });
            console.log('links = ', links);
            if(links){
              for (let i = 0; i < links.length; i++) {
                // console.log('links[i] = ', links[i]);
                //const ahrefCheck = /(<a href=")(\/\/)?(${links[i]})(" target="_blank">)(${links[i]})(<\/a>)/gi
                const ahrefCheck = new RegExp('(<a href=")(\/\/)?' + links[i] + '(" target="_blank">)' + links[i] + '(<\/a>)', "g");
                if(ahrefCheck.test(messageContent.innerHTML)){
                  console.log('found a link');
                  console.log('links[i] = ', links[i]);
                  messageContent.innerHTML = messageContent.innerHTML.replace(ahrefCheck, links[i])
                } else{
                  console.log('Did not find a link');
                }
              }
            }





            const spoilerContainer = document.getElementById(messageId).firstChild.nextElementSibling;
            spoilerContainer.style.width = 'auto';

            messageContent.contentEditable = 'true';
            messageContent.classList.add('editing');
            if(messageContent.parentElement.classList.contains('hidden')){
              messageContent.parentElement.classList.remove('hidden');
              messageContent.parentElement.classList.add('show');
              messageContent.parentElement.style.pointerEvents = 'none';
            }
            if(messageContent.parentElement.classList.contains('show')){
              messageContent.parentElement.style.pointerEvents = 'none';
            }

            var cancel = document.createElement('span');
            cancel.innerHTML = 'Cancel';
            cancel.style.display = 'block';
            cancel.style.paddingLeft = '100px';
            cancel.addEventListener('click', () => {
              console.log('Cancelled Edit with Cancel button')
              messageContent.innerHTML = oldMessage;
              messageContent.contentEditable = 'false';
              messageContent.classList.remove('editing');
              messageContent.parentElement.style.pointerEvents = 'auto';
              spoilerContainer.style.width = 'fit-content';
              cancel.remove();
            });

            messageContent.parentElement.parentElement.appendChild(cancel);


            messageContent.addEventListener('keydown', keyDownHandeler)

            function keyDownHandeler(event){
              console.log('testing to see if this thingy works')
              if(event.which === 13 && event.shiftKey == false){
                // Emit to server input
                console.log('sending EDITED message...');
                socket.emit('inputEdit', {
                  _id:messageId,
                  message:messageContent.innerHTML,
                });
                messageContent.contentEditable = 'false';
                messageContent.classList.remove('editing');
                messageContent.parentElement.style.pointerEvents = 'auto';
                spoilerContainer.style.width = 'fit-content';
                cancel.remove();
                messageContent.removeEventListener('keydown', keyDownHandeler);
              }
              if(event.which === 27){
                console.log('Cancelled Edit with Escape Key');
                messageContent.innerHTML = oldMessage;
                messageContent.contentEditable = 'false';
                messageContent.classList.remove('editing');
                messageContent.parentElement.style.pointerEvents = 'auto';
                spoilerContainer.style.width = 'fit-content';
                cancel.remove();
                messageContent.removeEventListener('keydown', keyDownHandeler);
              }
            };
          }

          function deleteBtnClicked(messageId, messageContent){
            console.log('too many chars function called');
            var deleteDialogue = document.createElement('div');
            deleteDialogue.className = 'dialogueBox';
            document.getElementsByClassName('chat-holder')[0].appendChild(deleteDialogue);

            var deleteTitle = document.createElement('h2');
            // notificationCounterDiv.innerHTML = `${charCount}/10000 Characters`;
            deleteTitle.innerHTML = `Delete This Message?`;
            deleteDialogue.appendChild(deleteTitle);

            var deleteMessageDiv = document.createElement('div');
            deleteMessageDiv.innerHTML = 'This action can not be undone.'
            deleteDialogue.appendChild(deleteMessageDiv);

            var cancelBtn = document.createElement('button')
            cancelBtn.innerHTML = 'Cancel';
            deleteDialogue.appendChild(cancelBtn);

            cancelBtn.addEventListener('click', () => {
              console.log('cancel button click');
              deleteDialogue.remove();
              document.getElementById('textarea').focus();
            })

            var deleteBtn = document.createElement('button')
            deleteBtn.innerHTML = 'Delete';
            deleteDialogue.appendChild(deleteBtn);

            deleteBtn.addEventListener('click', () => {
              console.log('dismiss button click');
              console.log('messageId = ', messageId);
              const deletedMsg = document.getElementById(messageId);
              console.log('deletedMsg = ', deletedMsg);
              deletedMsg.remove();
              socket.emit('deleteMessage', {
                _id:messageId
              });
              deleteDialogue.remove();
              document.getElementById('textarea').focus();
            })
          }

          function spoilEdited(messageId, spoiler){
            console.log('spoilEdited function called successfully');
            console.log('messageId = ', messageId);
            console.log('spoiler = ', spoiler);
            socket.emit('sendSpoilEdit', {
              _id:messageId,
              spoiler:spoiler
            });
            console.log('sendSpoilEdit emitted');
          }

          //----- Handles socket events fired when pressing the "clear" button -----//
          clearBtn.addEventListener('click', function(){
            socket.emit('clear');
          });
          //----- After clear button is pressed and messages are removed from mongo -----//
          //----- This clears local chat history upon receiving confirmation from socket -----//
          this.socket.on('cleared', function(){
            messages.textContent = '';
          });

        } else{
          console.log('socket not connecting...');
        }
      // })();

        function rememberText(){
        var storedText = localStorage.getItem("textarea");
        if(storedText != null){
          document.getElementById("textarea").innerHTML = storedText;
          charCounter();
          document.getElementById('textarea').focus();
        } else{
          document.getElementById("textarea").innerHTML = '';
          charCounter();
        }
      }

      function scrollChecker (){
        const atBottom = messages.scrollHeight - messages.clientHeight <= messages.scrollTop + 1;
        // console.log(atBottom);
        return atBottom;
      }


      document.getElementById('messages').addEventListener('scroll', checkIfScrolling);
      function checkIfScrolling(){
        const ifAtBottom = scrollChecker()
        if(ifAtBottom){
          var newMessageChecker = document.getElementsByClassName('newMessages');
          if (newMessageChecker.length > 0) {
              newMessageChecker[0].remove();
          }
        }
      }

      function charCounter(){
        charCount = document.getElementById('textarea').innerText.length;
        // console.log('charCount = ', charCount);
        const charCounter = document.getElementsByClassName('charlimit')[0];
        charCounter.innerText = `${charCount}/10000`;
        if(charCount > 9950){
          // console.log('(too much) charCount = ', charCount);
          const color = '#c94747';
          charCounter.style.color = color;
        } else{
          // console.log(' (too smol) charCount = ', charCount);
          const color = '#767f66'
          charCounter.style.color = color;
        }
        return charCount;
      }

      function tooManyChars(charCount){
        console.log('too many chars function called');
        var tooManyCharsDiv = document.createElement('div');
        tooManyCharsDiv.className = 'dialogueBox';
        document.getElementsByClassName('chat-holder')[0].appendChild(tooManyCharsDiv);

        console.log('charCount = ', charCount)
        var charCountDiv = document.createElement('h2');
        charCountDiv.innerHTML = charCount;
        charCountDiv.style.color = '#c94747';
        // charCountDiv.style.display = 'inline-block';
        tooManyCharsDiv.appendChild(charCountDiv);

        var notificationCounterDiv = document.createElement('h2');
        // notificationCounterDiv.innerHTML = `${charCount}/10000 Characters`;
        notificationCounterDiv.innerHTML = `/10000 Characters`;
        // notificationCounterDiv.display = 'inline-block';
        tooManyCharsDiv.appendChild(notificationCounterDiv);

        // document.styleSheets[0].addRule('.dialogueBox h2:before','content: "'+charCount+'";','color: red;');
        // document.styleSheets[0].addRule('.dialogueBox h2:before','color: #c94747;');

        var notificationMessageDiv = document.createElement('div');
        notificationMessageDiv.innerHTML = 'Your post has too many characters, try making your post shorter before sending.'
        tooManyCharsDiv.appendChild(notificationMessageDiv);

        var dismissBtn = document.createElement('button');
        dismissBtn.innerHTML = 'OK';
        tooManyCharsDiv.appendChild(dismissBtn);

        dismissBtn.addEventListener('click', () => {
          console.log('dismiss button click');
          // document.styleSheets[0].addRule('.dialogueBox h2:before','content: "";');
          tooManyCharsDiv.remove();
          document.getElementById('textarea').focus();
        })
      }

      function areYouSure(){
        console.log('are you sure dialogue box?');
      }

      const boldBtn = document.querySelector('#bold-btn');
      const italicBtn = document.querySelector('#italic-btn');
      const underlineBtn = document.querySelector('#underline-btn');
      const strikethroughBtn = document.querySelector('#strikethrough-btn');
      const subscriptBtn = document.querySelector('#subscript-btn');
      const superscriptBtn = document.querySelector('#superscript-btn');

      boldBtn.addEventListener('click', () => {
        document.execCommand('bold');
        document.getElementById('textarea').focus();
        document.getElementById('textarea').select();
      });
      italicBtn.addEventListener('click', () => {
        document.execCommand('italic');
        document.getElementById('textarea').focus();
        document.getElementById('textarea').select();
      });
      underlineBtn.addEventListener('click', () => {
        document.execCommand('underline');
        document.getElementById('textarea').focus();
        document.getElementById('textarea').select();
      });
      strikethroughBtn.addEventListener('click', () => {
        document.execCommand('strikethrough');
        document.getElementById('textarea').focus();
        document.getElementById('textarea').select();
      });
      subscriptBtn.addEventListener('click', () => {
        document.execCommand('subscript');
        document.getElementById('textarea').focus();
        document.getElementById('textarea').select();
      });
      superscriptBtn.addEventListener('click', () => {
        document.execCommand('superscript');
        document.getElementById('textarea').focus();
        document.getElementById('textarea').select();
      });

      //----- controls chat control button dropdowns -----//
      document.addEventListener("click", e => {
        // console.log('e = ', e)
        // console.log('this is when controls chat control button dropdowns was clicked');
        const isDropdownButton = e.target.matches("[data-dropdown-button]");
        if(!isDropdownButton && e.target.closest('[data-dropdown]') !=null) return;

        let currentDropdown
        if(isDropdownButton){
          currentDropdown = e.target.closest('[data-dropdown]')
          currentDropdown.classList.toggle('active')
          console.log('clicked a drop down button');
        }

        document.querySelectorAll("[data-dropdown].active").forEach(dropdown => {
          if(dropdown === currentDropdown) return
          dropdown.classList.remove("active");
        })
      })

      const initSpoilStatus = document.getElementById('spoilers');
      initSpoilStatus.onchange = function updateSpoilerEye(event){
        console.log('initSpoilStatus = ', initSpoilStatus.value);
        if(initSpoilStatus.value == 'none'){
          document.getElementById('spoiler-label').innerHTML = '&#xe8f4;'
        } else {
          document.getElementById('spoiler-label').innerHTML = '&#xe8f5;'
        }
      }


      document.querySelector("#watersportsBox").addEventListener('click', () => {
        console.log('clicked the watersports filter');
        const collection = document.getElementsByClassName("spoiled-watersports");
        if(document.querySelector("#watersportsBox").checked == true){
          console.log('watersports box is checked');
          for (let i = 0; i < collection.length; i++) {
            collection[i].classList.add("hidden");
            collection[i].classList.remove('show');
          }
        }
        if(document.querySelector("#watersportsBox").checked == false){
          console.log('watersports box is empty');
          for (let i = 0; i < collection.length; i++) {
            collection[i].classList.remove("hidden");
            collection[i].classList.add('show');
          }
        }
      })
      document.querySelector("#disposalBox").addEventListener('click', () => {
        console.log('clicked the disposal filter');
        const collection = document.getElementsByClassName("spoiled-disposal");
        if(document.querySelector("#disposalBox").checked == true){
          console.log('disposal box is checked');
          for (let i = 0; i < collection.length; i++) {
            collection[i].classList.add("hidden");
            collection[i].classList.remove('show');
          }
        }
        if(document.querySelector("#disposalBox").checked == false){
          console.log('disposal box is empty');
          for (let i = 0; i < collection.length; i++) {
            collection[i].classList.remove("hidden");
            collection[i].classList.add('show');
          }
        }
      })
      document.querySelector("#goreBox").addEventListener('click', () => {
        console.log('clicked the gore filter');
        const collection = document.getElementsByClassName("spoiled-gore");
        if(document.querySelector("#goreBox").checked == true){
          console.log('gore box is checked');
          for (let i = 0; i < collection.length; i++) {
            collection[i].classList.add("hidden");
            collection[i].classList.remove('show');
          }
        }
        if(document.querySelector("#goreBox").checked == false){
          console.log('gore box is empty');
          for (let i = 0; i < collection.length; i++) {
            collection[i].classList.remove("hidden");
            collection[i].classList.add('show');
          }
        }
      })





      let editor = document.getElementById('textarea')
      document.onselectionchange = () => {
      	// Check if the editor is focussed
        // console.log('selection changed')
      	if (editor === document.activeElement){
          // console.log('editor is selected');
          if (isSelectionInTag('B')){
            // console.log('bold text selected');
            boldBtn.classList.add('activeBtn');
          } else{
            boldBtn.classList.remove('activeBtn');
          }

          if (isSelectionInTag('I')){
            // console.log('italic text selected');
            italicBtn.classList.add('activeBtn');
          } else{
            italicBtn.classList.remove('activeBtn');
          }

          if (isSelectionInTag('U')){
            // console.log('underlined text selected');
            underlineBtn.classList.add('activeBtn');
          } else{
            underlineBtn.classList.remove('activeBtn');
          }

          if (isSelectionInTag('STRIKE')){
            // console.log('strikethrough text selected');
            strikethroughBtn.classList.add('activeBtn');
          } else{
            // console.log(' text deselected');
            strikethroughBtn.classList.remove('activeBtn');
          }

          if (isSelectionInTag('SUB')){
            // console.log('subscript text selected');
            subscriptBtn.classList.add('activeBtn');
          } else{
            // console.log('bold text deselected');
            subscriptBtn.classList.remove('activeBtn');
          }

          if (isSelectionInTag('SUP')){
            // console.log('superscript text selected');
            superscriptBtn.classList.add('activeBtn');
          } else{
            superscriptBtn.classList.remove('activeBtn');
          }
      	}
      }

      function isSelectionInTag(tag){
      	// Get the current node
      	let currentNode = window.getSelection().focusNode;
        // console.log('currentNode = ', currentNode);
        // console.log('currentNode.id = ', currentNode.id);
      	// While the node is not the editor division
        // if(currentNode.id){
          while (currentNode.id !== 'textarea')
        	{
            // console.log('currentNode.tagName', currentNode.tagName);
        		// Check if the node is the requested tag
        		if (currentNode.tagName === tag) return true;
        		// Move up in the tree
        		currentNode = currentNode.parentNode;
        	}
        	return false;
        // }
      }























      //----- creating clickable UI buttons -----//

      var input = document.getElementById("lookTab");
      input.addEventListener("click", function(event) {
        event.preventDefault();
        console.log('Look tab was clicked!');
        document.getElementById("lookDisplay").style.display = "block";
        document.getElementById("itemsDisplay").style.display = "none";
        document.getElementById("spellsDisplay").style.display = "none";
        document.getElementById("mapDisplay").style.display = "none";
        document.getElementById("voreDisplay").style.display = "none";
        document.getElementById("optionsDisplay").style.display = "none";
      });
      var input = document.getElementById("itemsTab");
      input.addEventListener("click", function(event) {
        event.preventDefault();
        console.log('items tab was clicked!');
        document.getElementById("itemsDisplay").style.display = "block";
        document.getElementById("lookDisplay").style.display = "none";
        document.getElementById("spellsDisplay").style.display = "none";
        document.getElementById("mapDisplay").style.display = "none";
        document.getElementById("voreDisplay").style.display = "none";
        document.getElementById("optionsDisplay").style.display = "none";
      });
      var input = document.getElementById("spellsTab");
      input.addEventListener("click", function(event) {
        event.preventDefault();
        console.log('spells tab was clicked!');
        document.getElementById("spellsDisplay").style.display = "block";
        document.getElementById("lookDisplay").style.display = "none";
        document.getElementById("itemsDisplay").style.display = "none";
        document.getElementById("mapDisplay").style.display = "none";
        document.getElementById("voreDisplay").style.display = "none";
        document.getElementById("optionsDisplay").style.display = "none";
      });
      const fill = document.querySelector('.fill');
      const empties = document.querySelectorAll('.empty');

      // Fill Listeners
      //fill.addEventListener('dragstart', dragStart);
      //fill.addEventListener('dragend', dragEnd);

      // Loop Through Empties and call drag events
      for(const empty of empties) {
        empty.addEventListener('dragover', dragOver);
        empty.addEventListener('dragenter', dragEnter);
        empty.addEventListener('dragleave', dragLeave);
        empty.addEventListener('drop', dragDrop);
      }

      // Drag Functions
      function dragStart() {
        console.log('dragging started');
        this.className += ' hold';
        setTimeout(() => (this.className = 'invisible'), 0);
        }
      function dragEnd() {
        console.log('dragging ended');
        this.className = 'fill';
      }
      function dragOver(event) {
        event.preventDefault();
      }
      function dragEnter(event) {
        event.preventDefault();
        this.className += ' hovered';
      }
      function dragLeave() {
        this.className = 'empty';
      }
      function dragDrop() {
        this.className = 'empty';
        this.append(fill);
      }

      var input = document.getElementById("mapTab");
      input.addEventListener("click", function(event) {
        event.preventDefault();
        console.log('map tab was clicked!');
        document.getElementById("mapDisplay").style.display = "block";
        document.getElementById("lookDisplay").style.display = "none";
        document.getElementById("itemsDisplay").style.display = "none";
        document.getElementById("spellsDisplay").style.display = "none";
        document.getElementById("voreDisplay").style.display = "none";
        document.getElementById("optionsDisplay").style.display = "none";
      });
      var input = document.getElementById("voreTab");
      input.addEventListener("click", function(event) {
        event.preventDefault();
        console.log('Vore tab was clicked!');
        document.getElementById("voreDisplay").style.display = "block";
        document.getElementById("lookDisplay").style.display = "none";
        document.getElementById("itemsDisplay").style.display = "none";
        document.getElementById("spellsDisplay").style.display = "none";
        document.getElementById("mapDisplay").style.display = "none";
        document.getElementById("optionsDisplay").style.display = "none";
      });







      var coll = document.getElementsByClassName("collapsible");
      var i;
      for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
          this.classList.toggle("active");
          var content = this.nextElementSibling;
          if (content.style.maxHeight){
            content.style.maxHeight = null;
          } else {
            content.style.maxHeight = content.scrollHeight + "px";
          }
        });
      }
      var voreContextMenu = document.getElementsByClassName("specialActions");
      var specialI;
      var specialDivList = [];
      for (specialI = 0; specialI < voreContextMenu.length; specialI++) {

        specialDivList.push(voreContextMenu[specialI]);
        voreContextMenu[specialI].addEventListener("click", function() {
          console.log("Special Menu Input in Context Menu was Clicked");
          if (localPlayerInfo.specialList == specialDivList) {
            //console.log('voreContextMenu = ', voreContextMenu);
            //console.log('specialI = ', specialI);
            console.log('specialDivList = ', specialDivList);
            console.log('localPlayerInfo.specialList = ', localPlayerInfo.specialList);
          }
        });
      }


      this.socket.on('newvoreContextMenu', function (voreEntry) {

        localPlayerInfo.specialList.push(voreEntry);
        console.log('special create button clicked by', localPlayerInfo.playerId, '\n', 'confirming inputs of: ', '\n', 'Special Name = ', voreEntry.Name, '\n', 'Special Verb = ', voreEntry.Verb, '\n', 'Special Description = ', voreEntry.Descrip);
        console.log('testing the push array thingy: ', localPlayerInfo.specialList[localPlayerInfo.specialList.length - 1]);
        //creating a new custom vore optoin
        document.getElementById("specialEdit").style.display = "none";
      });

      this.socket.on('playerConsumed', function (pred, prey) {
        console.log('pred = ', pred, '\n', 'prey = ', prey);
        if (prey.playerId === self.socket.id) {
          console.log('you are prey');
          //self.avatar.head.setTexture('emptyplayer');
          playerContainer.visible = false;
          for (let i = 0; i < otherPlayers.length; i++) {
            if (pred.playerId === otherPlayers[i].playerId) {
              console.log('you were swallowed whole by', pred.Username);
              cam1.startFollow(otherPlayers[i]);
            }
          }
        } else {
        console.log('you are not prey');
        for (let i = 0; i < otherPlayers.length; i++) {
          if (prey.playerId === otherPlayers[i].playerId) {
            console.log(pred.Username, ' swallowed ', prey.Username, ' whole!');
            console.log('otherPlayers[i] = ', otherPlayers[i]);
            otherPlayers[i].visible = false;
            }
          }
        }
      })

      var input = document.getElementById("optionsTab");
      input.addEventListener("click", function(event) {
        event.preventDefault();
        console.log('options tab was clicked!');
        document.getElementById("optionsDisplay").style.display = "block";
        document.getElementById("lookDisplay").style.display = "none";
        document.getElementById("itemsDisplay").style.display = "none";
        document.getElementById("spellsDisplay").style.display = "none";
        document.getElementById("mapDisplay").style.display = "none";
        document.getElementById("voreDisplay").style.display = "none";
      });














      const game = this;
      console.log('Create Started');

      //----- Loads the json  file and also the map tileset -----//
      // const map = this.make.tilemap({key: 'level_2'});
      const map = this.make.tilemap({key: 'tastytails_v01'});
      // const tileset = map.addTilesetImage('spritesheet');
      const tileset = map.addTilesetImage('tileset');

      //----- Creates "layers" of different map tiles to be placed on top of one another -----//
      const spawn = map.createStaticLayer('spawn', tileset, 0, 0);
      const shadows = map.createStaticLayer('shadows', tileset, 0, 0);
      blocked_tiles = map.createStaticLayer('blocked_tiles', tileset, 0, 0);
      const buildings2 = map.createStaticLayer('buildings_2', tileset, 0, 0);
      const trees = map.createStaticLayer('trees', tileset, 0, 0);
      obj_spawning = map.createStaticLayer('obj_spawning', tileset, 0, 0);
      const water = map.createStaticLayer('water', tileset, 0, 0);
      const paths = map.createStaticLayer('paths', tileset, 0, 0);
      const paths_2 = map.createStaticLayer('paths_2', tileset, 0, 0);
      const paths_3 = map.createStaticLayer('paths_3', tileset, 0, 0);
      const sand = map.createStaticLayer('sand', tileset, 0, 0);
      const grass = map.createStaticLayer('grass', tileset, 0, 0);

      //----- defines the height that each map layer is displayed at and what tile IDs player can collide with -----//
      spawn.depth = 0;
      //spawn.setCollision(-1);
      shadows.depth = -1;
      //shadows.setCollision(-1);
      blocked_tiles.depth = -1;
      //blocked_tiles.setCollision(-1);
      //map.setCollisionByProperty({collide: true });
      // blocked_tiles.setCollisionByExclusion(-1, true);
      blocked_tiles.setCollisionByProperty({ collides: true });
      //blocked_tiles.setDepthByExclusion(-1, true);
      //blocked_tiles.setCollisionFromCollisionGroup();
      buildings2.depth = 10000;
      console.log('buildings2 = ', buildings2);
      trees.depth = 2;
      //trees.setCollision(-1);
      obj_spawning.depth = -1;
      obj_spawning.setCollisionByExclusion(-1, true);
      console.log('obj_spawning = ', obj_spawning);
      //universal layer modifier for Y axis = -185
      for (let i = 0; i < obj_spawning.layer.data.length; i++) {
        let objTile = obj_spawning.layer.data[i];
        for (let info = 0; info < objTile.length; info++) {
          if (objTile[info].index > -1) {
            if (objTile[info].properties.label == 'tree_01') {
              //console.log('success tree01');
              var tempObj = this.add.image((objTile[info].x*32)+19, (objTile[info].y*32)-223.5, 'tree_01');
              tempObj.depth = (objTile[info].y*32)-60;
            }
            if (objTile[info].properties.label == 'tree_02') {
              //console.log('success tree02');
              var tempObj = this.add.image((objTile[info].x*32)+19, (objTile[info].y*32)-223.5, 'tree_02');
              tempObj.depth = (objTile[info].y*32)-60;
            }
            if (objTile[info].properties.label == 'lamp_01') {
              //console.log('success lamp01');
              var tempObj = this.add.image((objTile[info].x*32)+32, (objTile[info].y*32)-125, 'lamp_01');
              tempObj.depth = (objTile[info].y*32)-60;
            }
            if (objTile[info].properties.label == 'lamp_02') {
              //console.log('success lamp02');
              var tempObj = this.add.image((objTile[info].x*32)+32, (objTile[info].y*32)-125, 'lamp_02');
              tempObj.depth = (objTile[info].y*32)-60;
            }
            //console.log('objTile X = ', objTile[info].x, '\n', 'objTile Y = ', objTile[info].y, '\n', 'objTileInfo = ', objTile[info].properties.label);
          }
        }
      }

      var cloth_shelf_01 = this.physics.add.image(10548, 4085, 'cloth_shelf_01');
      cloth_shelf_01.depth = (cloth_shelf_01.y);
      cloth_shelf_01.setSize(169, 100);
      cloth_shelf_01.setOffset(0, 110);
      cloth_shelf_01.setImmovable(true);
      this.physics.add.collider(this.players, cloth_shelf_01);

      var cloth_shelf_02 = this.physics.add.image(10716, 4085, 'cloth_shelf_02');
      cloth_shelf_02.depth = (cloth_shelf_02.y);
      cloth_shelf_02.setSize(169, 100);
      cloth_shelf_02.setOffset(0, 110);
      cloth_shelf_02.setImmovable(true);
      this.physics.add.collider(this.players, cloth_shelf_02);

      var mirror_01 = this.physics.add.image(10848, 4082, 'mirror_01');
      mirror_01.depth = (mirror_01.y+15);
      mirror_01.setSize(40, 51);
      mirror_01.setOffset(0, 100);
      mirror_01.setImmovable(true);
      this.physics.add.collider(this.players, mirror_01);

      var mannequin_00 = this.physics.add.image(11091, 4051, 'mannequin_00');
      mannequin_00.depth = (mannequin_00.y+55);
      mannequin_00.setSize(31, 25);
      mannequin_00.setOffset(15.5, 138);
      mannequin_00.setImmovable(true);
      this.physics.add.collider(this.players, mannequin_00);

      var mannequin_01 = this.physics.add.image(10934, 4051, 'mannequin_01');
      mannequin_01.depth = (mannequin_01.y+55);
      mannequin_01.setSize(31, 25);
      mannequin_01.setOffset(15.5, 138);
      mannequin_01.setImmovable(true);
      this.physics.add.collider(this.players, mannequin_01);

      var mannequin_02 = this.physics.add.image(11017, 4051, 'mannequin_02');
      mannequin_02.depth = (mannequin_02.y+55);
      mannequin_02.setSize(31, 25);
      mannequin_02.setOffset(15.5, 138);
      mannequin_02.setImmovable(true);
      this.physics.add.collider(this.players, mannequin_02);

      var mannequin_03 = this.physics.add.image(10470, 4421, 'mannequin_00');
      mannequin_03.depth = (mannequin_03.y+55);
      mannequin_03.setSize(31, 25);
      mannequin_03.setOffset(15.5, 138);
      mannequin_03.setImmovable(true);
      this.physics.add.collider(this.players, mannequin_03);

      var sewing_machine_01 = this.physics.add.image(11040, 4200, 'sewing_machine_01');
      sewing_machine_01.depth = (sewing_machine_01.y+55);
      sewing_machine_01.setSize(84, 40);
      sewing_machine_01.setOffset(0, 97);
      sewing_machine_01.setImmovable(true);
      this.physics.add.collider(this.players, sewing_machine_01);

      var cloth_roll_basket01 = this.physics.add.image(10472, 4272, 'cloth_roll_basket01');
      cloth_roll_basket01.depth = (cloth_roll_basket01.y+55);
      cloth_roll_basket01.setSize(52, 30);
      cloth_roll_basket01.setOffset(0, 144);
      cloth_roll_basket01.setImmovable(true);
      this.physics.add.collider(this.players, cloth_roll_basket01);

      var yarn_basket_01 = this.physics.add.image(10486, 4368, 'yarn_basket_01');
      yarn_basket_01.depth = (yarn_basket_01.y);
      yarn_basket_01.setSize(61, 22);
      yarn_basket_01.setOffset(0, 22);
      yarn_basket_01.setImmovable(true);
      this.physics.add.collider(this.players, yarn_basket_01);




      //----- Drawing the Pub -----//
      //----- Bottom Right Table -----//
      var pub_table_01 = this.physics.add.image(10485, 3251, 'pub_table');
      pub_table_01.depth = (pub_table_01.y);
      pub_table_01.setSize(218, 33);
      pub_table_01.setOffset(0, 68);
      pub_table_01.setImmovable(true);
      this.physics.add.collider(this.players, pub_table_01);

      var pub_stool_01 = this.physics.add.image(10550, 3300, 'pub_stool');
      pub_stool_01.depth = (pub_stool_01.y);
      pub_stool_01.setSize(35, 24);
      pub_stool_01.setOffset(0, 24);
      pub_stool_01.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_01);

      var pub_stool_02 = this.physics.add.image(10485, 3300, 'pub_stool');
      pub_stool_02.depth = (pub_stool_02.y);
      pub_stool_02.setSize(35, 24);
      pub_stool_02.setOffset(0, 24);
      pub_stool_02.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_02);

      var pub_stool_03 = this.physics.add.image(10420, 3300, 'pub_stool');
      pub_stool_03.depth = (pub_stool_03.y);
      pub_stool_03.setSize(35, 24);
      pub_stool_03.setOffset(0, 24);
      pub_stool_03.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_03);

      var pub_stool_04 = this.physics.add.image(10550, 3200, 'pub_stool');
      pub_stool_04.depth = (pub_stool_04.y);
      pub_stool_04.setSize(35, 24);
      pub_stool_04.setOffset(0, 24);
      pub_stool_04.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_04);

      var pub_stool_05 = this.physics.add.image(10485, 3200, 'pub_stool');
      pub_stool_05.depth = (pub_stool_05.y);
      pub_stool_05.setSize(35, 24);
      pub_stool_05.setOffset(0, 24);
      pub_stool_05.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_05);

      var pub_stool_06 = this.physics.add.image(10420, 3200, 'pub_stool');
      pub_stool_06.depth = (pub_stool_06.y);
      pub_stool_06.setSize(35, 24);
      pub_stool_06.setOffset(0, 24);
      pub_stool_06.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_06);

      //----- Top Right Table -----//

      var pub_table_02 = this.physics.add.image(10485, 3050, 'pub_table');
      pub_table_02.depth = (pub_table_02.y);
      pub_table_02.setSize(218, 33);
      pub_table_02.setOffset(0, 68);
      pub_table_02.setImmovable(true);
      this.physics.add.collider(this.players, pub_table_02);

      var pub_stool_07 = this.physics.add.image(10550, 3100, 'pub_stool');
      pub_stool_07.depth = (pub_stool_07.y);
      pub_stool_07.setSize(35, 24);
      pub_stool_07.setOffset(0, 24);
      pub_stool_07.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_07);

      var pub_stool_08 = this.physics.add.image(10485, 3100, 'pub_stool');
      pub_stool_08.depth = (pub_stool_08.y);
      pub_stool_08.setSize(35, 24);
      pub_stool_08.setOffset(0, 24);
      pub_stool_08.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_08);

      var pub_stool_09 = this.physics.add.image(10420, 3100, 'pub_stool');
      pub_stool_09.depth = (pub_stool_09.y);
      pub_stool_09.setSize(35, 24);
      pub_stool_09.setOffset(0, 24);
      pub_stool_09.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_09);

      var pub_stool_10 = this.physics.add.image(10550, 3000, 'pub_stool');
      pub_stool_10.depth = (pub_stool_10.y);
      pub_stool_10.setSize(35, 24);
      pub_stool_10.setOffset(0, 24);
      pub_stool_10.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_10);

      var pub_stool_11 = this.physics.add.image(10485, 3000, 'pub_stool');
      pub_stool_11.depth = (pub_stool_11.y);
      pub_stool_11.setSize(35, 24);
      pub_stool_11.setOffset(0, 24);
      pub_stool_11.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_11);

      var pub_stool_12 = this.physics.add.image(10420, 3000, 'pub_stool');
      pub_stool_12.depth = (pub_stool_12.y);
      pub_stool_12.setSize(35, 24);
      pub_stool_12.setOffset(0, 24);
      pub_stool_12.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_12);

      //----- Bottom Left Tble -----//

      var pub_table_03 = this.physics.add.image(10135, 3251, 'pub_table');
      pub_table_03.depth = (pub_table_03.y);
      pub_table_03.setSize(218, 33);
      pub_table_03.setOffset(0, 68);
      pub_table_03.setImmovable(true);
      this.physics.add.collider(this.players, pub_table_03);

      var pub_stool_13 = this.physics.add.image(10200, 3300, 'pub_stool');
      pub_stool_13.depth = (pub_stool_13.y);
      pub_stool_13.setSize(35, 24);
      pub_stool_13.setOffset(0, 24);
      pub_stool_13.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_13);

      var pub_stool_14 = this.physics.add.image(10135, 3300, 'pub_stool');
      pub_stool_14.depth = (pub_stool_14.y);
      pub_stool_14.setSize(35, 24);
      pub_stool_14.setOffset(0, 24);
      pub_stool_14.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_14);

      var pub_stool_15 = this.physics.add.image(10070, 3300, 'pub_stool');
      pub_stool_15.depth = (pub_stool_15.y);
      pub_stool_15.setSize(35, 24);
      pub_stool_15.setOffset(0, 24);
      pub_stool_15.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_15);

      var pub_stool_16 = this.physics.add.image(10200, 3200, 'pub_stool');
      pub_stool_16.depth = (pub_stool_16.y);
      pub_stool_16.setSize(35, 24);
      pub_stool_16.setOffset(0, 24);
      pub_stool_16.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_16);

      var pub_stool_17 = this.physics.add.image(10135, 3200, 'pub_stool');
      pub_stool_17.depth = (pub_stool_17.y);
      pub_stool_17.setSize(35, 24);
      pub_stool_17.setOffset(0, 24);
      pub_stool_17.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_17);

      var pub_stool_18 = this.physics.add.image(10070, 3200, 'pub_stool');
      pub_stool_18.depth = (pub_stool_18.y);
      pub_stool_18.setSize(35, 24);
      pub_stool_18.setOffset(0, 24);
      pub_stool_18.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_18);

      //----- Top Left Table -----//

      var pub_table_04 = this.physics.add.image(10135, 3050, 'pub_table');
      pub_table_04.depth = (pub_table_04.y);
      pub_table_04.setSize(218, 33);
      pub_table_04.setOffset(0, 68);
      pub_table_04.setImmovable(true);
      this.physics.add.collider(this.players, pub_table_04);

      var pub_stool_19 = this.physics.add.image(10200, 3100, 'pub_stool');
      pub_stool_19.depth = (pub_stool_19.y);
      pub_stool_19.setSize(35, 24);
      pub_stool_19.setOffset(0, 24);
      pub_stool_19.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_19);

      var pub_stool_20 = this.physics.add.image(10135, 3100, 'pub_stool');
      pub_stool_20.depth = (pub_stool_20.y);
      pub_stool_20.setSize(35, 24);
      pub_stool_20.setOffset(0, 24);
      pub_stool_20.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_20);

      var pub_stool_21 = this.physics.add.image(10070, 3100, 'pub_stool');
      pub_stool_21.depth = (pub_stool_21.y);
      pub_stool_21.setSize(35, 24);
      pub_stool_21.setOffset(0, 24);
      pub_stool_21.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_21);

      var pub_stool_22 = this.physics.add.image(10200, 3000, 'pub_stool');
      pub_stool_22.depth = (pub_stool_22.y);
      pub_stool_22.setSize(35, 24);
      pub_stool_22.setOffset(0, 24);
      pub_stool_22.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_22);

      var pub_stool_23 = this.physics.add.image(10135, 3000, 'pub_stool');
      pub_stool_23.depth = (pub_stool_23.y);
      pub_stool_23.setSize(35, 24);
      pub_stool_23.setOffset(0, 24);
      pub_stool_23.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_23);

      var pub_stool_24 = this.physics.add.image(10070, 3000, 'pub_stool');
      pub_stool_24.depth = (pub_stool_24.y);
      pub_stool_24.setSize(35, 24);
      pub_stool_24.setOffset(0, 24);
      pub_stool_24.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_24);

      //----- Card Tables and Stools -----//
      //----- Top Card Table -----//
      var card_table_01 = this.physics.add.image(9830, 2750, 'card_table');
      card_table_01.depth = (card_table_01.y+35);
      card_table_01.setSize(153, 130);
      card_table_01.setOffset(0, 25);
      card_table_01.setImmovable(true);
      this.physics.add.collider(this.players, card_table_01);

      var pub_stool_25 = this.physics.add.image(9925, 3050, 'pub_stool');
      pub_stool_25.depth = (pub_stool_25.y);
      pub_stool_25.setSize(35, 24);
      pub_stool_25.setOffset(0, 24);
      pub_stool_25.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_25);

      var pub_stool_26 = this.physics.add.image(9885, 3130, 'pub_stool');
      pub_stool_26.depth = (pub_stool_26.y);
      pub_stool_26.setSize(35, 24);
      pub_stool_26.setOffset(0, 24);
      pub_stool_26.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_26);

      var pub_stool_27 = this.physics.add.image(9785, 3130, 'pub_stool');
      pub_stool_27.depth = (pub_stool_27.y);
      pub_stool_27.setSize(35, 24);
      pub_stool_27.setOffset(0, 24);
      pub_stool_27.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_27);

      var pub_stool_28 = this.physics.add.image(9725, 3050, 'pub_stool');
      pub_stool_28.depth = (pub_stool_28.y);
      pub_stool_28.setSize(35, 24);
      pub_stool_28.setOffset(0, 24);
      pub_stool_28.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_28);

      var pub_stool_29 = this.physics.add.image(9885, 2970, 'pub_stool');
      pub_stool_29.depth = (pub_stool_29.y);
      pub_stool_29.setSize(35, 24);
      pub_stool_29.setOffset(0, 24);
      pub_stool_29.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_29);

      var pub_stool_30 = this.physics.add.image(9785, 2970, 'pub_stool');
      pub_stool_30.depth = (pub_stool_30.y);
      pub_stool_30.setSize(35, 24);
      pub_stool_30.setOffset(0, 24);
      pub_stool_30.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_30);

      //----- Bottom Card Table -----//

      var card_table_02 = this.physics.add.image(9830, 3050, 'card_table');
      card_table_02.depth = (card_table_02.y+35);
      card_table_02.setSize(153, 130);
      card_table_02.setOffset(0, 25);
      card_table_02.setImmovable(true);
      this.physics.add.collider(this.players, card_table_02);

      var pub_stool_31 = this.physics.add.image(9925, 2750, 'pub_stool');
      pub_stool_31.depth = (pub_stool_31.y);
      pub_stool_31.setSize(35, 24);
      pub_stool_31.setOffset(0, 24);
      pub_stool_31.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_31);

      var pub_stool_32 = this.physics.add.image(9885, 2830, 'pub_stool');
      pub_stool_32.depth = (pub_stool_32.y);
      pub_stool_32.setSize(35, 24);
      pub_stool_32.setOffset(0, 24);
      pub_stool_32.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_32);

      var pub_stool_33 = this.physics.add.image(9785, 2830, 'pub_stool');
      pub_stool_33.depth = (pub_stool_33.y);
      pub_stool_33.setSize(35, 24);
      pub_stool_33.setOffset(0, 24);
      pub_stool_33.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_33);

      var pub_stool_34 = this.physics.add.image(9725, 2750, 'pub_stool');
      pub_stool_34.depth = (pub_stool_34.y);
      pub_stool_34.setSize(35, 24);
      pub_stool_34.setOffset(0, 24);
      pub_stool_34.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_34);

      var pub_stool_35 = this.physics.add.image(9885, 2670, 'pub_stool');
      pub_stool_35.depth = (pub_stool_35.y);
      pub_stool_35.setSize(35, 24);
      pub_stool_35.setOffset(0, 24);
      pub_stool_35.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_35);

      var pub_stool_36 = this.physics.add.image(9785, 2670, 'pub_stool');
      pub_stool_36.depth = (pub_stool_36.y);
      pub_stool_36.setSize(35, 24);
      pub_stool_36.setOffset(0, 24);
      pub_stool_36.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_36);



      //----- Bar Front -----//

      var bar_front = this.physics.add.image(10432, 2848, 'bar_front');
      bar_front.depth = (bar_front.y+35);
      bar_front.setSize(768, 34);
      bar_front.setOffset(0, 94);
      bar_front.setImmovable(true);
      this.physics.add.collider(this.players, bar_front);

      var pub_stool_tall_01 = this.physics.add.image(10100, 2900, 'pub_stool_tall');
      pub_stool_tall_01.depth = (pub_stool_tall_01.y+25);
      pub_stool_tall_01.setSize(35, 33);
      pub_stool_tall_01.setOffset(0, 33);
      pub_stool_tall_01.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_tall_01);

      var pub_stool_tall_02 = this.physics.add.image(10200, 2900, 'pub_stool_tall');
      pub_stool_tall_02.depth = (pub_stool_tall_02.y+25);
      pub_stool_tall_02.setSize(35, 33);
      pub_stool_tall_02.setOffset(0, 33);
      pub_stool_tall_02.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_tall_02);

      var pub_stool_tall_03 = this.physics.add.image(10300, 2900, 'pub_stool_tall');
      pub_stool_tall_03.depth = (pub_stool_tall_03.y+25);
      pub_stool_tall_03.setSize(35, 33);
      pub_stool_tall_03.setOffset(0, 33);
      pub_stool_tall_03.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_tall_03);

      var pub_stool_tall_04 = this.physics.add.image(10400, 2900, 'pub_stool_tall');
      pub_stool_tall_04.depth = (pub_stool_tall_04.y+25);
      pub_stool_tall_04.setSize(35, 33);
      pub_stool_tall_04.setOffset(0, 33);
      pub_stool_tall_04.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_tall_04);

      var pub_stool_tall_05 = this.physics.add.image(10500, 2900, 'pub_stool_tall');
      pub_stool_tall_05.depth = (pub_stool_tall_05.y+25);
      pub_stool_tall_05.setSize(35, 33);
      pub_stool_tall_05.setOffset(0, 33);
      pub_stool_tall_05.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_tall_05);

      var pub_stool_tall_06 = this.physics.add.image(10600, 2900, 'pub_stool_tall');
      pub_stool_tall_06.depth = (pub_stool_tall_06.y+25);
      pub_stool_tall_06.setSize(35, 33);
      pub_stool_tall_06.setOffset(0, 33);
      pub_stool_tall_06.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_tall_06);

      var pub_stool_tall_07 = this.physics.add.image(10700, 2900, 'pub_stool_tall');
      pub_stool_tall_07.depth = (pub_stool_tall_07.y+25);
      pub_stool_tall_07.setSize(35, 33);
      pub_stool_tall_07.setOffset(0, 33);
      pub_stool_tall_07.setImmovable(true);
      this.physics.add.collider(this.players, pub_stool_tall_07);

      //----- Drawing the Spa -----//
      //----- Massage Bed -----//
      var spa_massage_bed_01 = this.physics.add.image(9290, 275, 'spa_massage_bed');
      spa_massage_bed_01.depth = (spa_massage_bed_01.y+25);
      spa_massage_bed_01.setSize(211, 60);
      spa_massage_bed_01.setOffset(0, 41);
      spa_massage_bed_01.setImmovable(true);
      this.physics.add.collider(this.players, spa_massage_bed_01);

      var spa_massage_bed_02 = this.physics.add.image(9802, 275, 'spa_massage_bed');
      spa_massage_bed_02.depth = (spa_massage_bed_02.y+25);
      spa_massage_bed_02.setSize(211, 60);
      spa_massage_bed_02.setOffset(0, 41);
      spa_massage_bed_02.setImmovable(true);
      this.physics.add.collider(this.players, spa_massage_bed_02);

      var spa_massage_bed_03 = this.physics.add.image(10314, 275, 'spa_massage_bed');
      spa_massage_bed_03.depth = (spa_massage_bed_03.y+25);
      spa_massage_bed_03.setSize(211, 60);
      spa_massage_bed_03.setOffset(0, 41);
      spa_massage_bed_03.setImmovable(true);
      this.physics.add.collider(this.players, spa_massage_bed_03);

      var spa_massage_bed_04 = this.physics.add.image(10826, 275, 'spa_massage_bed');
      spa_massage_bed_04.depth = (spa_massage_bed_03.y+25);
      spa_massage_bed_04.setSize(211, 60);
      spa_massage_bed_04.setOffset(0, 41);
      spa_massage_bed_04.setImmovable(true);
      this.physics.add.collider(this.players, spa_massage_bed_04);


      var door_clothing_store = this.physics.add.sprite(6430, 5565, 'door_clothing_store', 0);
      this.physics.add.overlap(self.players, door_clothing_store, useDoor, null, this);
      door_clothing_store.setSize(80, 130);
      self.anims.create({
        key: 'door_clothing_store_open',
        frames: self.anims.generateFrameNumbers('door_clothing_store', { start: 1, end: 0 }),
        frameRate: 6
      })

      var clothing_store_exit_rug = this.physics.add.sprite(10577, 4517, 'clothing_store_exit_rug', 0);
      this.physics.add.overlap(self.players, clothing_store_exit_rug, useDoor, null, this);
      clothing_store_exit_rug.setOffset(0, 55);

      var door_pub = this.physics.add.sprite(4315, 4095, 'door_pub', 0);
      this.physics.add.overlap(self.players, door_pub, useDoor, null, this);
      door_pub.setSize(80, 130);
      self.anims.create({
        key: 'door_pub_open',
        frames: self.anims.generateFrameNumbers('door_pub', { start: 1, end: 0 }),
        frameRate: 6
      })

      var pub_exit_rug = this.physics.add.sprite(10833, 3333, 'pub_exit_rug', 0);
      this.physics.add.overlap(self.players, pub_exit_rug, useDoor, null, this);
      pub_exit_rug.setOffset(0, 55);

      var door_spa = this.physics.add.sprite(3557, 4317, 'door_spa', 0);
      this.physics.add.overlap(self.players, door_spa, useDoor, null, this);
      door_spa.setSize(80, 130);
      self.anims.create({
        key: 'door_spa_open',
        frames: self.anims.generateFrameNumbers('door_spa', { start: 1, end: 0 }),
        frameRate: 6
      })

      function useDoor(players, door) {
        console.log('door.key = ', door.frame.texture.key);
        if(door == door_clothing_store) {
          console.log('Clothing Store door was used');
          door_clothing_store.play('door_clothing_store_open');
          // localPlayerInfo.door = door;
          //self.socket.emit('doorOpened', localPlayerInfo, door);
          //console.log('door_clothing_store', door_clothing_store);
        }
        if(door == door_pub) {
          console.log('Pub door was used');
          door_pub.play('door_pub_open');
          // localPlayerInfo.door = door;
          //self.socket.emit('doorOpened', localPlayerInfo, door);
          //console.log('door_clothing_store', door_clothing_store);
        }
        if(door == door_spa) {
          console.log('Spa door was used');
          door_spa.play('door_spa_open');
          // localPlayerInfo.door = door;
          //self.socket.emit('doorOpened', localPlayerInfo, door);
          //console.log('door_clothing_store', door_clothing_store);
        }
      }
      //cloth_shelf_02.setCollision(true);
      //obj_spawning.setCollision(-1);
      water.depth = -1;
      paths.depth = -2;
      paths_2.depth = -3;
      paths_3.depth = -4;
      //paths.setCollision(-1);
      sand.depth = -5;
      grass.depth = -6;


      console.log('this.debugMode = ', this.game.config.physics.arcade.debug);
      if (this.game.config.physics.arcade.debug == true) {
        debugGraphics = this.add.graphics();
        this.input.keyboard.on('keydown-C', function (event) {
          showDebug = !showDebug;
          drawDebug();
        });
        // frameRate = this.add.text(700, 16, 'FrameRate: ' + game.loop.actualFps, {
        //   fontSize: '18px',
        //   fill: '#ffffff'
        // });
        // frameRate.setScrollFactor(0);
      } else {
        console.log('debug mode turned off');
      }































      //----- makes all the objects you can't walk through -----//
      let blocked = this.physics.add.staticGroup();


      //----- This function is called whenever the local player connects -----//
      //----- It will create the sprites for all players currently online (including themselves) and spawn them into the game world -----//
      function displayPlayers(self, playerInfo) {
        console.log('localPlayerInfo at displayPlayers Function = ', localPlayerInfo);
        console.log(
          playerInfo.playerId, 'Has entered the Game with the following values: ', '\n',
          'Set player First Name to: ', playerInfo.firstName, '\n',
          'Set player Last Name to: ', playerInfo.lastName, '\n',
          'Set player Nick Name to: ', playerInfo.nickName, '\n',
          'Set head Sprite to: ', playerInfo.head.sprite, '\n',
          'Set head Color to: ', playerInfo.head.color, '\n',
          'Set head Secondary Sprite to: ', playerInfo.head.secondarySprite, '\n',
          'Set head Secondary Color to: ', playerInfo.head.secondaryColor, '\n',
          'Set head Accent Sprite to: ', playerInfo.head.accentSprite, '\n',
          'Set head Accent Color to: ', playerInfo.head.accentColor, '\n',
          'Set body Sprite to: ', playerInfo.body.sprite, '\n',
          'Set body Color to: ', playerInfo.body.color, '\n',
          'Set body Secondary Sprite to: ', playerInfo.body.secondarySprite, '\n',
          'Set body Secondary Color to: ', playerInfo.body.secondaryColor, '\n',
          'Set body Accent Sprite to: ', playerInfo.body.accentSprite, '\n',
          'Set body Accent Color to: ', playerInfo.body.accentColor, '\n',
          'Set tail Sprite to: ', playerInfo.tail.sprite, '\n',
          'Set tail Color to: ', playerInfo.tail.color, '\n',
          'Set tail Secondary Sprite to: ', playerInfo.tail.secondarySprite, '\n',
          'Set tail Secondary Color to: ', playerInfo.tail.secondaryColor, '\n',
          'Set tail Accent Sprite to: ', playerInfo.tail.accentSprite, '\n',
          'Set tail Accent Color to: ', playerInfo.tail.accentColor, '\n',
          'Set hair Sprite to: ', playerInfo.hair.sprite, '\n',
          'Set hair Color to: ', playerInfo.hair.color, '\n',
          'Set ear Sprite to: ', playerInfo.ear.sprite, '\n',
          'Set ear Color to: ', playerInfo.ear.color, '\n',
          'Set outer eyes sprite to:', playerInfo.eyes.outer, '\n',
          'Set irises to:', playerInfo.eyes.iris, '\n',
          'Set eye color to:', playerInfo.eyes.color, '\n',
          'Set genitles to:', playerInfo.genitles.sprite
        );


        playerContainer = self.add.container(playerInfo.x, playerInfo.y).setInteractive();
        console.log('player coordinates are: X= ', playerInfo.x, 'Y= ', playerInfo.y);
        self.physics.world.enable(playerContainer);
        //----- the 30, -87 defines the placement of the sprite in the container -----//
        const playerContainertail = self.add.sprite(30, -87, playerInfo.tail.sprite);
        playerContainertail.setTint(playerInfo.tail.color);
        console.log('playerContainertail = ', playerContainertail)
        const playerContainersecondaryTail = self.add.sprite(30, -87, playerInfo.tail.secondarySprite);
        playerContainersecondaryTail.setTint(playerInfo.tail.secondaryColor);
        const playerContaineraccentTail = self.add.sprite(30, -87, playerInfo.tail.accentSprite);
        playerContaineraccentTail.setTint(playerInfo.tail.accentColor);
        const playerContainerbody = self.add.sprite(30, -87, playerInfo.body.sprite);
        playerContainerbody.setTint(playerInfo.body.color);
        const playerContainersecondaryBody = self.add.sprite(30, -87, playerInfo.body.secondarySprite);
        playerContainersecondaryBody.setTint(playerInfo.body.secondaryColor);
        const playerContaineraccentBody = self.add.sprite(30, -87, playerInfo.body.accentSprite);
        playerContaineraccentBody.setTint(playerInfo.body.accentColor);
        const playerContainerhead = self.add.sprite(30, -87, playerInfo.head.sprite);
        playerContainerhead.setTint(playerInfo.head.color);
        const playerContainersecondaryHead = self.add.sprite(30, -87, playerInfo.head.secondarySprite);
        playerContainersecondaryHead.setTint(playerInfo.head.secondaryColor);
        const playerContaineraccentHead = self.add.sprite(30, -87, playerInfo.head.accentSprite);
        playerContaineraccentHead.setTint(playerInfo.head.accentColor);
        const playerContainerhair = self.add.sprite(30, -87, playerInfo.hair.sprite);
        playerContainerhair.setTint(playerInfo.hair.color);

        const playerContainerouterEar = self.add.sprite(30, -87, playerInfo.ear.outerSprite);
        playerContainerouterEar.setTint(playerInfo.ear.outerColor);
        const playerContainerinnerEar = self.add.sprite(30, -87, playerInfo.ear.innerSprite);
        playerContainerinnerEar.setTint(playerInfo.ear.innerColor);

        const playerContainereyes = self.add.sprite(30, -87, playerInfo.eyes.outer);
        const playerContaineriris = self.add.sprite(30, -87, playerInfo.eyes.iris);
        playerContaineriris.setTint(playerInfo.eyes.color);

        const playerContainergenitles = self.add.sprite(30, -87, playerInfo.genitles.sprite);
        //self.genitles.setTint(playerInfo.genitles.color);


        playerContainer.add([
          playerContainertail,
          playerContainersecondaryTail,
          playerContaineraccentTail,
          playerContainerbody,
          playerContainersecondaryBody,
          playerContaineraccentBody,
          playerContainerhead,
          playerContainerouterEar,
          playerContainerinnerEar,
          playerContainersecondaryHead,
          playerContaineraccentHead,
          playerContainereyes,
          playerContaineriris,
          playerContainerhair,
          playerContainergenitles
        ]);
        // playerContainer.sendToBack(playerContainertail);
        // playerContainer.bringToTop(playerContainerhead);
        // playerContainer.bringToTop(playerContainerear);
        // playerContainer.bringToTop(playerContainersecondaryHead);
        // playerContainer.bringToTop(playerContaineraccentHead);

        playerContainer.playerId = playerInfo.playerId;
        self.players.add(playerContainer);


        playerContainer.body.setSize(60, 15);
        // playerContainer.body.setOffset(-30, -90);

        //console.log('playerContainer = ', playerContainer);
        //console.log('player coordinates are: X= ', playerInfo.x, 'Y= ', playerInfo.y);

        //self.container.visible = false;
        //localPlayerInfo.sprite = self.stack

        let cam1 = self.cameras.main.setSize(920, 920).startFollow(playerContainer).setName('Camera 1');
        console.log('playerContainer = ', playerContainer);
        console.log('self.players = ', self.players.children.entries[0].list);
        //playerContainer.body.setBoundsRectangle(new Phaser.Geom.Rectangle(10402, 4532, 300, 500));



        //self.container.setInteractive();



        //self.container.setCollideWorldBounds(false);
        // console.log('self.container = ', self.container);
        // console.log('player coordinates are: X= ', playerInfo.x, 'Y= ', playerInfo.y);

        document.getElementById('phaserApp').focus();

        playerContainer.on('pointerdown', function (pointer) {
          if (pointer.rightButtonDown()) {
            clicked = playerInfo;
            console.log('clicked = ', clicked);
            console.log('playerInfo = ', playerInfo);
          } else {
            console.log('sprite was Left clicked');
            console.log('playerInfo = ', playerInfo);
          }
        });
        avatarSelected = true;

        var currentVoreCount = document.getElementById("voreList").childElementCount;
        createVoreList(playerInfo.voreTypes);


        function createVoreList() {
          currentVoreCount = document.getElementById("voreList").childElementCount;
          //console.log('document.getElementById("voreList").childElementCount;', document.getElementById("voreList").childElementCount);
          if (!currentVoreCount) {
            currentVoreCount = 0;
          }
          for(i = currentVoreCount; i < playerInfo.voreTypes.length; i++) {
            var li = document.createElement("li");
            var button = document.createElement("button");
            var contentDiv = document.createElement("div");
            //var exitButton = document.createElement("button");
            var chamberContents = document.createElement("div");
            var contentsList = document.createElement("ul");
            var chamberSettings = document.createElement("div");

            var rightClickButton = document.createElement("div");




            rightClickButton.id = 'voreContextMenu'+i;
            rightClickButton.innerHTML = "<p class='voreContextMenu-label'>" + playerInfo.voreTypes[i].destination; + "</p>";
            rightClickButton.className = 'voreContextMenuList';
            var voreMenuUl = document.getElementById("voreMenuUl");
            voreMenuUl.appendChild(rightClickButton);
            rightClickButton.addEventListener("click", function(attemptedVoreActionName) {
              //console.log('playerInfo.voreTypes[i] = ', playerInfo.voreTypes[i]);
              //console.log('vore clicked = ', clicked.toElement.innerText);
              self.socket.emit('voreContextMenuClicked', clicked, attemptedVoreActionName.toElement.innerText);
            });



            button.id = 'vorcordionID='+playerInfo.voreTypes[i]._id;
            //settingsForm.id = playerInfo.voreTypes[i]._id;
            button.innerHTML = "<p class='accordion-label'>" + playerInfo.voreTypes[i].destination; + "</p>";
            button.className = 'accordion';

            // exitButton.innerHTML = '<span>&#x1F5D9;</span>';
            // exitButton.className = 'accordion-close-button';

            contentDiv.id = 'vorcordion-content'+i;
            contentDiv.className = 'accordion-content';
            // contentDiv.innerHTML = "<p>testing the ability to show the content inside the contentDiv</p>";

            //chamberContents.className = 'chamberContents';
            //chamberContents.innerHTML = "<p>Prey held within your " + playerInfo.voreTypes[i].destination; + ": </p>";
            var chamberSettingsBttn = document.createElement('button');
            chamberSettingsBttn.innerHTML = 'Chamber Settings';
            chamberSettingsBttn.id = 'chamberSettingsID='+playerInfo.voreTypes[i]._id;
            contentDiv.appendChild(chamberSettingsBttn);

            var chamberDescriptionsBttn = document.createElement('button');
            chamberDescriptionsBttn.innerHTML = 'Chamber Descriptions';
            chamberDescriptionsBttn.id = 'chamberDescriptionsID='+playerInfo.voreTypes[i]._id;
            contentDiv.appendChild(chamberDescriptionsBttn);


            //----- Creating a Chamber Settings Modal -----//
            var chamberPopUp = document.createElement('div');
            chamberPopUp.className = 'chamberPopUp';
            contentDiv.appendChild(chamberPopUp);
            var chamberPopUpContent = document.createElement('div');
            chamberPopUpContent.className = 'chamberPopUp-Content';
            chamberPopUp.appendChild(chamberPopUpContent);
            var chamberPopUpHeader = document.createElement('div');
            chamberPopUpHeader.className = 'chamberPopUp-header'
            chamberPopUpContent.appendChild(chamberPopUpHeader);
            var chamberPopUpCloseBtn = document.createElement("SPAN");
            chamberPopUpCloseBtn.id = 'chamberSettingsCloseID='+playerInfo.voreTypes[i]._id;
            chamberPopUpCloseBtn.className = 'close';
            chamberPopUpCloseBtn.innerHTML = '&times;'
            chamberPopUpHeader.appendChild(chamberPopUpCloseBtn);
            var chamberPopUpHeaderText = document.createElement('h2');
            chamberPopUpHeaderText.innerHTML = 'Settings For Your '+playerInfo.voreTypes[i].destination
            chamberPopUpHeader.appendChild(chamberPopUpHeaderText);

            var chamberPopUpBody = document.createElement('div');
            chamberPopUpBody.className = 'chamberPopUp-Body';
            chamberPopUpContent.appendChild(chamberPopUpBody);

            // var chamberPopUpBodyFiller = document.createElement('p');
            // chamberPopUpBodyFiller.innerHTML = 'Test Modal Body';
            // chamberPopUpBody.appendChild(chamberPopUpBodyFiller);

            var chamberPopUpFooter = document.createElement('div');
            chamberPopUpFooter.className = 'chamberPopUp-Footer'
            chamberPopUpContent.appendChild(chamberPopUpFooter);
            var chamberPopUpFooterText = document.createElement('h3');
            chamberPopUpFooterText.innerHTML = 'Settings For Your '+playerInfo.voreTypes[i].destination
            chamberPopUpFooter.appendChild(chamberPopUpFooterText);





            //----- Creating Settings Form to be displayed inside Modal -----//
              contentsList.className = 'contentsList';

              chamberSettings.className = 'chamberSettings';

              var settingsUl = document.createElement('ul');
              var settingsForm = document.createElement('form');
              settingsForm.id = playerInfo.voreTypes[i]._id;
              chamberSettings.appendChild(settingsForm);
              settingsForm.appendChild(settingsUl);

              var settingsLi = document.createElement('li');
          		var select = document.createElement("select");
              select.id = 'containerAction'+i;
          		settingsLi.innerHTML = "Is currently set to ";
          		var optionArray = ["Hold","Digest","Absorb","Transform"];
          		for (var sI = 0; sI < optionArray.length; sI++) {
          			var option = document.createElement("option");
          			option.value = optionArray[sI];
          			option.text = optionArray[sI];
          			select.appendChild(option);
          		}
          		settingsUl.appendChild(settingsLi);
          		settingsLi.appendChild(select);

              var settingsLi1 = document.createElement('li');
              var digestionTimer = document.createElement('input');
              digestionTimer.id = 'digestionTimer'+i;
              digestionTimer.name = 'digestionTimer';
              digestionTimer.type = 'number';
              digestionTimer.autocomplete = 'off';
              digestionTimer.className = 'form-control';
              digestionTimer.placeholder = 'Digestion Timer (In Seconds)';
              digestionTimer.ariaLabel = 'digestionTimer';
              digestionTimer.value = playerInfo.voreTypes[i].digestionTimer;
              settingsUl.appendChild(settingsLi1);
          		settingsLi1.appendChild(digestionTimer);

              var settingsLi2 = document.createElement('li');
              var leavesRemains = document.createElement('input');
              leavesRemains.id = 'leavesRemains'+i;
              leavesRemains.name = 'leavesRemains';
              leavesRemains.type = 'checkbox';
              leavesRemains.autocomplete = 'off';
              leavesRemains.className = 'form-control';
              //leavesRemains.placeholder = 'Digestion Timer (In Seconds)';
              leavesRemains.ariaLabel = 'leavesRemains';
              //leavesRemains.value = playerInfo.voreTypes[i].leavesRemains;
              settingsUl.appendChild(settingsLi2);
          		settingsLi2.appendChild(leavesRemains);

              var settingsLi3 = document.createElement('li');
          		var select2 = document.createElement("select");
              select2.id = 'containerAction'+i;
          		settingsLi3.innerHTML = "Remains type is ";
          		var optionArray2 = ["Cum","Urine","Scat","Other?"];
          		for (var sI = 0; sI < optionArray2.length; sI++) {
          			var option2 = document.createElement("option");
          			option2.value = optionArray2[sI];
          			option2.text = optionArray2[sI];
          			select2.appendChild(option2);
          		}
              settingsUl.appendChild(settingsLi3);
          		settingsLi3.appendChild(select2);

              var settingsLi4 = document.createElement('li');
          		var select3 = document.createElement("select");
              select3.id = 'containerAction'+i;
          		settingsLi4.innerHTML = "Remains exit your body from your ";
          		var optionArray3 = ["Butt","Penis","Vagina","Other?"];
          		for (var sI = 0; sI < optionArray3.length; sI++) {
          			var option3 = document.createElement("option");
          			option3.value = sI+1;
          			option3.text = optionArray3[sI];
          			select3.appendChild(option3);
          		}
              settingsUl.appendChild(settingsLi4);
          		settingsLi4.appendChild(select3);

              var settingsLi5 = document.createElement('li');
              var soulInteraction = document.createElement('input');
              settingsLi5.innerHTML = "Interacts with souls? Y/N ";
              soulInteraction.id = 'soulInteraction'+i;
              soulInteraction.name = 'soulInteraction';
              soulInteraction.type = 'checkbox';
              soulInteraction.autocomplete = 'off';
              soulInteraction.className = 'form-control';
              //soulInteraction.placeholder = 'Digestion Timer (In Seconds)';
              soulInteraction.ariaLabel = 'soulInteraction';
              //soulInteraction.value = playerInfo.voreTypes[i].soulInteraction;
              settingsUl.appendChild(settingsLi5);
          		settingsLi5.appendChild(soulInteraction);

              var settingsLi6 = document.createElement('li');
              var submitSettings = document.createElement('button');
              submitSettings.innerHTML = "Apply";
              submitSettings.id = 'applySettings'+i;
              submitSettings.className = 'applySettings';

              settingsUl.appendChild(settingsLi6);
          		settingsLi6.appendChild(submitSettings);

              chamberPopUpBody.appendChild(chamberSettings);




              //----- Creating a Chamber Descriptions Modal -----//
              var chamberDescriptionsPopUp = document.createElement('div');
              chamberDescriptionsPopUp.className = 'chamberDescriptionsPopUp';
              contentDiv.appendChild(chamberDescriptionsPopUp);
              var chamberDescriptionsPopUpContent = document.createElement('div');
              chamberDescriptionsPopUpContent.className = 'chamberPopUp-Content';
              chamberDescriptionsPopUp.appendChild(chamberDescriptionsPopUpContent);
              var chamberDescriptionsPopUpHeader = document.createElement('div');
              chamberDescriptionsPopUpHeader.className = 'chamberPopUp-header'
              chamberDescriptionsPopUpContent.appendChild(chamberDescriptionsPopUpHeader);
              var chamberDescriptionsPopUpCloseBtn = document.createElement("SPAN");
              chamberDescriptionsPopUpCloseBtn.id = 'chamberDescriptionsCloseID='+playerInfo.voreTypes[i]._id;
              chamberDescriptionsPopUpCloseBtn.className = 'close';
              chamberDescriptionsPopUpCloseBtn.innerHTML = '&times;'
              chamberDescriptionsPopUpHeader.appendChild(chamberDescriptionsPopUpCloseBtn);
              var chamberDescriptionsPopUpHeaderText = document.createElement('h2');
              chamberDescriptionsPopUpHeaderText.innerHTML = 'Descriptions For Your '+playerInfo.voreTypes[i].destination
              chamberDescriptionsPopUpHeader.appendChild(chamberDescriptionsPopUpHeaderText);

              var chamberDescriptionsPopUpBody = document.createElement('div');
              chamberDescriptionsPopUpBody.className = 'chamberPopUp-Body';
              chamberDescriptionsPopUpContent.appendChild(chamberDescriptionsPopUpBody);

              // var chamberPopUpBodyFiller = document.createElement('p');
              // chamberPopUpBodyFiller.innerHTML = 'Test Modal Body';
              // chamberPopUpBody.appendChild(chamberPopUpBodyFiller);

              var chamberDescriptionsPopUpFooter = document.createElement('div');
              chamberDescriptionsPopUpFooter.className = 'chamberPopUp-Footer'
              chamberDescriptionsPopUpContent.appendChild(chamberDescriptionsPopUpFooter);
              var chamberDescriptionsPopUpFooterText = document.createElement('h3');
              chamberDescriptionsPopUpFooterText.innerHTML = 'Descriptions For Your '+playerInfo.voreTypes[i].destination
              chamberDescriptionsPopUpFooter.appendChild(chamberDescriptionsPopUpFooterText);




              //----- Chamber Descriptions -----//
              var chamberDescriptions = document.createElement("div");
              chamberDescriptions.id = 'chamberDescriptions';

              var br2 = document.createElement('br');
              var br3 = document.createElement('br');
              var br4 = document.createElement('br');

              //var button = document.createElement("button");
              var examineButton = document.createElement('button');
              var struggleInsideButton = document.createElement('button');
              var struggleOutsideButton = document.createElement('button');
              var digestionInsideButton = document.createElement('button');
              var digestionOutsideButton = document.createElement('button');
              //var div = document.createElement("div");


              var examineMsgDiv = document.createElement("div");
              var examineContentDiv = document.createElement("div");
              var struggleInsideContentDiv = document.createElement("div");
              var struggleOutsideContentDiv = document.createElement("div");
              var digestionInsideContentDiv = document.createElement("div");
              var digestionOutsideContentDiv = document.createElement("div");

              var destination = document.createElement('input');
              var destinationDescripLbl = document.createElement('label');
              var destinationDescrip = document.createElement('textarea');


              var digestionTimerLbl = document.createElement('label');

              var animationLbl = document.createElement('label');

              var examineMsgLbl = document.createElement('label');
              var examineMsgDescrip = document.createElement('textarea');
              var struggleInsideMsgLbl = document.createElement('label');
              var struggleInsideMsgDescrip = document.createElement('textarea');
              var struggleOutsideMsgLbl = document.createElement('label');
              var struggleOutsideMsgDescrip = document.createElement('textarea');
              var digestionInsideMsgLbl = document.createElement('label');
              var digestionInsideMsgDescrip = document.createElement('textarea');
              var digestionOutsideMsgLbl = document.createElement('label');
              var digestionOutsideMsgDescrip = document.createElement('textarea');

              //li.className = "voreListItem";

              // button.id = 'voreOption'+i;
              // button.className = 'voreTypecollapsible';
              // button.type = 'button';
              // button.innerHTML = "<h1>" + playerInfo.voreTypes[i].destination; + "</h1>"
              // chamberDescriptions.appendChild(button);

              // div.id = 'content'+i;
              // div.className = "voreTypecontent";
              var div2 = document.createElement("div");
              div2.id = 'voreClassifiers'+i;
              div2.className = 'voreClassifiers';
              chamberDescriptions.appendChild(div2);

              var div3 = document.createElement("div");
              div3.className = 'activityMessages'
              chamberDescriptions.appendChild(div3);

              var destinationLbl = document.createElement('label');
              destinationLbl.innerHTML = 'Destination: ';
              destinationLbl.htmlFor = 'destination'+i;
              div2.appendChild(destinationLbl);
              //onkeyup='updateBttnName(event)'
              destination.id = 'destination'+i;
              destination.name = 'destination';
              //destination.onkeyup = updateBttnName;
              destination.type = 'text';
              destination.autocomplete = 'off';
              destination.className = 'form-control';
              destination.placeholder = 'Destination';
              destination.ariaLabel = 'Destination';
              destination.value = playerInfo.voreTypes[i].destination;
              div2.appendChild(destination);

              var br = document.createElement('br');
              div2.appendChild(br);

              var verbLbl = document.createElement('label');
              verbLbl.innerHTML = 'Verb: ';
              verbLbl.htmlFor = 'verb'+i;
              div2.appendChild(verbLbl);

              var verb = document.createElement('input');
              verb.id = 'verb'+i;
              verb.name = 'verb';
              verb.type = 'text';
              verb.autocomplete = 'off';
              verb.className = 'form-control';
              verb.placeholder = 'Destination Verb...';
              verb.ariaLabel = 'verb';
              verb.value = playerInfo.voreTypes[i].verb;
              div2.appendChild(verb);
              div2.appendChild(br2);

              var digestionTimerTextNode = document.createTextNode ('Digestion Timer: ');
              div2.appendChild(digestionTimerTextNode);

              var digestionTimer = document.createElement('input');
              digestionTimer.id = 'digestionTimer'+i;
              digestionTimer.name = 'digestionTimer';
              digestionTimer.type = 'number';
              digestionTimer.autocomplete = 'off';
              digestionTimer.className = 'form-control';
              digestionTimer.placeholder = 'Digestion Timer (In Seconds)';
              digestionTimer.ariaLabel = 'digestionTimer';
              digestionTimer.value = playerInfo.voreTypes[i].digestionTimer;
              div2.appendChild(digestionTimer);
              div2.appendChild(br3);

              var animationTextNode = document.createTextNode ('Animation: ');
              div2.appendChild(animationTextNode);

              var animation = document.createElement('select');
              animation.id = 'animation'+i;
              animation.name = 'animation';
              animation.innerHTML = '<option value="1">Oral Vore</option><option value="2">Anal Vore</option><option value="3">Cock Vore</option><option value="4">Unbirth</option><option value="5">Tail Vore</option><option value="6">Absorbtion</option>';
              animation.value = playerInfo.voreTypes[i].animation;
              div2.appendChild(animation);
              div2.appendChild(br4);

              destinationDescrip.id = 'destinationDescrip'+i;
              destinationDescrip.name = 'destinationDescrip';
              destinationDescrip.autocomplete = 'off';
              destinationDescrip.className = 'form-control';
              destinationDescrip.placeholder = "Describe the inside of the prey's destination...";
              destinationDescrip.areaLabel = 'destinationDescrip';
              destinationDescrip.innerHTML = playerInfo.voreTypes[i].destinationDescrip;
              div2.appendChild(destinationDescrip);

              examineButton.id = 'examineButton'+i;
              examineButton.className = 'actMsgcollapsible';
              examineButton.type = 'button';
              examineButton.innerHTML = "Examine Messages";
              div3.appendChild(examineButton);

              examineMsgDiv.className = 'actMsgcontent';
              //examineMsgDiv.innerHTML = 'testing activity messages';
              examineMsgLbl.innerHTML = 'Describe what people would see when examining you while this destination is "full":';
              examineMsgLbl.htmlFor = 'examineMsgDescrip'+i;
              examineMsgDiv.appendChild(examineMsgLbl);
              examineMsgDescrip.id = 'examineMsgDescrip'+i;
              examineMsgDescrip.name = 'examineMsgDescrip';
              examineMsgDescrip.autocomplete = 'off';
              examineMsgDescrip.className = 'form-control';
              examineMsgDescrip.placeholder = 'What do you look like when this destination is "full"?';
              examineMsgDescrip.areaLabel = 'examineMsgDescrip';
              examineMsgDescrip.innerHTML = playerInfo.voreTypes[i].examineMsgDescrip;
              examineMsgDiv.appendChild(examineMsgDescrip);
              div3.appendChild(examineMsgDiv);

              struggleInsideButton.id = 'struggleInsideMsgButton'+i;
              struggleInsideButton.className = 'actMsgcollapsible';
              struggleInsideButton.type = 'button';
              struggleInsideButton.innerHTML = "Struggle Messages (Interior)";
              div3.appendChild(struggleInsideButton);

              struggleInsideContentDiv.className = 'actMsgcontent';
              //struggleInsideMsgDiv.innerHTML = 'testing activity messages';
              struggleInsideMsgLbl.innerHTML = 'Describe what your prey experiances when struggling:';
              struggleInsideMsgLbl.htmlFor = 'struggleInsideMsgDescrip'+i;
              struggleInsideContentDiv.appendChild(struggleInsideMsgLbl);
              struggleInsideMsgDescrip.id = 'struggleInsideMsgDescrip'+i;
              struggleInsideMsgDescrip.name = 'struggleInsideMsgDescrip';
              struggleInsideMsgDescrip.autocomplete = 'off';
              struggleInsideMsgDescrip.className = 'form-control';
              struggleInsideMsgDescrip.placeholder = 'What does your prey experiance when struggling while inside this destination?';
              struggleInsideMsgDescrip.areaLabel = 'struggleInsideMsgDescrip';
              struggleInsideMsgDescrip.innerHTML = playerInfo.voreTypes[i].struggleInsideMsgDescrip;
              struggleInsideContentDiv.appendChild(struggleInsideMsgDescrip);
              div3.appendChild(struggleInsideContentDiv);

              struggleOutsideButton.id = 'struggleOutsideMsgButton'+i;
              struggleOutsideButton.className = 'actMsgcollapsible';
              struggleOutsideButton.type = 'button';
              struggleOutsideButton.innerHTML = "Struggle Messages (Exterior)";
              div3.appendChild(struggleOutsideButton);

              struggleOutsideContentDiv.className = 'actMsgcontent';
              //struggleOutsideMsgDiv.innerHTML = 'testing activity messages';
              struggleOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may see when your prey is struggling inside this destination:';
              struggleOutsideMsgLbl.htmlFor = 'struggleOutsideMsgDescrip'+i;
              struggleOutsideContentDiv.appendChild(struggleOutsideMsgLbl);
              struggleOutsideMsgDescrip.id = 'struggleOutsideMsgDescrip'+i;
              struggleOutsideMsgDescrip.name = 'struggleOutsideMsgDescrip';
              struggleOutsideMsgDescrip.autocomplete = 'off';
              struggleOutsideMsgDescrip.className = 'form-control';
              struggleOutsideMsgDescrip.placeholder = 'What do others see when prey is struggling in here?';
              struggleOutsideMsgDescrip.areaLabel = 'struggleOutsideMsgDescrip';
              struggleOutsideMsgDescrip.innerHTML = playerInfo.voreTypes[i].struggleOutsideMsgDescrip;
              struggleOutsideContentDiv.appendChild(struggleOutsideMsgDescrip);
              div3.appendChild(struggleOutsideContentDiv);

              digestionInsideButton.id = 'digestionInsideMsgButton'+i;
              digestionInsideButton.className = 'actMsgcollapsible';
              digestionInsideButton.type = 'button';
              digestionInsideButton.innerHTML = "Digestion Messages (Interior)";
              div3.appendChild(digestionInsideButton);

              digestionInsideContentDiv.className = 'actMsgcontent';
              //digestionInsideMsgDiv.innerHTML = 'testing activity messages';
              digestionInsideMsgLbl.innerHTML = 'Describe what your prey may experiance in their final moments as they are digested in this destination:';
              digestionInsideMsgLbl.htmlFor = 'digestionInsideMsgDescrip'+i;
              digestionInsideContentDiv.appendChild(digestionInsideMsgLbl);
              digestionInsideMsgDescrip.id = 'digestionInsideMsgDescrip'+i;
              digestionInsideMsgDescrip.name = 'digestionInsideMsgDescrip';
              digestionInsideMsgDescrip.autocomplete = 'off';
              digestionInsideMsgDescrip.className = 'form-control';
              digestionInsideMsgDescrip.placeholder = 'What does your prey experiance in the moment they are completely digested here?';
              digestionInsideMsgDescrip.areaLabel = 'digestionInsideMsgDescrip';
              digestionInsideMsgDescrip.innerHTML = playerInfo.voreTypes[i].digestionInsideMsgDescrip;
              digestionInsideContentDiv.appendChild(digestionInsideMsgDescrip);
              div3.appendChild(digestionInsideContentDiv);

              digestionOutsideButton.id = 'digestionOutsideMsgButton'+i;
              digestionOutsideButton.className = 'actMsgcollapsible';
              digestionOutsideButton.type = 'button';
              digestionOutsideButton.innerHTML = "Digestion Messages (Exterior)";
              div3.appendChild(digestionOutsideButton);

              digestionOutsideContentDiv.className = 'actMsgcontent';
              //digestionOutsideMsgDiv.innerHTML = 'testing activity messages';
              digestionOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may notice as this destination finishes digetsing your prey:';
              digestionOutsideMsgLbl.htmlFor = 'digestionOutsideMsgDescrip'+i;
              digestionOutsideContentDiv.appendChild(digestionOutsideMsgLbl);
              digestionOutsideMsgDescrip.id = 'digestionOutsideMsgDescrip'+i;
              digestionOutsideMsgDescrip.name = 'digestionOutsideMsgDescrip';
              digestionOutsideMsgDescrip.autocomplete = 'off';
              digestionOutsideMsgDescrip.className = 'form-control';
              digestionOutsideMsgDescrip.placeholder = 'What do others around you notice as you finish digesting prey here?';
              digestionOutsideMsgDescrip.areaLabel = 'digestionOutsideMsgDescrip';
              digestionOutsideMsgDescrip.innerHTML = playerInfo.voreTypes[i].digestionOutsideMsgDescrip;
              digestionOutsideContentDiv.appendChild(digestionOutsideMsgDescrip);
              div3.appendChild(digestionOutsideContentDiv);



              chamberDescriptionsPopUpBody.appendChild(chamberDescriptions);//chamberDescriptions





              li.appendChild(button);
              li.appendChild(contentDiv);

              //contentDiv.appendChild(exitButton);
              contentDiv.appendChild(chamberContents);

              chamberContents.appendChild(contentsList);



              document.getElementById("voreList").appendChild(li);
              document.getElementById(button.id).addEventListener("click", displayChamberContents);
              document.getElementById('chamberSettingsID='+localPlayerInfo.voreTypes[i]._id).addEventListener("click", displayChamberSettings);
              document.getElementById('chamberSettingsCloseID='+localPlayerInfo.voreTypes[i]._id).addEventListener("click", closeDisplayChamberSettings);
              document.getElementById('chamberDescriptionsID='+localPlayerInfo.voreTypes[i]._id).addEventListener("click", displayChamberSettings);
              document.getElementById('chamberDescriptionsCloseID='+localPlayerInfo.voreTypes[i]._id).addEventListener("click", closeDisplayChamberSettings);
            }

            //----- Displays the contents of a given chamber in the vore menu -----//
            function displayChamberContents(e) {
              var selectedVoreAnatomy = e.target.id.replace("vorcordionID=", "")
              console.log('displayChamberContents ID = ', selectedVoreAnatomy);
              var chamberContentsList = document.getElementById("chamberContentsList");
              chamberContentsList.innerHTML = "";

              //----- Checking clicked option ID against player vore ID to find the match -----//
              for (i = 0; i < localPlayerInfo.voreTypes.length; i++) {
                if (localPlayerInfo.voreTypes[i]._id == selectedVoreAnatomy) {
                  //----- Check if selected chamber has prey inside. If yes, displays the names of prey in the chamber contents list -----//
                  if(!localPlayerInfo.voreTypes[i].contents) {
                    console.log('This chamber is empty');
                    chamberContentsList.innerHTML = 'There is nothing inside of your ' + localPlayerInfo.voreTypes[i].destination;
                  } else {
                    for (p = 0; p < localPlayerInfo.voreTypes[i].contents.length; p++) {
                      var displayChamberContentsLi = document.createElement("li");
                      displayChamberContentsLi.innerHTML = localPlayerInfo.voreTypes[i].contents[p];
                      chamberContentsList.appendChild(displayChamberContentsLi);
                    }
                  }
                }
              }
            }

            //----- Controls Chamber Modals -----//

            function displayChamberSettings(e) {
              var selectedVoreAnatomy = e.target.id.replace("chamberSettingsID=", "")
              var popUpModal = this.nextElementSibling.nextElementSibling;
              popUpModal.style.display = 'block';
              console.log('popUpModal = ', popUpModal);
              var popUpModalCloseBttn = popUpModal.children[0].children[0].children[1];//.child.children[1];

              console.log('popUpModalCloseBttn = ', popUpModalCloseBttn);
              console.log('test Successful. You clicked the settings button for selectedVoreAnatomy = ', selectedVoreAnatomy);
            }

            //----- Closes Chamber Modals -----//
            function closeDisplayChamberSettings(e) {
              var selectedVoreAnatomy = e.target.id.replace("chamberSettingsCloseID=", "")
              var popUpModal = this.parentElement.parentElement.parentElement;
              console.log('close button clicked');
              popUpModal.style.display = 'none';
            }


            var addVore = document.createElement('button');
            var liAddButton = document.createElement('li');
            addVore.className = "button main";
            addVore.id = "addVore";
            addVore.type = "button";
            addVore.innerHTML = 'Add New Vore';

            liAddButton.appendChild(addVore);

            document.getElementById("voreList").appendChild(liAddButton);

            //----- controls the expanding of the Vore Anatomy Buttons -----//
            accordions = document.getElementsByClassName('accordion');
            // console.log('accordions = ', accordions);
            if (!accordions) {
              accordions = 0;
            }
            for (i = 0; i < accordions.length; i++) {
              accordions[i].onclick = function () {
                // this.classList.toggle('is-open');
                var content = this.nextElementSibling;
                // console.log('accordions = ', accordions[i]);
                // console.log('content = ', content);
                if (content.style.maxHeight) {
                  //accordion is open, we need to close it
                  this.classList.toggle('is-open');
                  content.style.maxHeight = null;
                } else {
                  //accordiion is closed
                  //content.style.maxHeight = content.scrollHeight + 'px';
                  otherContent = document.getElementsByClassName('accordion-content');
                  // console.log('otherContent = ', otherContent);
                  for (oC = 0; oC < otherContent.length; oC++){
                    // console.log('found other content');
                    var parentElement = otherContent[oC].previousSibling;
                    // console.log('parentElement = ', parentElement);
                    parentElement.classList.remove('is-open');
                    otherContent[oC].style.maxHeight = null;
                  }
                  content.style.maxHeight = '500px';
                  this.classList.toggle('is-open');
                }
              }
            }
            accordionCloseButton = document.getElementsByClassName('accordion-close-button');
            for (i = 0; i < accordionCloseButton.length; i++) {
              accordionCloseButton[i].onclick = function () {
                var content = this.parentElement;
                var accordion = content.previousSibling;
                // console.log('content = ', content);
                // console.log('accordion = ', accordion);
                accordion.classList.toggle('is-open');
                content.style.maxHeight = null;
              }
            }

            //----- Controls the expanding of the Action Messages inside the Chamber Descruptions Modal -----//
            actMsgcollapsible = document.getElementsByClassName('actMsgcollapsible');
            // console.log('actMsgcollapsible = ', actMsgcollapsible);
            if (!actMsgcollapsible) {
              actMsgcollapsible = 0;
            }
            for (i = 0; i < actMsgcollapsible.length; i++) {
              actMsgcollapsible[i].onclick = function () {
                // this.classList.toggle('is-open');
                var content = this.nextElementSibling;
                // console.log('actMsgcollapsible = ', actMsgcollapsible[i]);
                // console.log('content = ', content);
                if (content.style.maxHeight) {
                  //actMsgcollapsible is open, we need to close it
                  this.classList.toggle('is-open');
                  content.style.maxHeight = null;
                  content.style.display = 'none';
                  // console.log('actMsgcollapsible is open, we need to close it');
                } else {
                  //actMsgcollapsible is closed
                  //content.style.maxHeight = content.scrollHeight + 'px';
                  actMsgcontent = document.getElementsByClassName('actMsgcontent');
                  // console.log('actMsgcontent = ', actMsgcontent);
                  for (aMC = 0; aMC < actMsgcontent.length; aMC++){
                    // console.log('found actMsgcontent');
                    var parentElement = actMsgcontent[aMC].previousSibling;
                    // console.log('parentElement = ', parentElement);
                    parentElement.classList.remove('is-open');
                    actMsgcontent[aMC].style.maxHeight = null;
                    actMsgcontent[aMC].style.display = 'none';
                  }
                  content.style.maxHeight = '500px';
                  content.style.display = 'block';
                  this.classList.toggle('is-open');
                  // console.log('actMsgcollapsible is closed, setting content height to 500px to open');
                }
              }
            }
            actMsgcollapsibleCloseButton = document.getElementsByClassName('actMsgcollapsible-close-button');
            for (i = 0; i < actMsgcollapsibleCloseButton.length; i++) {
              actMsgcollapsibleCloseButton[i].onclick = function () {
                var content = this.parentElement;
                var actMsgcollapsible = content.previousSibling;
                // console.log('content = ', content);
                // console.log('actMsgcollapsible = ', actMsgcollapsible);
                actMsgcollapsible.classList.toggle('is-open');
                content.style.maxHeight = null;
              }
            }


            var voreForms = document.querySelectorAll('#voreList form');
            console.log('voreForms = ', voreForms);
            Array.from(voreForms).forEach(function(voreForm){
              voreForm.addEventListener('click', function(e){
                if(e.target.className == 'applySettings'){
                  e.preventDefault();
                  console.log('vore = ', voreForm.id);
                  //console.log('voreForm.value = ', voreForm.elements[0].value);
                  var voreUpdate = {
                    voreFormId: voreForm.id,
                    chamberSettings: voreForm.elements[0].value,
                    digestionTimer: voreForm.elements[1].value,
                    leavesRemains: voreForm.elements[2].value,
                    remainsType: voreForm.elements[3].value,
                    remainsExit: voreForm.elements[4].value,
                    soulInteraction: voreForm.elements[5].value
                  }

                  console.log(
                    'voreForm.id = ', voreUpdate.voreFormId, '\n',
                    'chamberSettings', voreUpdate.chamberSettings, '\n',
                    'digestionTimer', voreUpdate.digestionTimer, '\n',
                    'leavesRemains', voreUpdate.leavesRemains, '\n',
                    'remainsType', voreUpdate.remainsType, '\n',
                    'remainsExit', voreUpdate.remainsExit, '\n',
                    'soulInteraction', voreUpdate.soulInteraction, '\n'
                  );
                  const cookie = document.cookie;
                  self.socket.emit('voreUpdate', voreUpdate, cookie);
                }
              })
            })
          }
        };
      function displayOtherPlayers(self, playerInfo) {
        console.log("displayOtherPlayers function called");
        console.log('displayOtherPlayers function username = ', playerInfo.username);
        console.log('displayOtherPlayers function Head Tint = ', playerInfo.headColor);
        console.log('displayOtherPlayers function Head Tint = ', playerInfo.bodyColor);
        console.log('displayOtherPlayers function called and playerInfo.head = ', playerInfo.head, 'and, ', playerInfo.body);

        playerContainer = self.add.container(playerInfo.x, playerInfo.y).setInteractive();
        console.log('player coordinates are: X= ', playerInfo.x, 'Y= ', playerInfo.y);
        //----- the 30, -87 defines the placement of the sprite in the container -----//
        const playerContainerhead = self.add.sprite(30, -87, playerInfo.head.sprite);
        playerContainerhead.setTint(playerInfo.head.color);
        const playerContainersecondaryHead = self.add.sprite(30, -87, playerInfo.head.secondarySprite);
        playerContainersecondaryHead.setTint(playerInfo.head.secondaryColor);
        const playerContaineraccentHead = self.add.sprite(30, -87, playerInfo.head.accentSprite);
        playerContaineraccentHead.setTint(playerInfo.head.accentColor);

        const playerContainerbody = self.add.sprite(30, -87, playerInfo.body.sprite);
        playerContainerbody.setTint(playerInfo.body.color);
        const playerContainersecondaryBody = self.add.sprite(30, -87, playerInfo.body.secondarySprite);
        playerContainersecondaryBody.setTint(playerInfo.body.secondaryColor);
        const playerContaineraccentBody = self.add.sprite(30, -87, playerInfo.body.accentSprite);
        playerContaineraccentBody.setTint(playerInfo.body.accentColor);

        const playerContainertail = self.add.sprite(30, -87, playerInfo.tail.sprite);
        playerContainertail.setTint(playerInfo.tail.color);
        const playerContainersecondaryTail = self.add.sprite(30, -87, playerInfo.tail.secondarySprite);
        playerContainersecondaryTail.setTint(playerInfo.tail.secondaryColor);
        const playerContaineraccentTail = self.add.sprite(30, -87, playerInfo.tail.accentSprite);
        playerContaineraccentTail.setTint(playerInfo.tail.accentColor);

        const playerContainerhair = self.add.sprite(30, -87, playerInfo.hair.sprite);
        playerContainerhair.setTint(playerInfo.hair.color);

        const playerContainerear = self.add.sprite(30, -87, playerInfo.ear.sprite);
        playerContainerear.setTint(playerInfo.ear.color);

        const playerContainereyes = self.add.sprite(30, -87, playerInfo.eyes.outer);
        const playerContaineriris = self.add.sprite(30, -87, playerInfo.eyes.iris);
        playerContaineriris.setTint(playerInfo.eyes.color);

        const playerContainergenitles = self.add.sprite(30, -87, playerInfo.genitles.sprite);
        //self.genitles.setTint(playerInfo.genitles.color);


        playerContainer.add([
          playerContainertail,
          playerContainersecondaryTail,
          playerContaineraccentTail,
          playerContainerbody,
          playerContainersecondaryBody,
          playerContaineraccentBody,
          playerContainerhead,
          playerContainerear,
          playerContainersecondaryHead,
          playerContaineraccentHead,
          playerContainereyes,
          playerContaineriris,
          playerContainerhair,
          playerContainergenitles
        ]);
        playerContainer.sendToBack(self.tail);

        playerContainer.playerId = playerInfo.playerId;
        self.players.add(playerContainer);

        self.physics.world.enable(playerContainer)
        playerContainer.body.setSize(60, 15);



        playerContainer.on('pointerdown', function (pointer){
          if (pointer.rightButtonDown()) {
            clicked = playerInfo;
          } else {
            console.log('Other sprite was Left clicked');
          }
        });
      };

      self.anims.create({
        key: 'head_01Down',
        frames: self.anims.generateFrameNumbers('head_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01Right',
        frames: self.anims.generateFrameNumbers('head_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01Left',
        frames: self.anims.generateFrameNumbers('head_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01Up',
        frames: self.anims.generateFrameNumbers('head_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01StopDown',
        frames: self.anims.generateFrameNumbers('head_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_02Down',
        frames: self.anims.generateFrameNumbers('head_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02Right',
        frames: self.anims.generateFrameNumbers('head_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02Left',
        frames: self.anims.generateFrameNumbers('head_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02Up',
        frames: self.anims.generateFrameNumbers('head_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02StopDown',
        frames: self.anims.generateFrameNumbers('head_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_03Down',
        frames: self.anims.generateFrameNumbers('head_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03Right',
        frames: self.anims.generateFrameNumbers('head_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03Left',
        frames: self.anims.generateFrameNumbers('head_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03Up',
        frames: self.anims.generateFrameNumbers('head_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04StopDown',
        frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_04Down',
        frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04Right',
        frames: self.anims.generateFrameNumbers('head_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04Left',
        frames: self.anims.generateFrameNumbers('head_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04Up',
        frames: self.anims.generateFrameNumbers('head_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04StopDown',
        frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_04StopDown',
        frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_05Down',
        frames: self.anims.generateFrameNumbers('head_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05Right',
        frames: self.anims.generateFrameNumbers('head_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05Left',
        frames: self.anims.generateFrameNumbers('head_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05Up',
        frames: self.anims.generateFrameNumbers('head_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05StopDown',
        frames: self.anims.generateFrameNumbers('head_05', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_06StopDown',
        frames: self.anims.generateFrameNumbers('head_06', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_06Down',
        frames: self.anims.generateFrameNumbers('head_06', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06Right',
        frames: self.anims.generateFrameNumbers('head_06', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06Left',
        frames: self.anims.generateFrameNumbers('head_06', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06Up',
        frames: self.anims.generateFrameNumbers('head_06', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06StopDown',
        frames: self.anims.generateFrameNumbers('head_06', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'body_01Down',
        frames: self.anims.generateFrameNumbers('body_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'body_01Right',
        frames: self.anims.generateFrameNumbers('body_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'body_01Left',
        frames: self.anims.generateFrameNumbers('body_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'body_01Up',
        frames: self.anims.generateFrameNumbers('body_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'body_01StopDown',
        frames: self.anims.generateFrameNumbers('body_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'tail_01Down',
        frames: self.anims.generateFrameNumbers('tail_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_01Right',
        frames: self.anims.generateFrameNumbers('tail_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_01Left',
        frames: self.anims.generateFrameNumbers('tail_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_01Up',
        frames: self.anims.generateFrameNumbers('tail_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_01StopDown',
        frames: self.anims.generateFrameNumbers('tail_01', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'tail_02Down',
        frames: self.anims.generateFrameNumbers('tail_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_02Right',
        frames: self.anims.generateFrameNumbers('tail_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_02Left',
        frames: self.anims.generateFrameNumbers('tail_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_02Up',
        frames: self.anims.generateFrameNumbers('tail_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_02StopDown',
        frames: self.anims.generateFrameNumbers('tail_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'tail_03Down',
        frames: self.anims.generateFrameNumbers('tail_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_03Right',
        frames: self.anims.generateFrameNumbers('tail_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_03Left',
        frames: self.anims.generateFrameNumbers('tail_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_03Up',
        frames: self.anims.generateFrameNumbers('tail_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_03StopDown',
        frames: self.anims.generateFrameNumbers('tail_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'tail_04Down',
        frames: self.anims.generateFrameNumbers('tail_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_04Right',
        frames: self.anims.generateFrameNumbers('tail_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_04Left',
        frames: self.anims.generateFrameNumbers('tail_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_04Up',
        frames: self.anims.generateFrameNumbers('tail_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'tail_04StopDown',
        frames: self.anims.generateFrameNumbers('tail_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'secondaryTail_02Down',
        frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_02Right',
        frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_02Left',
        frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_02Up',
        frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_02StopDown',
        frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'secondaryTail_03Down',
        frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_03Right',
        frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_03Left',
        frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_03Up',
        frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_03StopDown',
        frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'secondaryTail_04Down',
        frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_04Right',
        frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_04Left',
        frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_04Up',
        frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryTail_04StopDown',
        frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'eyes_whites_01Down',
        frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_01Right',
        frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_01Left',
        frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_01Up',
        frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_01StopDown',
        frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'iris_01Down',
        frames: self.anims.generateFrameNumbers('iris_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_01Right',
        frames: self.anims.generateFrameNumbers('iris_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_01Left',
        frames: self.anims.generateFrameNumbers('iris_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_01Up',
        frames: self.anims.generateFrameNumbers('iris_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_01StopDown',
        frames: self.anims.generateFrameNumbers('iris_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'eyes_whites_02Down',
        frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_02Right',
        frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_02Left',
        frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_02Up',
        frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_02StopDown',
        frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'iris_02Down',
        frames: self.anims.generateFrameNumbers('iris_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_02Right',
        frames: self.anims.generateFrameNumbers('iris_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_02Left',
        frames: self.anims.generateFrameNumbers('iris_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_02Up',
        frames: self.anims.generateFrameNumbers('iris_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_02StopDown',
        frames: self.anims.generateFrameNumbers('iris_02', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'eyes_whites_03Down',
        frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_03Right',
        frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_03Left',
        frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_03Up',
        frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_03StopDown',
        frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'iris_03Down',
        frames: self.anims.generateFrameNumbers('iris_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_03Right',
        frames: self.anims.generateFrameNumbers('iris_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_03Left',
        frames: self.anims.generateFrameNumbers('iris_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_03Up',
        frames: self.anims.generateFrameNumbers('iris_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_03StopDown',
        frames: self.anims.generateFrameNumbers('iris_03', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'eyes_whites_04Down',
        frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_04Right',
        frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_04Left',
        frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_04Up',
        frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_04StopDown',
        frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'iris_04Down',
        frames: self.anims.generateFrameNumbers('iris_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_04Right',
        frames: self.anims.generateFrameNumbers('iris_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_04Left',
        frames: self.anims.generateFrameNumbers('iris_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_04Up',
        frames: self.anims.generateFrameNumbers('iris_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_04StopDown',
        frames: self.anims.generateFrameNumbers('iris_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'eyes_whites_05Down',
        frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_05Right',
        frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_05Left',
        frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_05Up',
        frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_05StopDown',
        frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'iris_05Down',
        frames: self.anims.generateFrameNumbers('iris_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_05Right',
        frames: self.anims.generateFrameNumbers('iris_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_05Left',
        frames: self.anims.generateFrameNumbers('iris_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_05Up',
        frames: self.anims.generateFrameNumbers('iris_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_05StopDown',
        frames: self.anims.generateFrameNumbers('iris_05', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'eyes_whites_06Down',
        frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_06Right',
        frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_06Left',
        frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_06Up',
        frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'eyes_whites_06StopDown',
        frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'iris_06Down',
        frames: self.anims.generateFrameNumbers('iris_06', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_06Right',
        frames: self.anims.generateFrameNumbers('iris_06', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_06Left',
        frames: self.anims.generateFrameNumbers('iris_06', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_06Up',
        frames: self.anims.generateFrameNumbers('iris_06', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'iris_06StopDown',
        frames: self.anims.generateFrameNumbers('iris_06', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'secondaryBody_01Down',
        frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_01Right',
        frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_01Left',
        frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_01Up',
        frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_01StopDown',
        frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'secondaryBody_02Down',
        frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_02Right',
        frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_02Left',
        frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_02Up',
        frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_02StopDown',
        frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'secondaryBody_03Down',
        frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_03Right',
        frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_03Left',
        frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_03Up',
        frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_03StopDown',
        frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'secondaryBody_04Down',
        frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_04Right',
        frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_04Left',
        frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_04Up',
        frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'secondaryBody_04StopDown',
        frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'accentBody_01Down',
        frames: self.anims.generateFrameNumbers('accentBody_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_01Right',
        frames: self.anims.generateFrameNumbers('accentBody_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_01Left',
        frames: self.anims.generateFrameNumbers('accentBody_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_01Up',
        frames: self.anims.generateFrameNumbers('accentBody_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_01StopDown',
        frames: self.anims.generateFrameNumbers('accentBody_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'accentBody_02Down',
        frames: self.anims.generateFrameNumbers('accentBody_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_02Right',
        frames: self.anims.generateFrameNumbers('accentBody_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_02Left',
        frames: self.anims.generateFrameNumbers('accentBody_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_02Up',
        frames: self.anims.generateFrameNumbers('accentBody_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'accentBody_02StopDown',
        frames: self.anims.generateFrameNumbers('accentBody_02', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_01-secondaryHead_01Down',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_01Right',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_01Left',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_01Up',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_01StopDown',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_01-secondaryHead_02Down',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_02Right',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_02Left',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_02Up',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_02StopDown',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_01-secondaryHead_03Down',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_03Right',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_03Left',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_03Up',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_03StopDown',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_01-secondaryHead_04Down',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_04Right',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_04Left',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_04Up',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_04StopDown',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_01-secondaryHead_05Down',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_05Right',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_05Left',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_05Up',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_01-secondaryHead_05StopDown',
        frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });

      self.anims.create({
        key: 'head_02-secondaryHead_01Down',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_01Right',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_01Left',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_01Up',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_01StopDown',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_02-secondaryHead_02Down',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_02Right',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_02Left',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_02Up',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_02StopDown',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_02-secondaryHead_03Down',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_03Right',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_03Left',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_03Up',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_03StopDown',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_02-secondaryHead_04Down',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_04Right',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_04Left',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_04Up',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_04StopDown',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_02-secondaryHead_05Down',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_05Right',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_05Left',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_05Up',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_02-secondaryHead_05StopDown',
        frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_03-secondaryHead_01Down',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_01Right',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_01Left',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_01Up',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_01StopDown',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_03-secondaryHead_02Down',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_02Right',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_02Left',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_02Up',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_02StopDown',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_03-secondaryHead_03Down',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_03Right',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_03Left',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_03Up',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_03StopDown',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_03-secondaryHead_04Down',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_04Right',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_04Left',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_04Up',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_04StopDown',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_03-secondaryHead_05Down',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_05Right',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_05Left',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_05Up',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_03-secondaryHead_05StopDown',
        frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });

      self.anims.create({
        key: 'head_04-secondaryHead_01Down',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_01Right',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_01Left',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_01Up',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_01StopDown',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_04-secondaryHead_02Down',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_02Right',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_02Left',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_02Up',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_02StopDown',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_04-secondaryHead_03Down',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_03Right',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_03Left',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_03Up',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_03StopDown',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_04-secondaryHead_04Down',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_04Right',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_04Left',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_04Up',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_04StopDown',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_04-secondaryHead_05Down',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_05Right',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_05Left',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_05Up',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_04-secondaryHead_05StopDown',
        frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });



      self.anims.create({
        key: 'head_05_beakDown',
        frames: self.anims.generateFrameNumbers('head_05_beak', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05_beakRight',
        frames: self.anims.generateFrameNumbers('head_05_beak', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05_beakLeft',
        frames: self.anims.generateFrameNumbers('head_05_beak', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05_beakUp',
        frames: self.anims.generateFrameNumbers('head_05_beak', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05_beakStopDown',
        frames: self.anims.generateFrameNumbers('head_05_beak', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });





      self.anims.create({
        key: 'head_05-secondaryHead_01Down',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_01Right',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_01Left',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_01Up',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_01StopDown',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_05-secondaryHead_02Down',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_02Right',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_02Left',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_02Up',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_02StopDown',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_05-secondaryHead_03Down',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_03Right',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_03Left',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_03Up',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_03StopDown',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_05-secondaryHead_04Down',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_04Right',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_04Left',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_04Up',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_04StopDown',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_05-secondaryHead_05Down',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_05Right',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_05Left',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_05Up',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_05-secondaryHead_05StopDown',
        frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });




      self.anims.create({
        key: 'head_06-secondaryHead_01Down',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_01Right',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_01Left',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_01Up',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_01StopDown',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_06-secondaryHead_02Down',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_02Right',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_02Left',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_02Up',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_02StopDown',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_06-secondaryHead_03Down',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_03Right',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_03Left',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_03Up',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_03StopDown',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_06-secondaryHead_04Down',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_04Right',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_04Left',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_04Up',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_04StopDown',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'head_06-secondaryHead_05Down',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_05Right',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_05Left',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_05Up',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'head_06-secondaryHead_05StopDown',
        frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });


      self.anims.create({
        key: 'hair_01Down',
        frames: self.anims.generateFrameNumbers('hair_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_01Right',
        frames: self.anims.generateFrameNumbers('hair_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_01Left',
        frames: self.anims.generateFrameNumbers('hair_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_01Up',
        frames: self.anims.generateFrameNumbers('hair_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_01StopDown',
        frames: self.anims.generateFrameNumbers('hair_01', { start: 0, end: 0 }),
        frameRate: 8,
        repeat: -1,
      });
      self.anims.create({
        key: 'hair_02Down',
        frames: self.anims.generateFrameNumbers('hair_02', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_02Right',
        frames: self.anims.generateFrameNumbers('hair_02', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_02Left',
        frames: self.anims.generateFrameNumbers('hair_02', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_02Up',
        frames: self.anims.generateFrameNumbers('hair_02', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_02StopDown',
        frames: self.anims.generateFrameNumbers('hair_02', { start: 0, end: 0 }),
        frameRate: 8,
        repeat: -1,
      });
      self.anims.create({
        key: 'hair_03Down',
        frames: self.anims.generateFrameNumbers('hair_03', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_03Right',
        frames: self.anims.generateFrameNumbers('hair_03', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_03Left',
        frames: self.anims.generateFrameNumbers('hair_03', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_03Up',
        frames: self.anims.generateFrameNumbers('hair_03', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'hair_03StopDown',
        frames: self.anims.generateFrameNumbers('hair_03', { start: 0, end: 0 }),
        frameRate: 7,
        repeat: -1,
      });
      self.anims.create({
        key: 'ears_outer_01Down',
        frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_01Right',
        frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_01Left',
        frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_01Up',
        frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_01StopDown',
        frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'ears_inner_01Down',
        frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'ears_inner_01Right',
        frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_inner_01Left',
        frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_inner_01Up',
        frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_inner_01StopDown',
        frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'ears_outer_04Down',
        frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_04Right',
        frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_04Left',
        frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_04Up',
        frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_outer_04StopDown',
        frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'ears_inner_04Down',
        frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_inner_04Right',
        frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_inner_04Left',
        frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_inner_04Up',
        frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ears_inner_04StopDown',
        frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'ear_05Down',
        frames: self.anims.generateFrameNumbers('ear_05', { start: 0, end: 5 }),
        frameRate: 6,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ear_05Right',
        frames: self.anims.generateFrameNumbers('ear_05', { start: 7, end: 13 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ear_05Left',
        frames: self.anims.generateFrameNumbers('ear_05', { start: 14, end: 20 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ear_05Up',
        frames: self.anims.generateFrameNumbers('ear_05', { start: 21, end: 27 }),
        frameRate: 7,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'ear_05StopDown',
        frames: self.anims.generateFrameNumbers('ear_05', { start: 0, end: 0 }),
        frameRate: 6,
        repeat: -1,
      });
      self.anims.create({
        key: 'emptyDown',
        frames: self.anims.generateFrameNumbers('empty', { start: 1, end: 8 }),
        frameRate: 8,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'emptyRight',
        frames: self.anims.generateFrameNumbers('empty', { start: 10, end: 17 }),
        frameRate: 8,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'emptyLeft',
        frames: self.anims.generateFrameNumbers('empty', { start: 19, end: 27 }),
        frameRate: 8,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'emptyUp',
        frames: self.anims.generateFrameNumbers('empty', { start: 28, end: 35 }),
        frameRate: 8,
        repeat: -1,
        showOnStart: true
      });
      self.anims.create({
        key: 'emptyStopDown',
        frames: self.anims.generateFrameNumbers('empty', { start: 0, end: 0 }),
        frameRate: 8,
        repeat: -1,
        showOnStart: true
      });
    }

    function update() {
      //makes phaser stop listening for keyboard inputs when user is focused on the chat div
      // if (chatFocused == false) {
      //   this.input.keyboard.enabled = true;
      //   this.input.keyboard.addKey(this.cursors.up);
      //   this.input.keyboard.addKey(this.cursors.down);
      //   this.input.keyboard.addKey(this.cursors.left);
      //   this.input.keyboard.addKey(this.cursors.right);
      //   this.input.keyboard.addKey(this.cursors.space);
      //   // console.log('in game arrow keys enabled');
      // }
      // else {
      //   this.input.keyboard.removeKey(this.cursors.up);
      //   this.input.keyboard.removeKey(this.cursors.down);
      //   this.input.keyboard.removeKey(this.cursors.left);
      //   this.input.keyboard.removeKey(this.cursors.right);
      //   this.input.keyboard.removeKey(this.cursors.space);
      //   this.input.keyboard.enabled = false;
      //   // console.log('in game arrow keys disabled');
      // }


      //makes it so that variables left, right, up, and down are not checked for while undefined when user is focused on chat div
      if (avatarSelected == true) {
        //console.log('avatarSelected = ', avatarSelected);
        if (chatFocused == false) {
          //console.log('chatFocused = ', chatFocused);
          const left = this.leftKeyPressed;
          const right = this.rightKeyPressed;
          const up = this.upKeyPressed;
          const down = this.downKeyPressed;

          if (this.cursors.left.isDown && this.cursors.right.isDown) {
            this.leftKeyPressed = false;
            this.rightKeyPressed = false;
            // console.log('Left and Right Keys are pressed at the same time...');
          } else if (this.cursors.left.isDown) {
            this.leftKeyPressed = true;
            // console.log('Left Key only is pressed...');
          } else if (this.cursors.right.isDown) {
            this.rightKeyPressed = true;
            // console.log('Right Keyonly is pressed...');
          }

          if (this.cursors.up.isDown && this.cursors.down.isDown) {
            this.upKeyPressed = false;
            this.downKeyPressed = false;
            // console.log('Up and Down Keys are pressed at the same time...');
          } else if (this.cursors.up.isDown) {
            this.upKeyPressed = true;
            //console.log('Up Key only is pressed...');
          } else if (this.cursors.down.isDown) {
            this.downKeyPressed = true;
            // console.log('Down Keyonly is pressed...');
          }

          if (this.cursors.up.isUp) {
            this.upKeyPressed = false;
          }
          if (this.cursors.down.isUp) {
            this.downKeyPressed = false;
          }
          if (this.cursors.left.isUp) {
            this.leftKeyPressed = false;
          }
          if (this.cursors.right.isUp) {
            this.rightKeyPressed = false;
          }

          if (left !== this.leftKeyPressed || right !== this.rightKeyPressed || up !== this.upKeyPressed || down !== this.downKeyPressed) {
            this.socket.emit('playerInput', { left: this.leftKeyPressed , right: this.rightKeyPressed, up: this.upKeyPressed, down: this.downKeyPressed, door: localPlayerInfo.door });
            localPlayerInfo.door = '';
          }
        }
      }
    }
  </script>
</section>
