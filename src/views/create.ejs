<section id ="characterCreator">
  <div class="container">
    <div id="characterCreatorUi">
      <div id="primaryButtons">
        <ul>
          <li><button type="button" id="gender" class="button main" style="vertical-align:middle"><span>Style </span></button></li>
          <li><button type="button" id="about" class="button main" style="vertical-align:middle"><span>About </span></button></li>
          <li><button type="button" id="kinks" class="button main" style="vertical-align:middle"><span>Kinks </span></button></li>
          <li><button type="button" id="vore" class="button main" style="vertical-align:middle"><span>Vore </span></button></li>
        </ul>
      </div>


<% if (charList == 'new') { %><form action="/api/user/createcharacter" method="POST"><% } else {%><form action="/api/user/editcharacter" method="POST"><%}%>

  <div id ="genderPullout" class="pullout">
    <div id ="collapsibleBox">
      <button type="button" class="collapsible" style="font-size: 30px;"><span>&#65086;</span><span> &#9892; </span><span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <select name="bodyShape" id="bodyShape">
              <option value = "F-">Feminine</option>
              <option value = "M-">Masculine (unavailable)</option>
            </select>
            <select name="genitles" id="genitles">
              <option value = "empty">Vagina (unavailable)</option>
              <option value = "empty">Penis (unavailable)</option>
              <option value = "empty">Both (unavailable)</option>
            </select>
          </div></li>
        </ul>
      </div>



      <button type="button" class="collapsible"><span>&#65086;</span> Head <span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Head:<br>
              <select name="head" id="head">
                <option value = "head_01">Vulpine</option>
                <option value = "head_02">Canine</option>
                <option value = "head_03">Feline</option>
                <option value = "head_04">Bunny</option>
                <option value = "head_05">Avian</option>
                <option value = "head_06">Reptile</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="headColorBtn" class="selected"></button> -->
              <div id="headColorBtn">

              </div>
            </div>

            <div class="dropDownDivide" style="display:none">
              <br>
              <input id="beakSprite" name="beakSprite" type="text" autocomplete="off" class="hexReadOut" placeholder="Beak Sprite" aria-label="Beak Sprite" ></input>
            </div>
            <div id="sneakyBeak">
              <div class="colorDivide">
                Beak Color:
                <br>
                <!-- <button type="button" id="headColorBtn" class="selected"></button> -->
                <div id="beakColorBtn">

                </div>
              </div>
            </div>
          </div>
        </li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Secondary Fur:<br>
              <select name="headSecondaryFur" id="headSecondaryFur">
                <option value="empty">None</option>
                <!-- <option value="head_01-secondary_01">Half Mask</option>
                <option value="head_01-secondary_02">Full Mask</option>
                <option value="head_01-secondary_03">Single Stripe</option>
                <option value="head_01-secondary_04">Around Eyes</option>
                <option value="head_01-secondary_05">Snout Only</option> -->
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="secondaryHeadColorBtn" class="selected"></button> -->
              <div id="secondaryHeadColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Accent Fur: <br>
              <select name="headAccentFur" id="headAccentFur">
                <option value="empty">None</option>
                <!-- <option value="head_01-secondary_01">Half Mask</option>
                <option value="head_01-secondary_02">Full Mask</option>
                <option value="head_01-secondary_03">Stripes</option>
                <option value="head_01-secondary_04">Around Eyes</option>
                <option value="head_01-secondary_05">Snout Only</option> -->
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentHeadColorBtn" class="selected"></button> -->
              <div id="accentHeadColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Hair: <br>
              <select name="hair" id="hair">
                <option value="empty">None</option>
                <option value="hair-front_01">Short Bob</option>
                <option value="hair-front_02">Pony Tail</option>
                <option value="hair-front_03">Covers Eye</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="hairColorBtn" class="selected"></button> -->
              <div id="hairColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Ears: <br>
              <select name="outerEar" id="outerEar">
                <option value="empty">None</option>
                <option value="ears_01-outer">Perky and Pointy</option>
                <option value="ears_02-outer">Floppy</option>
                <option value="ears_03-outer">Smol and Pointy</option>
                <option value="ears_04-outer">Long and Tall</option>
                <option value="ears_05-outer">Long and Loppy</option>
                <option value="ears_06-outer">Split Tip</option>
                <option value="ears_07-outer">From Sides</option>
                <option value="ears_08-outer">Deer/Cow</option>
                <option value="ears_09-outer">Mouse/Rat</option>
                <option value="ears_10-outer">Squirrel</option>
                <option value="ears_11-outer">Lynx</option>
                <!-- <option value="ear_01">Innear Ear Floof</option> -->
              </select>
              <input id="innerEar" name="innerEar" style="display: none;" type="text" autocomplete="off" class="hexReadOut" placeholder="inner ear Sprite" aria-label="inner ear Sprite" ></input>
            </div>
            <div class="colorDivide">
              Outer Color: <br>
              <!-- <button type="button" id="earColorBtn" class="selected"></button> -->
              <div id="outerEarColorBtn">

              </div>
            </div>
            <div class="colorDivide">
              Inner Color: <br>
              <!-- <button type="button" id="earColorBtn" class="selected"></button> -->
              <div id="innerEarColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Eye Color:<br>
              <input id="eyesIris" name="eyesIris" style="display: none;" type="text" autocomplete="off" class="hexReadOut" placeholder="Iris Sprite" aria-label="Iris Sprite" ></input>
              <input id="eyesOuter" name="eyesOuter" style="display: none;" type="text" autocomplete="off" class="hexReadOut" placeholder="Outer Sprite" aria-label="Outer Sprite" ></input>
            </div>
            <div class="colorDivide">
              <!-- <button type="button" id="eyeColorBtn" class="selected"></button> -->
              <div id="eyeColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Head Accessories: <br>
              <select name="headAccessories" id="headAccessories">
                <option value="empty">None</option>
                <option value="headAccessories_01">Nubby horns</option>
                <option value="headAccessories_02">Antlers</option>
                <option value="headAccessories_03">Dragon Horns</option>
                <option value="headAccessories_04">Antenna</option>
                <option value="headAccessories_05">Unicorn Horn</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="headAccessoriesColorBtn" class="selected"></button> -->
              <div id="headAccessoriesColorBtn">

              </div>
            </div>
          </div></li>
        </ul>
      </div>
      <button type="button" class="collapsible"><span>&#65086;</span> Body <span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Body:
              <br>
              <select name="mainBodyType" id="mainBodyType">
                <option value="body_01">Anthropomorphic</option>
                <option value="body_02">Taur</option>
                <option value="body_03">Naga</option>
                <option value="body_04">Drider</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="bodyColorBtn" class="selected"></button> -->
              <div id="bodyColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Secondary Fur: <br>
              <select name="bodySecondaryFur" id="bodySecondaryFur">
                <!-- <option value="-empty">None</option>
                <option value="-secondary_01">Belly</option>
                <option value="-secondary_02">Chest to Thighs</option>
                <option value="-secondary_03">Chest, Thighs, and Underarms</option>
                <option value="-secondary_04">Scales</option> -->
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="secondaryBodyColorBtn" class="selected"></button> -->
              <div id="secondaryBodyColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Accent Fur: <br>
              <select name="bodyAccentFur" id="bodyAccentFur">
                <!-- <option value="-empty">None</option>
                <option value="-accent_01">Stripes</option>
                <option value="-accent_02">Spots</option>
                <option value="-empty">none</option> -->
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentBodyColorBtn" class="selected"></button> -->
              <div id="accentBodyColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Hands: <br>
              <select name="handsFur" id="handsFur">
                <!-- <option value="-empty">None</option>
                <option value="-hands-secondary_01">Hands(Short "gloves")</option>
                <option value="-hands-secondary_02">Hands(Long "gloves")</option> -->
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentBodyColorBtn" class="selected"></button> -->
              <div id="handsColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Feet: <br>
              <select name="feetFur" id="feetFur">
                <!-- <option value="-empty">None</option>
                <option value="-feet-secondary_01">Feet(Short "socks")</option>
                <option value="-feet-secondary_02">Feet(Long "socks")</option> -->
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentBodyColorBtn" class="selected"></button> -->
              <div id="feetColorBtn">

              </div>
            </div>
          </div></li>
        </ul>
      </div>
      <button type="button" class="collapsible"><span>&#65086;</span> Tail <span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Tail: <br>
              <select name="tail" id="tail">
                <option value="tail_01">Vulpine</option>
                <option value="tail_02">Canine</option>
                <option value="tail_03">Feline</option>
                <option value="tail_04">Rabbit</option>
                <option value="tail_05">Avian</option>
                <option value="tail_06">Reptile</option>
                <option value="tail_07">Equine</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="tailColorBtn" class="selected"></button> -->
              <div id="tailColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Secondary Fur: <br>
              <select name="tailSecondaryFur" id="tailSecondaryFur">
                <option value="empty">None</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="secondaryTailColorBtn" class="selected"></button> -->
              <div id="secondaryTailColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Accent Fur: <br>
              <select name="tailAccentFur" id="tailAccentFur">
                <option value="empty">None</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentTailColorBtn" class="selected"></button> -->
              <div id="accentTailColorBtn">

              </div>
            </div>
          </div></li>
        </ul>
      </div>
    </div>
        <div class="info">
          <!-- <ul class="partsSelections">
            <li><div id= "test1">
              Primary Color:<br>
              <button type="button" id="primary" class="selected"></button>
            </div></li>
            <li><div id= "test2">
              Secondary Color:<br>
              <button type="button" id="secondary" class="selected"></button>
            </div></li>
            <li><div id="test3">
              Accent Color:<br>
              <button type="button" id="accent" class="selected"></button>
            </div></li>
            <li><div id="test4">
              Eye Color:<br>
              <button type="button" id="eyeColor" class="selected"></button>
            </div></li>
          </ul> -->
        </div>
        <div class="colorContainer">
        <!-- <canvas id="color-picker"></canvas>
        <br>-->
        <div class="hexContainer">
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="primaryHeadHex" name="primaryHeadColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value" ></input>
        </div>
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="beakHex" name="beakHex" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value" ></input>
        </div>
         <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="secondaryHeadHex" name="secondaryHeadColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Primary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="accentHeadHex" name="accentHeadColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="hairHex" name="hairColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
          <!-- Color Hex Value: <br> -->
          <input id="outerEarHex" name="outerEarColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
          <!-- Color Hex Value: <br> -->
          <input id="innerEarHex" name="innerEarColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
        </div>
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="eyesHex" name="eyesColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
        </div>
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="headAccessoriesHex" name="headAccessoriesColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="bodyHex" name="bodyColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Primary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="secondaryBodyHex" name="secondaryBodyColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="accentBodyHex" name="accentBodyColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Accent Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="handsHex" name="handsColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="feetHex" name="feetColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="tailHex" name="tailColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Body's Primary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="secondaryTailHex" name="secondaryTailColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Body's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="accentTailHex" name="accentTailColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Body's Accent Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
      </div>
    </div>
  </div>
      <div id ="aboutPullout" class="pullout">
        <div id="playerInformation">
          <div id="nameInput">
            <label for="firstName">First Name:</label>
            <br>
            <input id="firstName" name="firstName" type="text" autocomplete="off" class="form-control" placeholder="First Name" aria-label="First Name"></input>
            <br>
            <label for="lastName">Last Name:</label><br>
            <input id="lastName" name="lastName" type="text" autocomplete="off" class="form-control" placeholder="Last Name" aria-label="Last Name"></input>
            <br>
            <label for="nickName">Nick Name:</label><br>
            <input id="nickName" name="nickName" type="text" autocomplete="off" class="form-control" placeholder="Nick Name" aria-label="Nick Name"></input>
            <br>
            <label for="speciesName">Species Name:</label>
            <br>
            <input id="speciesName" name="speciesName" type="text" autocomplete="off" class="form-control" placeholder="Species Name" aria-label="Species Name"></input>
            <div id="pronouns">
              <label>Preferred Pronouns:</label>
              <label for="she/her" class="radioContainer"> She/Her
                <input id="she/her" type="radio" name="pronouns" value="1">
                <span class="checkmark"></span>
              </label>

              <label for="he/his" class="radioContainer"> He/His
                <input id="he/his" type="radio" name="pronouns" value="2">
                <span class="checkmark"></span>
              </label>
            </div>
          </div>
          <div id="detailsInput">
            <div id="descriptionInput">
              <button type="button" class="collapsible">In Character Description</button>
              <div class="content active">
                Input Character Description here: <br> <textarea id="icDescrip" name="icDescrip" autocomplete="off" class="form-control" placeholder="In Character Description..." aria-label="description"></textarea>
              </div>

              <button type="button" class="collapsible">Out of Character Description</button>
              <div class="content">
                Input Character Description here: <br> <textarea id="oocDescrip" type="text" name="oocDescrip" autocomplete="off" class="form-control" placeholder="Out of Charactrer Description" aria-label="description"></textarea>
              </div>
            </div>
          </div>
        </div>
      </div>



      <div id ="kinksPullout" class="pullout">
        <div id="kinksInput">
          <ul>
            <li>
              Oral Vore
              <div class="rating">
                <input type="radio" name="ovStar" id="ovStar1" value="1"><label for="ovStar1"> </label>
                <input type="radio" name="ovStar" id="ovStar2" value="2"><label for="ovStar2"> </label>
                <input type="radio" name="ovStar" id="ovStar3" value="3"><label for="ovStar3"> </label>
                <input type="radio" name="ovStar" id="ovStar4" value="4"><label for="ovStar4"> </label>
                <input type="radio" name="ovStar" id="ovStar5" value="5"><label for="ovStar5"> </label>
              </div>
            </li>
            <li>
              Anal Vore
              <div class="rating">
                <input type="radio" name="avStar" id="avStar1" value="1"><label for="avStar1"> </label>
                <input type="radio" name="avStar" id="avStar2" value="2"><label for="avStar2"> </label>
                <input type="radio" name="avStar" id="avStar3" value="3"><label for="avStar3"> </label>
                <input type="radio" name="avStar" id="avStar4" value="4"><label for="avStar4"> </label>
                <input type="radio" name="avStar" id="avStar5" value="5"><label for="avStar5"> </label>
              </div>
            </li>
            <li>
              Cock Vore
              <div class="rating">
                <input type="radio" name="cvStar" id="cvStar1" value="1"><label for="cvStar1"> </label>
                <input type="radio" name="cvStar" id="cvStar2" value="2"><label for="cvStar2"> </label>
                <input type="radio" name="cvStar" id="cvStar3" value="3"><label for="cvStar3"> </label>
                <input type="radio" name="cvStar" id="cvStar4" value="4"><label for="cvStar4"> </label>
                <input type="radio" name="cvStar" id="cvStar5" value="5"><label for="cvStar5"> </label>
              </div>
            </li>
            <li>
              Unbirth
              <div class="rating">
                <input type="radio" name="ubStar" id="ubStar1" value="1"><label for="ubStar1"> </label>
                <input type="radio" name="ubStar" id="ubStar2" value="2"><label for="ubStar2"> </label>
                <input type="radio" name="ubStar" id="ubStar3" value="3"><label for="ubStar3"> </label>
                <input type="radio" name="ubStar" id="ubStar4" value="4"><label for="ubStar4"> </label>
                <input type="radio" name="ubStar" id="ubStar5" value="5"><label for="ubStar5"> </label>
              </div>
            </li>
            <li>
              Tail Vore
              <div class="rating">
                <input type="radio" name="tvStar" id="tvStar1" value="1"><label for="tvStar1"> </label>
                <input type="radio" name="tvStar" id="tvStar2" value="2"><label for="tvStar2"> </label>
                <input type="radio" name="tvStar" id="tvStar3" value="3"><label for="tvStar3"> </label>
                <input type="radio" name="tvStar" id="tvStar4" value="4"><label for="tvStar4"> </label>
                <input type="radio" name="tvStar" id="tvStar5" value="5"><label for="tvStar5"> </label>
              </div>
            </li>
            <li>
              Absorbtion
              <div class="rating">
                <input type="radio" name="absStar" id="absStar1" value="1"><label for="absStar1"> </label>
                <input type="radio" name="absStar" id="absStar2" value="2"><label for="absStar2"> </label>
                <input type="radio" name="absStar" id="absStar3" value="3"><label for="absStar3"> </label>
                <input type="radio" name="absStar" id="absStar4" value="4"><label for="absStar4"> </label>
                <input type="radio" name="absStar" id="absStar5" value="5"><label for="absStar5"> </label>
              </div>
            </li>
            <li>
              Soul Vore
              <div class="rating">
                <input type="radio" name="svStar" id="svStar1" value="1"><label for="svStar1"> </label>
                <input type="radio" name="svStar" id="svStar2" value="2"><label for="svStar2"> </label>
                <input type="radio" name="svStar" id="svStar3" value="3"><label for="svStar3"> </label>
                <input type="radio" name="svStar" id="svStar4" value="4"><label for="svStar4"> </label>
                <input type="radio" name="svStar" id="svStar5" value="5"><label for="svStar5"> </label>
              </div>
            </li>
          </ul>
          <ul>
            <li>
              Being Predator
              <div class="rating">
                <input type="radio" name="predStar" id="predStar1" value="1"><label for="predStar1"> </label>
                <input type="radio" name="predStar" id="predStar2" value="2"><label for="predStar2"> </label>
                <input type="radio" name="predStar" id="predStar3" value="3"><label for="predStar3"> </label>
                <input type="radio" name="predStar" id="predStar4" value="4"><label for="predStar4"> </label>
                <input type="radio" name="predStar" id="predStar5" value="5"><label for="predStar5"> </label>
              </div>
            </li>
            <li>
              Being Prey
              <div class="rating">
                <input type="radio" name="preyStar" id="preyStar1" value="1"><label for="preyStar1"> </label>
                <input type="radio" name="preyStar" id="preyStar2" value="2"><label for="preyStar2"> </label>
                <input type="radio" name="preyStar" id="preyStar3" value="3"><label for="preyStar3"> </label>
                <input type="radio" name="preyStar" id="preyStar4" value="4"><label for="preyStar4"> </label>
                <input type="radio" name="preyStar" id="preyStar5" value="5"><label for="preyStar5"> </label>
              </div>
            </li>
            <li>
              Soft Vore
              <div class="rating">
                <input type="radio" name="softStar" id="softStar1" value="1"><label for="softStar1"> </label>
                <input type="radio" name="softStar" id="softStar2" value="2"><label for="softStar2"> </label>
                <input type="radio" name="softStar" id="softStar3" value="3"><label for="softStar3"> </label>
                <input type="radio" name="softStar" id="softStar4" value="4"><label for="softStar4"> </label>
                <input type="radio" name="softStar" id="softStar5" value="5"><label for="softStar5"> </label>
              </div>
            </li>
            <li>
              Hard Vore
              <div class="rating">
                <input type="radio" name="hardStar" id="hardStar1" value="1"><label for="hardStar1"> </label>
                <input type="radio" name="hardStar" id="hardStar2" value="2"><label for="hardStar2"> </label>
                <input type="radio" name="hardStar" id="hardStar3" value="3"><label for="hardStar3"> </label>
                <input type="radio" name="hardStar" id="hardStar4" value="4"><label for="hardStar4"> </label>
                <input type="radio" name="hardStar" id="hardStar5" value="5"><label for="hardStar5"> </label>
              </div>
            </li>
            <li>
              Digestion
              <div class="rating">
                <input type="radio" name="digestionStar" id="digestionStar1" value="1"><label for="digestionStar1"> </label>
                <input type="radio" name="digestionStar" id="digestionStar2" value="2"><label for="digestionStar2"> </label>
                <input type="radio" name="digestionStar" id="digestionStar3" value="3"><label for="digestionStar3"> </label>
                <input type="radio" name="digestionStar" id="digestionStar4" value="4"><label for="digestionStar4"> </label>
                <input type="radio" name="digestionStar" id="digestionStar5" value="5"><label for="digestionStar5"> </label>
              </div>
            </li>
            <li>
              Disposal
              <div class="rating">
                <input type="radio" name="disposalStar" id="disposalStar1" value="1"><label for="disposalStar1"> </label>
                <input type="radio" name="disposalStar" id="disposalStar2" value="2"><label for="disposalStar2"> </label>
                <input type="radio" name="disposalStar" id="disposalStar3" value="3"><label for="disposalStar3"> </label>
                <input type="radio" name="disposalStar" id="disposalStar4" value="4"><label for="disposalStar4"> </label>
                <input type="radio" name="disposalStar" id="disposalStar5" value="5"><label for="disposalStar5"> </label>
              </div>
            </li>
          </ul>
          <ul>
            <li>
              Transformation
              <div class="rating">
                <input type="radio" name="tfStar" id="tfStar1" value="1"><label for="tfStar1"> </label>
                <input type="radio" name="tfStar" id="tfStar2" value="2"><label for="tfStar2"> </label>
                <input type="radio" name="tfStar" id="tfStar3" value="3"><label for="tfStar3"> </label>
                <input type="radio" name="tfStar" id="tfStar4" value="4"><label for="tfStar4"> </label>
                <input type="radio" name="tfStar" id="tfStar5" value="5"><label for="tfStar5"> </label>
              </div>
            </li>
            <li>
              Body Part Transformation
              <div class="rating">
                <input type="radio" name="btfStar" id="btfStar1" value="1"><label for="btfStar1"> </label>
                <input type="radio" name="btfStar" id="btfStar2" value="2"><label for="btfStar2"> </label>
                <input type="radio" name="btfStar" id="btfStar3" value="3"><label for="btfStar3"> </label>
                <input type="radio" name="btfStar" id="btfStar4" value="4"><label for="btfStar4"> </label>
                <input type="radio" name="btfStar" id="btfStar5" value="5"><label for="btfStar5"> </label>
              </div>
            </li>
            <li>
              Body Swapping
              <div class="rating">
                <input type="radio" name="bsStar" id="bsStar1" value="1"><label for="bsStar1"> </label>
                <input type="radio" name="bsStar" id="bsStar2" value="2"><label for="bsStar2"> </label>
                <input type="radio" name="bsStar" id="bsStar3" value="3"><label for="bsStar3"> </label>
                <input type="radio" name="bsStar" id="bsStar4" value="4"><label for="bsStar4"> </label>
                <input type="radio" name="bsStar" id="bsStar5" value="5"><label for="bsStar5"> </label>
              </div>
            </li>
            <li>
              Gender Transformation
              <div class="rating">
                <input type="radio" name="gStar" id="gStar1" value="1"><label for="gStar1"> </label>
                <input type="radio" name="gStar" id="gStar2" value="2"><label for="gStar2"> </label>
                <input type="radio" name="gStar" id="gStar3" value="3"><label for="gStar3"> </label>
                <input type="radio" name="gStar" id="gStar4" value="4"><label for="gStar4"> </label>
                <input type="radio" name="gStar" id="gStar5" value="5"><label for="gStar5"> </label>
              </div>
            </li>
            <li>
              Species Transformation
              <div class="rating">
                <input type="radio" name="sStar" id="sStar1" value="1"><label for="sStar1"> </label>
                <input type="radio" name="sStar" id="sStar2" value="2"><label for="sStar2"> </label>
                <input type="radio" name="sStar" id="sStar3" value="3"><label for="sStar3"> </label>
                <input type="radio" name="sStar" id="sStar4" value="4"><label for="sStar4"> </label>
                <input type="radio" name="sStar" id="sStar5" value="5"><label for="sStar5"> </label>
              </div>
            </li>
            <li>
              Inanimate Object Transformation
              <div class="rating">
                <input type="radio" name="iaoStar" id="iaoStar1" value="1"><label for="iaoStar1"> </label>
                <input type="radio" name="iaoStar" id="iaoStar2" value="2"><label for="iaoStar2"> </label>
                <input type="radio" name="iaoStar" id="iaoStar3" value="3"><label for="iaoStar3"> </label>
                <input type="radio" name="iaoStar" id="iaoStar4" value="4"><label for="iaoStar4"> </label>
                <input type="radio" name="iaoStar" id="iaoStar5" value="5"><label for="iaoStar5"> </label>
              </div>
            </li>
          </ul>
        </div>
      </div>

      <div id ="vorePullout" class="pullout">
        <div id="voreTypes">
          <h1>Input Vore Types Here</h1>
          <ul id="voreList">

          </ul>
          <button type="button" id="addVore" class="button main"><span>Add New Vore</span></button>
        </div>

        <!-- <a href="gameindex.html" id="finish" class="button main" style="vertical-align:middle">Finish</a> -->
      </div>

      <div id="previewContainer">
        <div id="previewAndButtons">
          <div id="preview">

          </div>
          <div id ="previewRotation">
            <button type ="button" id="rotateLeft" class="button left rotate" style="vertical-align:middle"><span> </span></button>

            <button type ="button" id="rotateRight" class="button right rotate" style="vertical-align:middle"><span> </span></button>
          </div>
        </div>
        <div id="previewModifierButtons">
          <div>
            <div>
              Randomize:<br>
              <button type="button" id="randomizer" class="button random" style="vertical-align:middle"><span> </span></button>
            </div>

            <div>
              Reset to Default:<br>
              <button type="button" id="resetMainDefaults" class="button reset" style="vertical-align:middle"><span> </span></button>
            </div>
          </div>
          <div id="mainColorSelection">
            <div class="mainColorSelectionContainer">
              Default Primary Color:<br>
              <div class="mainPrimaryColorBtn">

              </div>
            </div>
            <div class="mainColorSelectionContainer">
              Default Secondary Color:<br>
              <div id="mainSecondaryColorBtn">

              </div>
            </div>
            <div class="mainColorSelectionContainer">
              Default Accent Color:<br>
              <div id="mainAccentColorBtn">

              </div>
            </div>
          </div>
        </div>
      </div>

      <div id="buttonHolder">
        <button type="button" id="next" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="button" id="next2" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="button" id="next3" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="submit" id="finish" class="button main" style="vertical-align:middle"><span>Finish</span></button>
      </div>
    </form>
  </div>
</section>


<script src="https://cdn.jsdelivr.net/npm/phaser@3.24.1/dist/phaser.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.es5.min.js"></script>


<script>
  function hex_from_int(color_int) {
    // Extract RGB components
    let red = (color_int >> 16) & 0xFF;
    let green = (color_int >> 8) & 0xFF;
    let blue = color_int & 0xFF;

    // Swap red and blue components
    let hex_str = ((blue << 16) | (green << 8) | red).toString(16);

    // Pad with leading zeros if necessary
    while (hex_str.length < 6) {
      hex_str = "0" + hex_str;
    }

    return "#" + hex_str.toUpperCase();
  }
  var rawCharList = `<%- JSON.stringify(charList)
    .replace(/\\/g, '\\\\')
    .replace(/'/g, '\\\'')
    .replace(/"/g, '&quot;')
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029') %>`;
    var charList = JSON.parse(rawCharList.replace(/&quot;/g, '"'));
    console.log('Top of the list charList = ', charList); 

  if (charList == 'new') {
      
      console.log('NEW charList = ', charList);
      var initialSetup = false;

      var localPlayerInfo = {
        Identifier:'',
        playerId:'',
        Username:'',
        Description:'',
        head: {
          sprite: 'head_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        bodyShape: {
          sprite:'F-'
        },
        body: {
          sprite: 'body_01',
          color: '0xe0e0e0',
          secondarySprite: 'body_01-empty',
          secondaryColor: '0xffffff',
          accentSprite: 'body_01-empty',
          accentColor: '0x636363'
        },
        hands: {
            sprite: 'body_01-empty',
            color: '0xe0e0e0',

        },
        feet: {
            sprite: 'body_01-empty',
            color: '0xe0e0e0',

        },
        tail: {
          sprite: 'tail_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        eyes: {
          outer: 'eyes_02',
          iris: 'eyes_01',
          color: '0xfcf2f2'
        },
        hair: {
          sprite: 'empty',
          color: '0x636363'
        },
        headAccessories: {
          sprite: 'empty',
          color: '0xffffff'
        },
        ear: {
          outerSprite: 'ears_01-outer',
          innerSprite: 'ears_01-inner',
          outerColor: '0xe0e0e0',
          innerColor: '0x636363'
        },
        beak: {
          sprite: 'empty',
          color: '0xffffff'
        },
        genitles:{
          sprite: 'empty',
          secondarySprite: 'empty'
        },
        ratings: {
          ovStar: 0,
          avStar: 0,
          cvStar: 0,
          ubStar: 0,
          tvStar: 0,
          absStar: 0,
          svStar: 0,
          predStar: 0,
          preyStar: 0,
          softStar: 0,
          hardStar: 0,
          digestionStar: 0,
          disposalStar: 0,
          tfStar: 0,
          btfStar: 0,
          bsStar: 0,
          gStar: 0,
          sStar: 0,
          iaoStar: 0
        },
        specialList:[],
        spellInventory:[],
        consumedBy:'',
        input: {
          left: false,
          right: false,
          up: false,
          down: false
        }
      };

      var voreList = [
        { destination: "Stomach",
          verb: "shoves",
          digestionTimer: "120",
          animation: "1",
          destinationDescrip: "The walls feel hot and slimy as they constrict around you.",
          examineMsgDescrip: "<pred>'s belly looks as though something inside is moving...",
          struggleInsideMsgDescrip: "Pressing against the slimy walls doesn't seem to get much of a reaction from <pred>.",
          struggleOutsideMsgDescrip: "<pred>'s belly bulges out with the outline of a hand print for a moment before returning to it's distended shape.",
          digestionInsideMsgDescrip: "You finally feel your body succumb and are reduced to mush for <pred> to absorb.",
          digestionOutsideMsgDescrip: "The constant movement inside <pred>'s middle finally goes still as a soft gurgling sound comes from their belly."
        } ,
        { destination: "Bowels",
          verb: "forces",
          digestionTimer: "120",
          animation: "2",
          destinationDescrip: "You feel the musky walls of <pred>'s digestive tract undulating around you as you are shoved up their ass.",
          examineMsgDescrip: "<pred>'s lower abdomen seems to be swollen out quite a lot...did something just move?",
          struggleInsideMsgDescrip: "Wriggling about only seems to make that tight fleshy tube squeeze tighter around your body.",
          struggleOutsideMsgDescrip: "The outline of a footprint forms against the surface of <pred>'s lower belly",
          digestionInsideMsgDescrip: "A final powerful squeeze of the muscles around you causes your body to give out and you become a puddle of nutrients to feed <pred>",
          digestionOutsideMsgDescrip: "<pred>'s tummy seems to shrink some as it lets out a satisfied burbling sound."
        },
        { destination: "Balls",
          verb: "presses",
          digestionTimer: "120",
          animation: "3",
          destinationDescrip: "You fall down into a thick, musky puddle of jizz that immediately starts coating your body and you feel the wrinkly walls of <pred>'s scrotum tighten up to welcome you~",
          examineMsgDescrip: "A large bulge between their thighs seems to shift and sway on it's own.",
          struggleInsideMsgDescrip: "The walls of your prison seem to give easily when you push out against them, but they always clench right back down the moment you relax...",
          struggleOutsideMsgDescrip: "A very clear imprint of someone's face bulges out from the side of <pred>'s nutsack.",
          digestionInsideMsgDescrip: "The walls around you suddenly cinch up tightly submerging your head completely in <pred>'s sperm before you finally melt, becoming one with the pool of seed you had been bathing in.",
          digestionOutsideMsgDescrip: "There are a few frantic garbled sounds seeming to come up from <pred>'s crotch before there was a sudden, thick sounding, GLORP and those frantic sounds were reduced to a soft sloshing."
        },
        { destination: "Womb",
          verb: "slurps",
          digestionTimer: "120",
          animation: "4",
          destinationDescrip: "You are wholly enveloped in a humid heat as you are deposited into a wet and slimy chamber. The air is filled with the scent of <pred>'s arousal and their heart can be heard beating just above.",
          examineMsgDescrip: "<pred>'s tummy looks swollen... could they be pregnant?",
          struggleInsideMsgDescrip: "Struggling seems to do little good, but you do feel the gentle rubbing of <pred>'s hand over your shape as they press the bulges you make back into their core.",
          struggleOutsideMsgDescrip: "<pred>'s distended belly seems to rock and sway on it's own, they coo softly and seem to rub over their middle affectionately.",
          digestionInsideMsgDescrip: "Your body seems to feel soggy and wet as the heat surrounding you grows more intense. The walls seem to flex down harder and harder until finally... splorsh! You succumb to <pred>'s arousal and are reduced to a pool of fem-cum.",
          digestionOutsideMsgDescrip: "<pred>'s middle suddenly compacts down noticeably and their face flushes red as they bite their lower lip. A muffled sloshing sound could be heard seemingly coming from their belly!"
        }
      ];
  } else {
      
      console.log('EDITING charList = ', charList);
      var localPlayerInfo = charList;
      var initialSetup = true;
      console.log('localPlayerInfo at start = ', localPlayerInfo);
      if(charList.firstName == 'undefined' || charList.firstName == null) {
        charList.firstName = '';
      }else{
        document.getElementById('firstName').value = charList.firstName;
      }
      
      document.getElementById('lastName').value = charList.lastName;
      document.getElementById('nickName').value = charList.nickName;
      document.getElementById('speciesName').value = charList.speciesName;
      if (charList.pronouns == 1){
        document.getElementById('she/her').value = charList.pronouns;
        document.getElementById('she/her').checked = true;
      }
      if (charList.pronouns == 2){
        document.getElementById('he/his').value = charList.pronouns;
        document.getElementById('he/his').checked = true;
      }
      document.getElementById('icDescrip').value = charList.icDescrip;
      document.getElementById('oocDescrip').value = charList.oocDescrip;



      ratingClass = document.getElementsByClassName("rating");
      //console.log('ratingClass = ', ratingClass[0].firstElementChild.name);
      for (i = 0; i < ratingClass.length; i++) {
        const ratingName = ratingClass[i].firstElementChild.name;
        //console.log('ratingName = ', ratingName);
        var ratingGroup = document.getElementsByName(ratingName);
        //console.log('ratingGroup = ', ratingGroup);
        for (j = 0; j < ratingGroup.length; j++) {
          //console.log('ratingName = ', ratingName);
          //ratingName = 'cvStar';
          //console.log('charList.ratings = ', charList.ratings);
          // console.log('ratingGroup[j].value = ', ratingGroup[j].value, 'charList.ratings.',ratingName, ' = ', charList.ratings[ratingName]);
          if(charList.ratings[ratingName]){
            console.log('rating value exists');
          }
          if(charList.ratings[ratingName] == 'undefined' || charList.ratings[ratingName] == null) {
            charList.ratings[ratingName] = '';
            console.log('no rating value');
          }else{
            if (ratingGroup[j].value == charList.ratings[ratingName]) {
            ratingGroup[j].checked = true;
            //console.log('checking box');
          }
          }
        }
        //ratingGroup.find(setRatings);
        //setRatings(ratingName, ratingGroup);
      }

      var voreList = charList.voreTypes;
  }

  var coll = document.getElementsByClassName("collapsible");
  var i;

  for (i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
      for (i = 0; i < coll.length; i++) {
        var content = coll[i].nextElementSibling;
        content.classList.remove("active");
      }
      var content = this.nextElementSibling;
      content.classList.toggle("active");
    });
  }


  var currentVoreCount = document.getElementById("voreList").childElementCount;
  createVoreList(voreList);



  function createVoreList() {
    currentVoreCount = document.getElementById("voreList").childElementCount;
    //console.log('document.getElementById("voreList").childElementCount;', document.getElementById("voreList").childElementCount);
    if (!currentVoreCount) {

      currentVoreCount = 0;
    }
    //console.log('currentVoreCount = ', currentVoreCount);

    for(i = currentVoreCount; i < voreList.length; i++) {
      var br = document.createElement('br');
      var br2 = document.createElement('br');
      var br3 = document.createElement('br');
      var br4 = document.createElement('br');
      var li = document.createElement("li");
      var button = document.createElement("button");
      var examineButton = document.createElement('button');
      var struggleInsideButton = document.createElement('button');
      var struggleOutsideButton = document.createElement('button');
      var digestionInsideButton = document.createElement('button');
      var digestionOutsideButton = document.createElement('button');
      var div = document.createElement("div");
      var div2 = document.createElement("div");
      var div3 = document.createElement("div");
      var examineMsgDiv = document.createElement("div");
      var examineContentDiv = document.createElement("div");
      var struggleInsideContentDiv = document.createElement("div");
      var struggleOutsideContentDiv = document.createElement("div");
      var digestionInsideContentDiv = document.createElement("div");
      var digestionOutsideContentDiv = document.createElement("div");
      var destinationLbl = document.createElement('label');
      var destination = document.createElement('input');
      var destinationDescripLbl = document.createElement('label');
      var destinationDescrip = document.createElement('textarea');
      var verbLbl = document.createElement('label');
      var verb = document.createElement('input');
      var digestionTimerLbl = document.createElement('label');
      var digestionTimer = document.createElement('input');
      var animationLbl = document.createElement('label');
      var animation = document.createElement('select');
      var examineMsgLbl = document.createElement('label');
      var examineMsgDescrip = document.createElement('textarea');
      var struggleInsideMsgLbl = document.createElement('label');
      var struggleInsideMsgDescrip = document.createElement('textarea');
      var struggleOutsideMsgLbl = document.createElement('label');
      var struggleOutsideMsgDescrip = document.createElement('textarea');
      var digestionInsideMsgLbl = document.createElement('label');
      var digestionInsideMsgDescrip = document.createElement('textarea');
      var digestionOutsideMsgLbl = document.createElement('label');
      var digestionOutsideMsgDescrip = document.createElement('textarea');

      //li.className = "voreListItem";

      button.id = 'voreOption'+i;
      button.className = 'voreTypecollapsible';
      button.type = 'button';
      button.innerHTML = "<h1>" + voreList[i].destination; + "</h1>"
      li.appendChild(button);

      div.id = 'content'+i;
      div.className = "voreTypecontent";
      div2.id = 'voreClassifiers'+i;
      div2.className = 'voreClassifiers';
      div.appendChild(div2);
      div3.className = 'activityMessages'
      div.appendChild(div3);

      destinationLbl.innerHTML = 'Destination: ';
      destinationLbl.htmlFor = 'destination'+i;
      div2.appendChild(destinationLbl);
      //onkeyup='updateBttnName(event)'
      destination.id = 'destination'+i;
      destination.name = 'destination';
      destination.onkeyup = updateBttnName;
      destination.type = 'text';
      destination.autocomplete = 'off';
      destination.className = 'form-control';
      destination.placeholder = 'Destination';
      destination.ariaLabel = 'Destination';
      destination.value = voreList[i].destination;
      div2.appendChild(destination);
      div2.appendChild(br);

      verbLbl.innerHTML = 'Verb: ';
      verbLbl.htmlFor = 'verb'+i;
      div2.appendChild(verbLbl);

      verb.id = 'verb'+i;
      verb.name = 'verb';
      verb.type = 'text';
      verb.autocomplete = 'off';
      verb.className = 'form-control';
      verb.placeholder = 'Destination Verb...';
      verb.ariaLabel = 'verb';
      verb.value = voreList[i].verb;
      div2.appendChild(verb);
      div2.appendChild(br2);

      var test = document.createTextNode ('Digestion Timer: ');
      div2.appendChild(test);

      digestionTimer.id = 'digestionTimer'+i;
      digestionTimer.name = 'digestionTimer';
      digestionTimer.type = 'number';
      digestionTimer.autocomplete = 'off';
      digestionTimer.className = 'form-control';
      digestionTimer.placeholder = 'Digestion Timer (In Seconds)';
      digestionTimer.ariaLabel = 'digestionTimer';
      digestionTimer.value = voreList[i].digestionTimer;
      div2.appendChild(digestionTimer);
      div2.appendChild(br3);

      var test2 = document.createTextNode ('Animation: ');
      div2.appendChild(test2);

      animation.id = 'animation'+i;
      animation.name = 'animation';
      animation.innerHTML = '<option value="1">Oral Vore</option><option value="2">Anal Vore</option><option value="3">Cock Vore</option><option value="4">Unbirth</option><option value="5">Tail Vore</option><option value="6">Absorbtion</option>';
      animation.value = voreList[i].animation;
      div2.appendChild(animation);
      div2.appendChild(br4);

      destinationDescrip.id = 'destinationDescrip'+i;
      destinationDescrip.name = 'destinationDescrip';
      destinationDescrip.autocomplete = 'off';
      destinationDescrip.className = 'form-control';
      destinationDescrip.placeholder = "Describe the inside of the prey's destination...";
      destinationDescrip.areaLabel = 'destinationDescrip';
      destinationDescrip.innerHTML = voreList[i].destinationDescrip;
      div2.appendChild(destinationDescrip);

      examineButton.id = 'examineButton'+i;
      examineButton.className = 'actMsgcollapsible';
      examineButton.type = 'button';
      examineButton.innerHTML = "Examine Messages";
      div3.appendChild(examineButton);

      examineMsgDiv.className = 'actMsgcontent';
      //examineMsgDiv.innerHTML = 'testing activity messages';
      examineMsgLbl.innerHTML = 'Describe what people would see when examining you while this destination is "full":';
      examineMsgLbl.htmlFor = 'examineMsgDescrip'+i;
      examineMsgDiv.appendChild(examineMsgLbl);
      examineMsgDescrip.id = 'examineMsgDescrip'+i;
      examineMsgDescrip.name = 'examineMsgDescrip';
      examineMsgDescrip.autocomplete = 'off';
      examineMsgDescrip.className = 'form-control';
      examineMsgDescrip.placeholder = 'What do you look like when this destination is "full"?';
      examineMsgDescrip.areaLabel = 'examineMsgDescrip';
      examineMsgDescrip.innerHTML = voreList[i].examineMsgDescrip;
      examineMsgDiv.appendChild(examineMsgDescrip);
      div3.appendChild(examineMsgDiv);

      struggleInsideButton.id = 'struggleInsideMsgButton'+i;
      struggleInsideButton.className = 'actMsgcollapsible';
      struggleInsideButton.type = 'button';
      struggleInsideButton.innerHTML = "Struggle Messages (Interior)";
      div3.appendChild(struggleInsideButton);

      struggleInsideContentDiv.className = 'actMsgcontent';
      //struggleInsideMsgDiv.innerHTML = 'testing activity messages';
      struggleInsideMsgLbl.innerHTML = 'Describe what your prey experiances when struggling:';
      struggleInsideMsgLbl.htmlFor = 'struggleInsideMsgDescrip'+i;
      struggleInsideContentDiv.appendChild(struggleInsideMsgLbl);
      struggleInsideMsgDescrip.id = 'struggleInsideMsgDescrip'+i;
      struggleInsideMsgDescrip.name = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.autocomplete = 'off';
      struggleInsideMsgDescrip.className = 'form-control';
      struggleInsideMsgDescrip.placeholder = 'What does your prey experiance when struggling while inside this destination?';
      struggleInsideMsgDescrip.areaLabel = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.innerHTML = voreList[i].struggleInsideMsgDescrip;
      struggleInsideContentDiv.appendChild(struggleInsideMsgDescrip);
      div3.appendChild(struggleInsideContentDiv);

      struggleOutsideButton.id = 'struggleOutsideMsgButton'+i;
      struggleOutsideButton.className = 'actMsgcollapsible';
      struggleOutsideButton.type = 'button';
      struggleOutsideButton.innerHTML = "Struggle Messages (Exterior)";
      div3.appendChild(struggleOutsideButton);

      struggleOutsideContentDiv.className = 'actMsgcontent';
      //struggleOutsideMsgDiv.innerHTML = 'testing activity messages';
      struggleOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may see when your prey is struggling inside this destination:';
      struggleOutsideMsgLbl.htmlFor = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgLbl);
      struggleOutsideMsgDescrip.id = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideMsgDescrip.name = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.autocomplete = 'off';
      struggleOutsideMsgDescrip.className = 'form-control';
      struggleOutsideMsgDescrip.placeholder = 'What do others see when prey is struggling in here?';
      struggleOutsideMsgDescrip.areaLabel = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.innerHTML = voreList[i].struggleOutsideMsgDescrip;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgDescrip);
      div3.appendChild(struggleOutsideContentDiv);

      digestionInsideButton.id = 'digestionInsideMsgButton'+i;
      digestionInsideButton.className = 'actMsgcollapsible';
      digestionInsideButton.type = 'button';
      digestionInsideButton.innerHTML = "Digestion Messages (Interior)";
      div3.appendChild(digestionInsideButton);

      digestionInsideContentDiv.className = 'actMsgcontent';
      //digestionInsideMsgDiv.innerHTML = 'testing activity messages';
      digestionInsideMsgLbl.innerHTML = 'Describe what your prey may experiance in their final moments as they are digested in this destination:';
      digestionInsideMsgLbl.htmlFor = 'digestionInsideMsgDescrip'+i;
      digestionInsideContentDiv.appendChild(digestionInsideMsgLbl);
      digestionInsideMsgDescrip.id = 'digestionInsideMsgDescrip'+i;
      digestionInsideMsgDescrip.name = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.autocomplete = 'off';
      digestionInsideMsgDescrip.className = 'form-control';
      digestionInsideMsgDescrip.placeholder = 'What does your prey experiance in the moment they are completely digested here?';
      digestionInsideMsgDescrip.areaLabel = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.innerHTML = voreList[i].digestionInsideMsgDescrip;
      digestionInsideContentDiv.appendChild(digestionInsideMsgDescrip);
      div3.appendChild(digestionInsideContentDiv);

      digestionOutsideButton.id = 'digestionOutsideMsgButton'+i;
      digestionOutsideButton.className = 'actMsgcollapsible';
      digestionOutsideButton.type = 'button';
      digestionOutsideButton.innerHTML = "Digestion Messages (Exterior)";
      div3.appendChild(digestionOutsideButton);

      digestionOutsideContentDiv.className = 'actMsgcontent';
      //digestionOutsideMsgDiv.innerHTML = 'testing activity messages';
      digestionOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may notice as this destination finishes digetsing your prey:';
      digestionOutsideMsgLbl.htmlFor = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgLbl);
      digestionOutsideMsgDescrip.id = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideMsgDescrip.name = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.autocomplete = 'off';
      digestionOutsideMsgDescrip.className = 'form-control';
      digestionOutsideMsgDescrip.placeholder = 'What do others around you notice as you finish digesting prey here?';
      digestionOutsideMsgDescrip.areaLabel = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.innerHTML = voreList[i].digestionOutsideMsgDescrip;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgDescrip);
      div3.appendChild(digestionOutsideContentDiv);

      li.appendChild(div);


      button.addEventListener("click", function() {

        var voreTypecollapsible = document.getElementsByClassName("voreTypecollapsible");
        for (i = 0; i < voreTypecollapsible.length; i++) {
          var content = voreTypecollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      examineButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      struggleInsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      struggleOutsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      digestionInsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      digestionOutsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });

      document.getElementById("voreList").appendChild(li);
    }
  }

  document.querySelectorAll('input[type="text"]').forEach(function(input) {
    input.addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
      }
    });
  });

  document.querySelectorAll('input[type="number"]').forEach(function(input) {
    input.addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
      }
    });
  });

  document.querySelectorAll('input[type="radio"]').forEach(function(input) {
    input.addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
      }
    });
  });

  function updateBttnName(event) {
    //console.log(event.srcElement.id);
    //console.log('text box value = ', event.srcElement.value);
    var parent = document.getElementById(event.srcElement.id).parentElement.id;
    //console.log('parent = ', parent);
    var grandParent = document.getElementById(parent).parentElement.id;
    //console.log('grandParent = ', grandParent);

    var parentSibling = document.getElementById(grandParent).previousSibling.id;
    //console.log('grandParent = ', grandParent);
    document.getElementById(parentSibling).innerHTML = '<h1>'+event.srcElement.value+'</h1>';
  }

  gender.addEventListener("click", function() {
    console.log('gender clicked');
    document.getElementById("genderPullout").style.display = "block";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "block";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
    //document.getElementById("genderPullout").style.transform = translateX(50px);
  });
  about.addEventListener("click", function() {
    console.log('about clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "block";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
  });
  kinks.addEventListener("click", function() {
    console.log('kinks clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "block";
    document.getElementById("finish").style.display = "none";
  });
  vore.addEventListener("click", function() {
    console.log('Vore Types clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "block";
  });
  next.addEventListener("click", function() {
    console.log('next clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "block";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
  });
  next2.addEventListener("click", function() {
    console.log('next2 clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "block";
    document.getElementById("finish").style.display = "none";
  });
  next3.addEventListener("click", function() {
    console.log('next3 clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "block";
  });
  addVore.addEventListener("click", function() {
    console.log('Add New Vore clicked');
    voreList.push(
      { destination: "New Vore",
        verb: "",
        digestionTimer: "120",
        animation: "1",
        destinationDescrip: "",
        examineMsgDescrip: "",
        struggleInsideMsgDescrip: "",
        struggleOutsideMsgDescrip: "",
        digestionInsideMsgDescrip: "",
        digestionOutsideMsgDescrip: ""
      }
    );
    //var voreArray = voreList[vorelist.length - 1];
    createVoreList(voreList[voreList.length - 1]);
    console.log('voreList = ', voreList[voreList.length - 1]);
  });


  var bodySelection = 1;
  var genitleSelection = 1;
  var headSelection = 1;
  var secondaryFurSelection = 1;
  var rotation = 1;
  console.log('bodySelection = ', bodySelection);
  console.log('genitleSelection = ', genitleSelection);
  var config = {
    type: Phaser.AUTO,
    parent: 'preview',
    width: 200,
    height: 300,
    backgroundColor: '#4488aa',
    physics: {
      default: 'arcade',
      arcade: {
        debug: false,
        gravity: { y: 0 }
      }
    },
    scene: {
      preload: preload,
      create: create,
      update: update
    }
  };

  var game = new Phaser.Game(config);
  console.log('localPlayerInfo before preload = ', localPlayerInfo);

  function preload() {
    this.spritesToAnimate = []; // Initialize the array
    this.load.spritesheet('empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
    this.spritesToAnimate.push('empty');
    this.load.spritesheet('body_01-empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
    this.spritesToAnimate.push('body_01-empty');
    this.load.spritesheet('body_02-empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
    this.spritesToAnimate.push('body_02-empty');
    this.load.spritesheet('body_03-empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
    this.spritesToAnimate.push('body_03-empty');
    this.load.spritesheet('body_04-empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
    this.spritesToAnimate.push('body_04-empty');



    // Body Sprites
    this.load.spritesheet('body_01', './../assets/spritesheets/body_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01');

    // Secondary Body Sprites
    this.load.spritesheet('body_01-secondary_01', './../assets/spritesheets/body_01-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-secondary_01');
    this.load.spritesheet('body_01-secondary_02', './../assets/spritesheets/body_01-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-secondary_02');
    this.load.spritesheet('body_01-secondary_03', './../assets/spritesheets/body_01-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-secondary_03');
    this.load.spritesheet('body_01-secondary_04', './../assets/spritesheets/body_01-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-secondary_04');


    // Accent Body Sprites
    this.load.spritesheet('body_01-accent_01', './../assets/spritesheets/body_01-accent_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-accent_01');
    this.load.spritesheet('body_01-accent_02', './../assets/spritesheets/body_01-accent_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-accent_02');
    this.load.spritesheet('body_01-accent_03', './../assets/spritesheets/body_01-accent_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-accent_03');

    // Hand Secondary Sprites
    this.load.spritesheet('body_01-hands-secondary_01', './../assets/spritesheets/body_01-hands-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-hands-secondary_01');
    this.load.spritesheet('body_01-hands-secondary_02', './../assets/spritesheets/body_01-hands-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-hands-secondary_02');


    // Feet Secondary Sprites
    this.load.spritesheet('body_01-feet-secondary_01', './../assets/spritesheets/body_01-feet-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-feet-secondary_01');
    this.load.spritesheet('body_01-feet-secondary_02', './../assets/spritesheets/body_01-feet-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('body_01-feet-secondary_02');








    // Ear Sprites
    this.load.spritesheet('ears_01-outer', './../assets/spritesheets/ears_01-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_01-outer');
    this.load.spritesheet('ears_01-inner', './../assets/spritesheets/ears_01-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_01-inner');

    this.load.spritesheet('ears_02-outer', './../assets/spritesheets/ears_02-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_02-outer');
    this.load.spritesheet('ears_02-inner', './../assets/spritesheets/ears_02-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_02-inner');

    this.load.spritesheet('ears_03-outer', './../assets/spritesheets/ears_03-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_03-outer');
    this.load.spritesheet('ears_03-inner', './../assets/spritesheets/ears_03-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_03-inner');

    this.load.spritesheet('ears_04-outer', './../assets/spritesheets/ears_04-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_04-outer');
    this.load.spritesheet('ears_04-inner', './../assets/spritesheets/ears_04-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_04-inner');

    this.load.spritesheet('ears_05-outer', './../assets/spritesheets/ears_05-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_05-outer');
    this.load.spritesheet('ears_05-inner', './../assets/spritesheets/ears_05-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_05-inner');

    this.load.spritesheet('ears_06-outer', './../assets/spritesheets/ears_06-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_06-outer');
    this.load.spritesheet('ears_06-inner', './../assets/spritesheets/ears_06-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_06-inner');

    this.load.spritesheet('ears_07-outer', './../assets/spritesheets/ears_07-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_07-outer');
    this.load.spritesheet('ears_07-inner', './../assets/spritesheets/ears_07-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_07-inner');

    this.load.spritesheet('ears_08-outer', './../assets/spritesheets/ears_08-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_08-outer');
    this.load.spritesheet('ears_08-inner', './../assets/spritesheets/ears_08-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_08-inner');

    this.load.spritesheet('ears_09-outer', './../assets/spritesheets/ears_09-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_09-outer');
    this.load.spritesheet('ears_09-inner', './../assets/spritesheets/ears_09-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_09-inner');

    this.load.spritesheet('ears_10-outer', './../assets/spritesheets/ears_10-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_10-outer');
    this.load.spritesheet('ears_10-inner', './../assets/spritesheets/ears_10-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_10-inner');

    this.load.spritesheet('ears_11-outer', './../assets/spritesheets/ears_11-outer.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_11-outer');
    this.load.spritesheet('ears_11-inner', './../assets/spritesheets/ears_11-inner.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('ears_11-inner');


    // Eyes Sprites
    this.load.spritesheet('eyes_01', './../assets/spritesheets/eyes_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('eyes_01');
    this.load.spritesheet('eyes_02', './../assets/spritesheets/eyes_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('eyes_02');

    // Head Accessories
    this.load.spritesheet('headAccessories_01', './../assets/spritesheets/headAccessories_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('headAccessories_01');
    this.load.spritesheet('headAccessories_02', './../assets/spritesheets/headAccessories_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('headAccessories_02');
    this.load.spritesheet('headAccessories_03', './../assets/spritesheets/headAccessories_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('headAccessories_03');
    this.load.spritesheet('headAccessories_04', './../assets/spritesheets/headAccessories_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('headAccessories_04');
    this.load.spritesheet('headAccessories_05', './../assets/spritesheets/headAccessories_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('headAccessories_05');


    
    // Head Sprites
    this.load.spritesheet('head_01', './../assets/spritesheets/head_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_01');
    this.load.spritesheet('head_02', './../assets/spritesheets/head_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_02');
    this.load.spritesheet('head_03', './../assets/spritesheets/head_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_03');
    this.load.spritesheet('head_04', './../assets/spritesheets/head_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_04');
    this.load.spritesheet('head_05', './../assets/spritesheets/head_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_05');
    this.load.spritesheet('head_06', './../assets/spritesheets/head_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_06');


    // Secondary Head Sprites for head_01
    this.load.spritesheet('head_01-secondary_01', './../assets/spritesheets/head_01-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_01-secondary_01');
    this.load.spritesheet('head_01-secondary_02', './../assets/spritesheets/head_01-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_01-secondary_02');
    this.load.spritesheet('head_01-secondary_03', './../assets/spritesheets/head_01-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_01-secondary_03');
    this.load.spritesheet('head_01-secondary_04', './../assets/spritesheets/head_01-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_01-secondary_04');
    this.load.spritesheet('head_01-secondary_05', './../assets/spritesheets/head_01-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_01-secondary_05');

    // Secondary Head Sprites for head_02
    this.load.spritesheet('head_02-secondary_01', './../assets/spritesheets/head_02-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_02-secondary_01');
    this.load.spritesheet('head_02-secondary_02', './../assets/spritesheets/head_02-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_02-secondary_02');
    this.load.spritesheet('head_02-secondary_03', './../assets/spritesheets/head_02-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_02-secondary_03');
    this.load.spritesheet('head_02-secondary_04', './../assets/spritesheets/head_02-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_02-secondary_04');
    this.load.spritesheet('head_02-secondary_05', './../assets/spritesheets/head_02-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_02-secondary_05');

    // Secondary Head Sprites for head_03
    this.load.spritesheet('head_03-secondary_01', './../assets/spritesheets/head_03-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_03-secondary_01');
    this.load.spritesheet('head_03-secondary_02', './../assets/spritesheets/head_03-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_03-secondary_02');
    this.load.spritesheet('head_03-secondary_03', './../assets/spritesheets/head_03-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_03-secondary_03');
    this.load.spritesheet('head_03-secondary_04', './../assets/spritesheets/head_03-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_03-secondary_04');
    this.load.spritesheet('head_03-secondary_05', './../assets/spritesheets/head_03-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_03-secondary_05');

    // Secondary Head Sprites for head_04
    this.load.spritesheet('head_04-secondary_01', './../assets/spritesheets/head_04-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_04-secondary_01');
    this.load.spritesheet('head_04-secondary_02', './../assets/spritesheets/head_04-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_04-secondary_02');
    this.load.spritesheet('head_04-secondary_03', './../assets/spritesheets/head_04-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_04-secondary_03');
    this.load.spritesheet('head_04-secondary_04', './../assets/spritesheets/head_04-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_04-secondary_04');
    this.load.spritesheet('head_04-secondary_05', './../assets/spritesheets/head_04-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_04-secondary_05');

    // Secondary Head Sprites for head_05
    this.load.spritesheet('head_05_beak', './../assets/spritesheets/head_05_beak.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_05_beak');
    this.load.spritesheet('head_05-secondary_01', './../assets/spritesheets/head_05-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_05-secondary_01');
    this.load.spritesheet('head_05-secondary_02', './../assets/spritesheets/head_05-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_05-secondary_02');
    this.load.spritesheet('head_05-secondary_03', './../assets/spritesheets/head_05-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_05-secondary_03');
    this.load.spritesheet('head_05-secondary_04', './../assets/spritesheets/head_05-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_05-secondary_04');
    this.load.spritesheet('head_05-secondary_05', './../assets/spritesheets/head_05-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_05-secondary_05');

    // Secondary Head Sprites for head_06
    this.load.spritesheet('head_06-secondary_01', './../assets/spritesheets/head_06-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_06-secondary_01');
    this.load.spritesheet('head_06-secondary_02', './../assets/spritesheets/head_06-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_06-secondary_02');
    this.load.spritesheet('head_06-secondary_03', './../assets/spritesheets/head_06-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_06-secondary_03');
    this.load.spritesheet('head_06-secondary_04', './../assets/spritesheets/head_06-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_06-secondary_04');
    this.load.spritesheet('head_06-secondary_05', './../assets/spritesheets/head_06-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('head_06-secondary_05');

    // Tail Sprites
    this.load.spritesheet('tail_01', './../assets/spritesheets/tail_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_01');
    this.load.spritesheet('tail_02', './../assets/spritesheets/tail_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_02');
    this.load.spritesheet('tail_03', './../assets/spritesheets/tail_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_03');
    this.load.spritesheet('tail_04', './../assets/spritesheets/tail_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_04');
    this.load.spritesheet('tail_05', './../assets/spritesheets/tail_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_05');
    this.load.spritesheet('tail_06', './../assets/spritesheets/tail_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_06');
    this.load.spritesheet('tail_07', './../assets/spritesheets/tail_07.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_07');


    // Secondary Tail Sprites for tail_01
    this.load.spritesheet('tail_01-secondary_01', './../assets/spritesheets/tail_01-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_01-secondary_01');
    this.load.spritesheet('tail_01-secondary_02', './../assets/spritesheets/tail_01-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_01-secondary_02');
    this.load.spritesheet('tail_01-secondary_03', './../assets/spritesheets/tail_01-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_01-secondary_03');
    this.load.spritesheet('tail_01-secondary_04', './../assets/spritesheets/tail_01-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_01-secondary_04');
    this.load.spritesheet('tail_01-secondary_05', './../assets/spritesheets/tail_01-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_01-secondary_05');
    this.load.spritesheet('tail_01-secondary_06', './../assets/spritesheets/tail_01-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_01-secondary_06');

    // Secondary Tail Sprites for tail_02
    this.load.spritesheet('tail_02-secondary_01', './../assets/spritesheets/tail_02-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_02-secondary_01');
    this.load.spritesheet('tail_02-secondary_02', './../assets/spritesheets/tail_02-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_02-secondary_02');
    this.load.spritesheet('tail_02-secondary_03', './../assets/spritesheets/tail_02-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_02-secondary_03');
    this.load.spritesheet('tail_02-secondary_04', './../assets/spritesheets/tail_02-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_02-secondary_04');
    this.load.spritesheet('tail_02-secondary_05', './../assets/spritesheets/tail_02-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_02-secondary_05');
    this.load.spritesheet('tail_02-secondary_06', './../assets/spritesheets/tail_02-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_02-secondary_06');

    // Secondary Tail Sprites for tail_03
    this.load.spritesheet('tail_03-secondary_01', './../assets/spritesheets/tail_03-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_03-secondary_01');
    this.load.spritesheet('tail_03-secondary_02', './../assets/spritesheets/tail_03-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_03-secondary_02');
    this.load.spritesheet('tail_03-secondary_03', './../assets/spritesheets/tail_03-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_03-secondary_03');
    this.load.spritesheet('tail_03-secondary_04', './../assets/spritesheets/tail_03-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_03-secondary_04');
    this.load.spritesheet('tail_03-secondary_05', './../assets/spritesheets/tail_03-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_03-secondary_05');
    this.load.spritesheet('tail_03-secondary_06', './../assets/spritesheets/tail_03-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_03-secondary_06');

    // Secondary Tail Sprites for tail_04
    this.load.spritesheet('tail_04-secondary_01', './../assets/spritesheets/tail_04-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_04-secondary_01');
    this.load.spritesheet('tail_04-secondary_02', './../assets/spritesheets/tail_04-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_04-secondary_02');
    this.load.spritesheet('tail_04-secondary_03', './../assets/spritesheets/tail_04-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_04-secondary_03');
    this.load.spritesheet('tail_04-secondary_04', './../assets/spritesheets/tail_04-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_04-secondary_04');
    this.load.spritesheet('tail_04-secondary_05', './../assets/spritesheets/tail_04-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_04-secondary_05');
    this.load.spritesheet('tail_04-secondary_06', './../assets/spritesheets/tail_04-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_04-secondary_06');

    // Secondary Tail Sprites for tail_05
    this.load.spritesheet('tail_05-secondary_01', './../assets/spritesheets/tail_05-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_05-secondary_01');
    this.load.spritesheet('tail_05-secondary_02', './../assets/spritesheets/tail_05-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_05-secondary_02');
    this.load.spritesheet('tail_05-secondary_03', './../assets/spritesheets/tail_05-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_05-secondary_03');
    this.load.spritesheet('tail_05-secondary_04', './../assets/spritesheets/tail_05-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_05-secondary_04');
    this.load.spritesheet('tail_05-secondary_05', './../assets/spritesheets/tail_05-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_05-secondary_05');
    this.load.spritesheet('tail_05-secondary_06', './../assets/spritesheets/tail_05-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_05-secondary_06');

    // Secondary Tail Sprites for tail_06
    this.load.spritesheet('tail_06-secondary_01', './../assets/spritesheets/tail_06-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_06-secondary_01');
    this.load.spritesheet('tail_06-secondary_02', './../assets/spritesheets/tail_06-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_06-secondary_02');
    this.load.spritesheet('tail_06-secondary_03', './../assets/spritesheets/tail_06-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_06-secondary_03');
    this.load.spritesheet('tail_06-secondary_04', './../assets/spritesheets/tail_06-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_06-secondary_04');
    this.load.spritesheet('tail_06-secondary_05', './../assets/spritesheets/tail_06-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_06-secondary_05');
    this.load.spritesheet('tail_06-secondary_06', './../assets/spritesheets/tail_06-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_06-secondary_06');

    // Secondary Tail Sprites for tail_07
    this.load.spritesheet('tail_07-secondary_01', './../assets/spritesheets/tail_07-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_07-secondary_01');
    this.load.spritesheet('tail_07-secondary_02', './../assets/spritesheets/tail_07-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_07-secondary_02');
    this.load.spritesheet('tail_07-secondary_03', './../assets/spritesheets/tail_07-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_07-secondary_03');
    this.load.spritesheet('tail_07-secondary_04', './../assets/spritesheets/tail_07-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_07-secondary_04');
    this.load.spritesheet('tail_07-secondary_05', './../assets/spritesheets/tail_07-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_07-secondary_05');
    this.load.spritesheet('tail_07-secondary_06', './../assets/spritesheets/tail_07-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_07-secondary_06');

    // Secondary Tail Sprites for tail_08
    this.load.spritesheet('tail_08-secondary_01', './../assets/spritesheets/tail_08-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_08-secondary_01');
    this.load.spritesheet('tail_08-secondary_02', './../assets/spritesheets/tail_08-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_08-secondary_02');
    this.load.spritesheet('tail_08-secondary_03', './../assets/spritesheets/tail_08-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_08-secondary_03');
    this.load.spritesheet('tail_08-secondary_04', './../assets/spritesheets/tail_08-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_08-secondary_04');
    this.load.spritesheet('tail_08-secondary_05', './../assets/spritesheets/tail_08-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_08-secondary_05');
    this.load.spritesheet('tail_08-secondary_06', './../assets/spritesheets/tail_08-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_08-secondary_06');

    // Secondary Tail Sprites for tail_09
    this.load.spritesheet('tail_09-secondary_01', './../assets/spritesheets/tail_09-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_09-secondary_01');
    this.load.spritesheet('tail_09-secondary_02', './../assets/spritesheets/tail_09-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_09-secondary_02');
    this.load.spritesheet('tail_09-secondary_03', './../assets/spritesheets/tail_09-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_09-secondary_03');
    this.load.spritesheet('tail_09-secondary_04', './../assets/spritesheets/tail_09-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_09-secondary_04');
    this.load.spritesheet('tail_09-secondary_05', './../assets/spritesheets/tail_09-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_09-secondary_05');
    this.load.spritesheet('tail_09-secondary_06', './../assets/spritesheets/tail_09-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_09-secondary_06');

    // Secondary Tail Sprites for tail_10
    this.load.spritesheet('tail_10-secondary_01', './../assets/spritesheets/tail_10-secondary_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_10-secondary_01');
    this.load.spritesheet('tail_10-secondary_02', './../assets/spritesheets/tail_10-secondary_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_10-secondary_02');
    this.load.spritesheet('tail_10-secondary_03', './../assets/spritesheets/tail_10-secondary_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_10-secondary_03');
    this.load.spritesheet('tail_10-secondary_04', './../assets/spritesheets/tail_10-secondary_04.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_10-secondary_04');
    this.load.spritesheet('tail_10-secondary_05', './../assets/spritesheets/tail_10-secondary_05.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_10-secondary_05');
    this.load.spritesheet('tail_10-secondary_06', './../assets/spritesheets/tail_10-secondary_06.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('tail_10-secondary_06');


    // Hair Sprites
    this.load.spritesheet('hair-front_01', './../assets/spritesheets/hair-front_01.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('hair-front_01');
    this.load.spritesheet('hair-front_02', './../assets/spritesheets/hair-front_02.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('hair-front_02');
    this.load.spritesheet('hair-front_03', './../assets/spritesheets/hair-front_03.png', {frameWidth: 215, frameHeight: 198});
    this.spritesToAnimate.push('hair-front_03');

  }

  function create() {
    console.log('localPlayerInfo in create = ', localPlayerInfo);
    var self = this;
    this.socket = io();
    this.otherPlayers = this.physics.add.group();
    //cursors = this.input.keyboard.createCursorKeys();
    //console.log('self.socket = ', self.socket);
    this.socket.on('currentPlayers', function (players, spells) {
      Object.keys(players).forEach(function (id) {
        console.log('Local players socket Id = ', players[id].playerId);
        if (players[id].playerId === self.socket.id) {
          console.log('players[id] = ', players[id]);
          addPlayer(self, players[id]);
        } else {
          return;
        }
      });
    });









      const pickrSettings = {
        container: '.colorContainer',
        theme: 'classic', // or 'monolith', or 'nano'
        default:'',
        comparison: false,
        padding: 10,
        position: 'top',
        lockOpacity: false,
        defaultRepresentation: 'HEX',

        // Default Swatches for Pickr
        swatches: [
          //----- First Row -----//
          // Light Gray
          'rgba(169, 169, 169, 1)',
          // Dark Brown
          'rgba(101, 67, 33, 1)',
          // Black
          'rgba(51, 47, 47, 1)',
          // Navy Blue
          'rgba(21, 21, 144, 1)',
          // Forest Green
          'rgba(34, 139, 34, 1)',
          // Warm Beige
          'rgba(210, 180, 140, 1)',
          // Dark Gray
          'rgba(105, 105, 105, 1)',
          // Orange
          'rgba(255, 127, 80, 1)',
          // Purple
          'rgba(128, 0, 128, 1)',
          //----- Second Row -----//
          // White
          'rgba(240, 240, 240, 1)',
          // Cream
          'rgba(255, 253, 208, 1)',
          // Red
          'rgba(193, 25, 25, 1)',
          // Light Blue
          'rgba(173, 216, 230, 1)',
          // Pale Green
          'rgba(152, 251, 152, 1)',
          // Soft Cream
          'rgba(255, 245, 225, 1)',
          // Black
          'rgba(51, 51, 51, 1)',
          // Yellow
          'rgba(255, 255, 153, 1)',
          // Lavender
          'rgba(216, 191, 216, 1)',
          //----- Third Row -----//
          // Electric Blue
          'rgba(30, 144, 255, 1)',
          // Gold
          'rgba(255, 215, 0, 1)',
          // Silver
          'rgba(176, 176, 176, 1)',
          // Yellow
          'rgba(255, 255, 153, 1)',
          // Orange
          'rgba(255, 165, 0, 1)',
          // Muted Coral
          'rgba(255, 127, 80, 1)',
          // Neon Green
          'rgba(57, 255, 20, 1)',
          // White
          'rgba(248, 248, 255, 1)',
          // Pink
          'rgba(255, 182, 193, 1)'
        ],

        components: {
          // Main components
          preview: false,
          opacity: false,
          hue: true,
          // Input / output Options
          interaction: {
            hex: true,
            rgba: true,
            hsla: false,
            hsva: false,
            cmyk: false,
            input: true
            // cancel: true,
            // clear: true,
            // save: true
          }
        }
      }

    // Create the pickr color selector for the "Default Pruimary Color"
    const mainPrimaryHex = Pickr.create({
      el: '.mainPrimaryColorBtn',
      ...pickrSettings
    });
    mainPrimaryHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      // Set the sprite pieces to the selected color
      localPlayerInfo.head.color = gameColorCode;
      localPlayerInfo.ear.outerColor = gameColorCode;
      localPlayerInfo.body.color = gameColorCode;
      localPlayerInfo.tail.color = gameColorCode;
      self.head.setTint(localPlayerInfo.head.color);
      self.outerEar.setTint(localPlayerInfo.body.color);
      self.body.setTint(localPlayerInfo.body.color);
      self.tail.setTint(localPlayerInfo.tail.color);
      // Set the background color of the button to the selected color
      mainPrimaryHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
      outerEarHex.setColor(rawColor);
      primaryHeadHex.setColor(rawColor);
      bodyHex.setColor(rawColor);
      tailHex.setColor(rawColor);
    })

    // Create the pickr color selector for the "Default Secondary Color"
    const mainSecondaryHex = Pickr.create({
      el: '#mainSecondaryColorBtn',
      ...pickrSettings
    });
    mainSecondaryHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      // Set the sprite pieces to the selected color
      localPlayerInfo.head.secondaryColor = gameColorCode;
      localPlayerInfo.ear.innerColor = gameColorCode;
      localPlayerInfo.body.secondaryColor = gameColorCode;
      localPlayerInfo.hands.color = gameColorCode;
      localPlayerInfo.feet.color = gameColorCode;
      localPlayerInfo.tail.secondaryColor = gameColorCode;
      self.secondaryHead.setTint(localPlayerInfo.head.secondaryColor);
      self.innerEar.setTint(localPlayerInfo.ear.innerColor);
      self.secondaryBody.setTint(localPlayerInfo.body.secondaryColor);
      self.hands.setTint(localPlayerInfo.hands.color);
      self.feet.setTint(localPlayerInfo.feet.color);
      self.secondaryTail.setTint(localPlayerInfo.tail.secondaryColor);
      // Set the background color of the button to the selected color
      mainSecondaryHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
      secondaryHeadHex.setColor(rawColor);
      innerEarHex.setColor(rawColor);
      secondaryBodyHex.setColor(rawColor);
      handsHex.setColor(rawColor);
      feetHex.setColor(rawColor);
      secondaryTailHex.setColor(rawColor);
    })

    // Create the pickr color selector for the "Default Accent Color"
    const mainAccentHex = Pickr.create({
      el: '#mainAccentColorBtn',
      ...pickrSettings
      
    });
    mainAccentHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      // Set the sprite pieces to the selected color
      localPlayerInfo.head.accentColor = gameColorCode;
      localPlayerInfo.beak.color = gameColorCode;
      localPlayerInfo.body.accentColor = gameColorCode;
      localPlayerInfo.tail.accentColor = gameColorCode;
      localPlayerInfo.headAccessories.color = gameColorCode;
      self.accentHead.setTint(localPlayerInfo.head.accentColor);
      self.beak.setTint(localPlayerInfo.beak.color);
      self.accentBody.setTint(localPlayerInfo.body.accentColor);
      self.accentTail.setTint(localPlayerInfo.tail.accentColor);
      self.headAccessories.setTint(localPlayerInfo.headAccessories.color);
      // Set the background color of the button to the selected color
      mainAccentHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
      accentHeadHex.setColor(rawColor);
      beakHex.setColor(rawColor);
      accentBodyHex.setColor(rawColor);
      accentTailHex.setColor(rawColor);
      headAccessoriesHex.setColor(rawColor);
    })

    // Create the pickr color selector for the "Primary Base Head Color"
    const primaryHeadHex = Pickr.create({
      // sets the color picker to the element with the id of '#headColorBtn'
      el: '#headColorBtn',
      // sets the pickr settings to the pickrSettings object above
      ...pickrSettings
    });
    // When the color is changed in the color picker, this function is called
    primaryHeadHex.on('change', (color, source, instance) => {
      // This line converts the color to a hex code and adds the "#" to the front of it
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      // This line takes the rawColor and replaces the "#" with "0x" to make it a "gameColorCode"
      var gameColorCode = rawColor.replace("#", "0x")
      // This sets the localPlayerInfo head color to the gameColorCode
      localPlayerInfo.head.color = gameColorCode;
      // Using the code assigned to localPlayerInfo.head.color, it this line is actually what changes the color of the head sprite
      self.head.setTint(localPlayerInfo.head.color);
      // There is a form input that is hidden that is used to store the hex code of the color to be submitted to the Database
      document.getElementById('primaryHeadHex').value = rawColor;
      // This line sets the color of the color selection box to match the color that was selected
      primaryHeadHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Beak Color picker"
    const beakHex = Pickr.create({
      el: '#beakColorBtn',
      ...pickrSettings
    });
    beakHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.beak.color = gameColorCode;
      self.beak.setTint(localPlayerInfo.beak.color);
      document.getElementById('beakHex').value = gameColorCode;
      beakHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Secondary head Color"
    const secondaryHeadHex = Pickr.create({
      el: '#secondaryHeadColorBtn',
      ...pickrSettings
    });
    secondaryHeadHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.secondaryColor = gameColorCode;
      self.secondaryHead.setTint(localPlayerInfo.head.secondaryColor);
      document.getElementById('secondaryHeadHex').value = rawColor;
      secondaryHeadHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Accent head Color"
    const accentHeadHex = Pickr.create({
      el: '#accentHeadColorBtn',
      ...pickrSettings
    });
    accentHeadHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.accentColor = gameColorCode;
      self.accentHead.setTint(localPlayerInfo.head.accentColor);
      document.getElementById('accentHeadHex').value = rawColor;
      accentHeadHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Hair Color picker"
    const hairHex = Pickr.create({
      el: '#hairColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 10,
      position: 'top',

      // Default Swatches for Pickr
      swatches: [
        //----- First Row -----//
        // Black
        'rgba(51, 47, 47, 1)',
        // Dark Brown
        'rgba(92, 64, 51, 1)',
        // Dark Gray
        'rgba(105, 105, 105, 1)',
        // Navy Blue
        'rgba(21, 21, 144, 1)',
        // Forest Green
        'rgba(34, 139, 34, 1)',
        // Deep Red
        'rgba(139, 0, 0, 1)',
        // Purple
        'rgba(128, 0, 128, 1)',
        // Dark Olive
        'rgba(60, 52, 31, 1)',
        // Midnight Blue
        'rgba(25, 25, 112, 1)',

        //----- Second Row -----//
        // Light Gray
        'rgba(169, 169, 169, 1)',
        // Warm Beige
        'rgba(210, 180, 140, 1)',
        // Cream
        'rgba(255, 253, 208, 1)',
        // Pale Green
        'rgba(152, 251, 152, 1)',
        // Soft Pink
        'rgba(255, 182, 193, 1)',
        // Soft Cream
        'rgba(255, 245, 225, 1)',
        // Light Blue
        'rgba(173, 216, 230, 1)',
        // Lavender
        'rgba(216, 191, 216, 1)',
        // Soft Lavender
        'rgba(230, 230, 250, 1)',

        //----- Third Row -----//
        // White
        'rgba(240, 240, 240, 1)',
        // Pale Yellow
        'rgba(255, 255, 204, 1)',
        // Silver
        'rgba(192, 192, 192, 1)',
        // Gold
        'rgba(218, 165, 32, 1)',
        // Yellow
        'rgba(255, 255, 153, 1)',
        // Muted Coral
        'rgba(255, 127, 80, 1)',
        // Bright Pink
        'rgba(255, 105, 180, 1)',
        // Electric Blue
        'rgba(30, 144, 255, 1)',
        // Neon Green
        'rgba(57, 255, 20, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });
    hairHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.hair.color = gameColorCode;
      self.hair.setTint(localPlayerInfo.hair.color);
      document.getElementById('hairHex').value = rawColor;
      hairHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Outer ear Color picker"
    const outerEarHex = Pickr.create({
      el: '#outerEarColorBtn',
      ...pickrSettings
    });
    outerEarHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.ear.outerColor = gameColorCode;
      self.outerEar.setTint(localPlayerInfo.ear.outerColor);
      document.getElementById('outerEarHex').value = rawColor
      outerEarHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Inner ear Color picker"
    const innerEarHex = Pickr.create({
      el: '#innerEarColorBtn',
      ...pickrSettings
    });
    innerEarHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.ear.innerColor = gameColorCode;
      self.innerEar.setTint(localPlayerInfo.ear.innerColor);
      document.getElementById('innerEarHex').value = rawColor
      innerEarHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Eye Color picker"
    const eyesHex = Pickr.create({
      el: '#eyeColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 10,
      position: 'top',

      // Default Swatches for Pickr
      swatches: [
        //----- First Row -----//
        // bright blue
        'rgba(0, 191, 255, 1)',
        // icy blue
        'rgba(175, 238, 238, 1)',
        // cerulean blue
        'rgba(0, 123, 167, 1)',
        // turquoise
        'rgba(64, 224, 208, 1)',
        // teal
        'rgba(0, 128, 128, 1)',
        // mint green
        'rgba(152, 255, 152, 1))',
        // emerald green
        'rgba(80, 200, 120, 1)',
        // lime green
        'rgba(50, 205, 50, 1)',
        // forest green
        'rgba(34, 139, 34, 1)',
        //----- Second Row -----//
        // golden yellow
        'rgba(255, 215, 0, 1)',
        // amber
        'rgba(255, 191, 0, 1)',
        // burnt orange
        'rgba(204, 85, 0, 1)',
        // sunset orange
        'rgba(255, 69, 0, 1)',
        // peach
        'rgba(255, 218, 185, 1)',
        // crimson
        'rgba(220, 20, 60, 1)',
        // ruby red
        'rgba(224, 17, 95, 1)',
        // rose pink
        'rgba(255, 102, 204, 1)',
        // lavender
        'rgba(230, 230, 250, 1)',
        //----- Third Row -----//
        // hazel
        'rgba(142, 118, 24, 1)',
        // chocolate brown
        'rgba(139, 69, 19, 1)',
        // olive
        'rgba(128, 128, 0, 1)',
        // deep purple
        'rgba(128, 0, 128, 1)',
        // violet
        'rgba(238, 130, 238, 1)',
        // midnight blue
        'rgba(25, 25, 112, 1)',
        // steel blue
        'rgba(70, 130, 180, 1)',
        // silver
        'rgba(192, 192, 192, 1)',
        // aquamarine
        'rgba(127, 255, 212, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });
    eyesHex.on('change', (color, source, instance) => {
      // console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      // console.log('gameColorCode at eyesHex on chnage= ', gameColorCode);
      localPlayerInfo.eyes.color = gameColorCode;
      self.iris.setTint(localPlayerInfo.eyes.color);
      document.getElementById('eyesHex').value = rawColor;
      eyesHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    // Create the pickr color selector for the "Head Accessories Color picker"
    const headAccessoriesHex = Pickr.create({
      el: '#headAccessoriesColorBtn',
      ...pickrSettings
    });
    headAccessoriesHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.headAccessories.color = gameColorCode;
      self.headAccessories.setTint(localPlayerInfo.headAccessories.color);
      document.getElementById('headAccessoriesHex').value = rawColor;
      headAccessoriesHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    const bodyHex = Pickr.create({
      el: '#bodyColorBtn',
      ...pickrSettings
    });

    bodyHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.body.color = gameColorCode;
      self.body.setTint(localPlayerInfo.body.color);
      document.getElementById('bodyHex').value = rawColor;
      bodyHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    const secondaryBodyHex = Pickr.create({
      el: '#secondaryBodyColorBtn',
      ...pickrSettings
    });

    secondaryBodyHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.body.secondaryColor = gameColorCode;
      self.secondaryBody.setTint(localPlayerInfo.body.secondaryColor);
      document.getElementById('secondaryBodyHex').value = rawColor
      secondaryBodyHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    const accentBodyHex = Pickr.create({
      el: '#accentBodyColorBtn',
      ...pickrSettings
    });

    accentBodyHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.body.accentColor = gameColorCode;
      self.accentBody.setTint(localPlayerInfo.body.accentColor);
      document.getElementById('accentBodyHex').value = rawColor
      accentBodyHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    const handsHex = Pickr.create({
      el: '#handsColorBtn',
      ...pickrSettings
    });

    handsHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.hands.color = gameColorCode;
      self.hands.setTint(localPlayerInfo.hands.color);
      document.getElementById('handsHex').value = gameColorCode;
      handsHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
      // console.log('hands sprite not currently defined on character');
    })

    const feetHex = Pickr.create({
      el: '#feetColorBtn',
      ...pickrSettings
    });

    feetHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.feet.color = gameColorCode;
      self.feet.setTint(localPlayerInfo.feet.color);
      document.getElementById('feetHex').value = gameColorCode;
      feetHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
      //console.log('feet sprite not currently defined on character');
    })

    const tailHex = Pickr.create({
      el: '#tailColorBtn',
      ...pickrSettings
    });

    tailHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.tail.color = gameColorCode;
      self.tail.setTint(localPlayerInfo.tail.color);
      document.getElementById('tailHex').value = rawColor;
      tailHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    const secondaryTailHex = Pickr.create({
      el: '#secondaryTailColorBtn',
      ...pickrSettings
    });

    secondaryTailHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.tail.secondaryColor = gameColorCode;
      self.secondaryTail.setTint(localPlayerInfo.tail.secondaryColor);
      document.getElementById('secondaryTailHex').value = rawColor
      secondaryTailHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
      //console.log('changing secondary Tail color');
    })

    const accentTailHex = Pickr.create({
      el: '#accentTailColorBtn',
      ...pickrSettings
    });

    accentTailHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var rawColor = "#"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      var gameColorCode = rawColor.replace("#", "0x")
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.tail.accentColor = gameColorCode;
      self.accentTail.setTint(localPlayerInfo.tail.accentColor);
      document.getElementById('accentTailHex').value = rawColor
      accentTailHex.getRoot().button.style.setProperty('--pcr-color', rawColor);
    })

    document.querySelector('input.pcr-result').addEventListener('keydown', function(event) {
      if (event.key === 'Enter') {
        event.preventDefault();
      }
    });


    document.getElementById('randomizer').addEventListener("click", randomizeColors);

    var bodyColorSets = [
      {
        id: 1,
        primary: '#fefdfd',
        secondary: '#ffc6d7',
        accent: '#b46ed1',
        hair: '#fafaff',
        eyes: '#fff46c',
        description: 'Cotton Candy'
      },
      {
        id: 2,
        primary: '#454545',
        secondary: '#e5e5e5',
        accent: '#ef819e',
        hair: '#5d3558',
        eyes: '#d119af',
        description: 'Smokey Plum'
      },
      {
        id: 3,
        primary: '#54434d',
        secondary: '#d9cbd8',
        accent: '#ff7506',
        hair: '#212121',
        eyes: '#7ecd88',
        description: 'Halloween Night'
      },
      {
        id: 4,
        primary: '#d06d32',
        secondary: '#e8c1a4',
        accent: '#3a110d',
        hair: '#69371c',
        eyes: '#7ecd88',
        description: 'Pumpkin Spice'
      },
      {
        id: 5,
        primary: '#f7941d',
        secondary: '#ffeecc',
        accent: '#603913',
        hair: '#603913',
        eyes: '#00aeef',
        description: 'Desert Sunset'
      },
      {
        id: 6,
        primary: '#603f1e',
        secondary: '#cfba85',
        accent: '#8e5238',
        hair: '#8e5238',
        eyes: '#56a1f2',
        description: 'Desert Sand'
      },
      {
        id: 7,
        primary: '#32859f',
        secondary: '#e3ffff',
        accent: '#d13541',
        hair: '#532600',
        eyes: '#bce3e8',
        description: 'Ocean on Fire'
      },
      {
        id: 8,
        primary: '#7ec6ee',
        secondary: '#f4feff',
        accent: '#49443c',
        hair: '#152941',
        eyes: '#baa224',
        description: 'Ocean Depths'
      },
      {
        id: 9,
        primary: '#3f96f7',
        secondary: '#f2e6f2',
        accent: '#c07ce0',
        hair: '#ff62bf',
        eyes: '#ffd761',
        description: 'Berry Blast'
      },
      {
        id: 10,
        primary: '#55343d',
        secondary: '#897668',
        accent: '#402418',
        hair: '#ab5c3b',
        eyes: '#3b6223',
        description: 'Cinnamon Swirl'
      },
      {
        id: 11,
        primary: '#ffffff',
        secondary: '#93eef3',
        accent: '#1a446c',
        hair: '#1a446c',
        eyes: '#37cbff',
        description: 'Winter Wonderland'
      },
      {
        id: 12,
        primary: '#ffebcb',
        secondary: '#ffffff',
        accent: '#cca986',
        hair: '#997f63',
        eyes: '#3be2e2',
        description: 'Vanilla Bean'
      },
      {
        id: 13,
        primary: '#464646',
        secondary: '#b9af8c',
        accent: '#6edee5',
        hair: '#b9af8c',
        eyes: '#ffcc04',
        description: 'Stonewashed Oasis'
      },
      {
        id: 14,
        primary: '#e2c8ad',
        secondary: '#f9f1ea',
        accent: '#875747',
        hair: '#724a3d',
        eyes: '#ffc87c',
        description: 'Caramel Macchiato'
      },
      {
        id: 15,
        primary: '#fda75f',
        secondary: '#f6f0f0',
        accent: '#454444',
        hair: '#724a3d',
        eyes: '#2ab7fe',
        description: 'Dirty Peaches'
      },
      {
        id: 16,
        primary: '#b6f0f0',
        secondary: '#fffdec',
        accent: '#ffeeff',
        hair: '#ffeeff',
        eyes: '#6a166d',
        description: 'Pastel Goth'
      },
      {
        id: 17,
        primary: '#72a8cb',
        secondary: '#ddfff9',
        accent: '#3f3f3f',
        hair: '#134b7a',
        eyes: '#70bcee',
        description: 'Cloudy Sky'
      },
      {
        id: 18,
        primary: '#e579c5',
        secondary: '#e5e4d0',
        accent: '#419dce',
        hair: '#439fd0',
        eyes: '#e77dc7',
        description: 'Vaporwave'
      },
      {
        id: 19,
        primary: '#766462',
        secondary: '#ecebe9',
        accent: '#f0f002',
        hair: '#463e3c',
        eyes: '#fffd94',
        description: 'Bumblebee'
      },
      {
        id: 20,
        primary: '#372d52',
        secondary: '#4a3b72',
        accent: '#9028c5',
        hair: '#372d52',
        eyes: '#4afb15',
        description: 'Grape Soda'
      },
      {
        id: 21,
        primary: '#424954',
        secondary: '#edff5f',
        accent: '#3e933b',
        hair: '#313c4c',
        eyes: '#4dcc00',
        description: 'Limeade'
      },
      {
        id: 22,
        primary: '#5e4054',
        secondary: '#04fbf5',
        accent: '#6d245d',
        hair: '#301260',
        eyes: '#32fccc',
        description: 'Electric Blackberry'
      },
      {
        id: 23,
        primary: '#393535',
        secondary: '#fafafa',
        accent: '#469c9b',
        hair: '#4f9597',
        eyes: '#4c5d6d',
        description: 'Moonlit Ocean'
      },
      {
        id: 24,
        primary: '#2f2f2f',
        secondary: '#3a3a3a',
        accent: '#0972c3',
        hair: '#202020',
        eyes: '#5942f9',
        description: 'Dark Matter'
      },
      {
        id: 25,
        primary: '#ae02c0',
        secondary: '#e1c1e3',
        accent: '#3c3e3c',
        hair: '#3a333b',
        eyes: '#00e600',
        description: 'Royal Purple Haze'
      },
      {
        id: 26,
        primary: '#00636d',
        secondary: '#cbe6e1',
        accent: '#17ad58',
        hair: '#cb7083',
        eyes: '#ffad0b',
        description: 'Sea Kelpy'
      },
      {
        id: 27,
        primary: '#8b0000',
        secondary: '#ffb6c1',
        accent: '#e75480',
        hair: '#5c4033',
        eyes: '#ffbf00',
        description: 'Strawberry Shortcake'
      },
      {
        id: 28,
        primary: '#19466C',
        secondary: '#add8e6',
        accent: '#20B2AA',
        hair: '#2f4f4f',
        eyes: '#8e7618',
        description: 'Deep Sea and Sky'
      },
      {
        id: 29,
        primary: '#556b2f',
        secondary: '#ffffcc',
        accent: '#8b4513',
        hair: '#3c341f',
        eyes: '#32cd32',
        description: 'Forest Moss'
      },
      {
        id: 30, // refine
        primary: '#996515',
        secondary: '#ffefd5',
        accent: '#4682b4',
        hair: '#654321',
        eyes: '#daa520',
        description: 'Desert Mirage'
      },
      {
        id: 31,
        primary: '#3B1E40',
        secondary: '#d8bfd8',
        accent: '#9400d3',
        hair: '#551a8b',
        eyes: '#ee82ee',
        description: 'Starlight Nebula'
      },
      {
        id: 32,
        primary: '#006400',
        secondary: '#98fb98',
        accent: '#008b8b',
        hair: '#43362b',
        eyes: '#90ee90',
        description: 'Shamrock Shake'
      },
      {
        id: 33,
        primary: '#ff8c00',
        secondary: '#ffff99',
        accent: '#C00A0A',
        hair: '#ff5722',
        eyes: '#daa520',
        description: 'Solar Flare'
      },
      {
        id: 34,
        primary: '#ffb6c1',
        secondary: '#fff0f5',
        accent: '#ff69b4',
        hair: '#db7093',
        eyes: '#d2b48c',
        description: 'Sugar Plum Dream'
      },
      {
        id: 35,
        primary: '#d2b48c',
        secondary: '#ffffcc',
        accent: '#734F2C',
        hair: '#8b7355',
        eyes: '#b0e0e6',
        description: 'Espresso'
      },
      {
        id: 36,
        primary: '#FF7F00',
        secondary: '#00FF7F',
        accent: '#800080',
        hair: '#F5F5F5',
        eyes: '#FFFFAA',
        description: 'Neon Nightmare'
      }
    ];

    function randomizeColors() {
      // console.log('Colors Randomized');
      var randomChoice = Math.floor(Math.random() * 36);
      var randomBody = Math.floor(Math.random() * 1);
      var randomGenitles = Math.floor(Math.random() * 2);
      var randomHead = Math.floor(Math.random() * 6);
      var randomHeadSecondaryFur = Math.floor(Math.random() * 6);
      var randomHeadAccentFur = Math.floor(Math.random() * 1);
      var randomHeadAccessories = Math.floor(Math.random() * 6);
      var randomHair = Math.floor(Math.random() * 4);
      if(randomHead == 5){
        var tmpRndm = Math.floor(Math.random() * 2);
        console.log('tmpRndm = ', tmpRndm);
        if(tmpRndm == 1){
          var randomEars = 0;
        }
        if(tmpRndm == 0){
          var randomEars = 7;
        }
      }else{
        var randomEars = Math.floor(Math.random() * 11)+1;
      }
      var randomBodySecondaryFur = Math.floor(Math.random() * 4);
      var randomBodyAccentFur = Math.floor(Math.random() * 4);
      var randomHandsFur = Math.floor(Math.random() * 3);
      var randomFeetFur = Math.floor(Math.random() * 3);
      var randomTail = Math.floor(Math.random() * 7);
      var randomSecondaryTail = Math.floor(Math.random() * 7);

      if(randomSecondaryTail == 0){
        var randomSecondaryTailCheck = 7;
      }else{
        var randomSecondaryTailCheck = 6;
      }
      var randomAccentTail = Math.floor(Math.random() * randomSecondaryTailCheck);


      document.getElementById('bodyShape').value = document.getElementById('bodyShape')[randomBody].value;
      localPlayerInfo.bodyShape.sprite = document.getElementById('bodyShape')[randomBody].value;
      document.getElementById('bodyShape').dispatchEvent(new Event("change"));
      document.getElementById('mainBodyType').value = document.getElementById('mainBodyType')[randomBody].value;
      localPlayerInfo.body.sprite = document.getElementById('mainBodyType')[randomBody].value;
      document.getElementById('mainBodyType').dispatchEvent(new Event("change"));
      document.getElementById('genitles').value = document.getElementById('genitles')[randomGenitles].value;
      //localPlayerInfo.genitles.sprite = document.getElementById('genitles')[randomGenitles].value;
      document.getElementById('head').value = document.getElementById('head')[randomHead].value;
      document.getElementById('head').dispatchEvent(new Event("change"));
      localPlayerInfo.head.sprite = document.getElementById('head')[randomHead].value;
      document.getElementById('headSecondaryFur').value = document.getElementById('headSecondaryFur')[randomHeadSecondaryFur].value;
      localPlayerInfo.head.secondarySprite = document.getElementById('headSecondaryFur')[randomHeadSecondaryFur].value;
      document.getElementById('headAccentFur').value = document.getElementById('headAccentFur')[randomHeadAccentFur].value;
      localPlayerInfo.head.accentSprite = document.getElementById('headAccentFur')[randomHeadAccentFur].value;
      document.getElementById('headAccessories').value = document.getElementById('headAccessories')[randomHeadAccessories].value;
      localPlayerInfo.headAccessories.sprite = document.getElementById('headAccessories')[randomHeadAccessories].value;
      document.getElementById('hair').value = document.getElementById('hair')[randomHair].value;
      localPlayerInfo.hair.sprite = document.getElementById('hair')[randomHair].value;
      document.getElementById('outerEar').value = document.getElementById('outerEar')[randomEars].value;
      document.getElementById('outerEar').dispatchEvent(new Event("change"));
      localPlayerInfo.ear.outerSprite = document.getElementById('outerEar')[randomEars].value;
      document.getElementById('bodySecondaryFur').value = document.getElementById('bodySecondaryFur')[randomBodySecondaryFur].value;
      localPlayerInfo.body.secondarySprite = document.getElementById('bodySecondaryFur')[randomBodySecondaryFur].value;
      document.getElementById('bodyAccentFur').value = document.getElementById('bodyAccentFur')[randomBodyAccentFur].value;
      localPlayerInfo.body.accentSprite = document.getElementById('bodyAccentFur')[randomBodyAccentFur].value;
      document.getElementById('handsFur').value = document.getElementById('handsFur')[randomHandsFur].value;
      localPlayerInfo.hands.sprite = document.getElementById('handsFur')[randomHandsFur].value;
      document.getElementById('feetFur').value = document.getElementById('feetFur')[randomFeetFur].value;
      localPlayerInfo.feet.sprite = document.getElementById('feetFur')[randomFeetFur].value;
      document.getElementById('tail').value = document.getElementById('tail')[randomTail].value;
      document.getElementById('tail').dispatchEvent(new Event("change"));
      localPlayerInfo.tail.sprite = document.getElementById('tail')[randomTail].value;
      document.getElementById('tailSecondaryFur').value = document.getElementById('tailSecondaryFur')[randomSecondaryTail].value;
      document.getElementById('tailSecondaryFur').dispatchEvent(new Event("change"));
      localPlayerInfo.tail.secondarySprite = document.getElementById('tailSecondaryFur')[randomSecondaryTail].value;
      document.getElementById('tailAccentFur').value = document.getElementById('tailAccentFur')[randomAccentTail].value;
      document.getElementById('tailAccentFur').dispatchEvent(new Event("change"));
      localPlayerInfo.tail.accentSprite = document.getElementById('tailAccentFur')[randomAccentTail].value;


      characterUpdated(localPlayerInfo);
















      //console.log(bodyColorSets);
      console.log(
        'Randomized Color Selection Details: ' + '\n' +
        'id: ' + bodyColorSets[randomChoice].id + '\n'+
        'Description: ' + bodyColorSets[randomChoice].description + '\n' +
        'Primary: ' + bodyColorSets[randomChoice].primary + '\n' +
        'Secondary: ' + bodyColorSets[randomChoice].secondary + '\n' +
        'Accent: ' + bodyColorSets[randomChoice].accent + '\n' +
        'Hair: ' + bodyColorSets[randomChoice].hair + '\n' +
        'Eyes: ' + bodyColorSets[randomChoice].eyes
      );
      mainPrimaryHex.setColor(bodyColorSets[randomChoice].primary);
      mainSecondaryHex.setColor(bodyColorSets[randomChoice].secondary);
      mainAccentHex.setColor(bodyColorSets[randomChoice].accent);

      primaryHeadHex.setColor(bodyColorSets[randomChoice].primary);
      beakHex.setColor(bodyColorSets[randomChoice].accent);
      secondaryHeadHex.setColor(bodyColorSets[randomChoice].secondary);
      accentHeadHex.setColor(bodyColorSets[randomChoice].accent);

      hairHex.setColor(bodyColorSets[randomChoice].hair);
      outerEarHex.setColor(bodyColorSets[randomChoice].primary);
      innerEarHex.setColor(bodyColorSets[randomChoice].secondary);
      eyesHex.setColor(bodyColorSets[randomChoice].eyes);

      bodyHex.setColor(bodyColorSets[randomChoice].primary);
      secondaryBodyHex.setColor(bodyColorSets[randomChoice].secondary);
      accentBodyHex.setColor(bodyColorSets[randomChoice].accent);
      handsHex.setColor(bodyColorSets[randomChoice].secondary);
      feetHex.setColor(bodyColorSets[randomChoice].secondary);

      tailHex.setColor(bodyColorSets[randomChoice].primary);
      secondaryTailHex.setColor(bodyColorSets[randomChoice].secondary);
      accentTailHex.setColor(bodyColorSets[randomChoice].accent);
    };









    function getHex(color) {
      var hex = parseInt(color).toString(16);
      return hex.length == 1 ? "0" + hex : hex;
      console.log('this is still getting used?!');
    };







    document.getElementById("bodyShape").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      localPlayerInfo.bodyShape.sprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("mainBodyType").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);

      localPlayerInfo.body.sprite = i.srcElement.value;
      var bodySecondaryFurID = document.getElementById('bodySecondaryFur');
      bodySecondaryFurID.innerHTML = "";
      var bodyAccentFurID = document.getElementById('bodyAccentFur');
      bodyAccentFurID.innerHTML = "";
      var handsFurID = document.getElementById('handsFur');
      handsFurID.innerHTML = "";
      var feetFurID = document.getElementById('feetFur');
      feetFurID.innerHTML = "";

      if(document.getElementById("mainBodyType").value == 'body_01'){
        var secondaryOptionArray = ["body_01-empty|None", "body_01-secondary_01|Belly", "body_01-secondary_02|Chest to Thighs", "body_01-secondary_03|Chest, Thighs and Underarms", "body_01-secondary_04|Scales"];
        var accentOptionArray = ["body_01-empty|None", "body_01-accent_01|Spots", "body_01-accent_02|Stripes", "body_01-accent_03|Stripe Down Back"];
        var handsOptionArray = ["body_01-empty|None", `body_01-hands-secondary_01|Short "gloves"`, `body_01-hands-secondary_02|Long "gloves"`];
        var feetOptionArray = ["body_01-empty|None", `body_01-feet-secondary_01|Short "socks"`, `body_01-feet-secondary_02|Long "socks"`];
      }
      if(document.getElementById("mainBodyType").value == 'body_02'){
        var secondaryOptionArray = ["body_02-empty|None", "body_02-secondary_01|Belly", "body_02-secondary_02|Chest to Thighs", "body_02-secondary_03|Chest, Thighs and Underarms", "body_02-secondary_04|Scales"];
        var accentOptionArray = ["body_02-empty|None", "body_02-accent_01|Spots", "body_02-accent_02|Stripes", "body_02-accent_03|Stripe Down Back"];
        var handsOptionArray = ["body_02-empty|None", `body_02-hands-secondary_01|Short "gloves"`, `body_02-hands-secondary_02|Long "gloves"`];
        var feetOptionArray = ["body_02-empty|None", `body_02-feet-secondary_01|Short "socks"`, `body_02-feet-secondary_02|Long "socks"`];
      }
      if(document.getElementById("mainBodyType").value == 'body_03'){
        var secondaryOptionArray = ["body_03-empty|None", "body_03-secondary_01|Belly", "body_03-secondary_02|Chest to Thighs", "body_03-secondary_03|Chest, Thighs and Underarms", "body_03-secondary_04|Scales"];
        var accentOptionArray = ["body_03-empty|None", "body_03-accent_01|Spots", "body_03-accent_02|Stripes", "body_03-accent_03|Stripe Down Back"];
        var handsOptionArray = ["body_03-empty|None", `body_03-hands-secondary_01|Short "gloves"`, `body_03-hands-secondary_02|Long "gloves"`];
        var feetOptionArray = ["body_03-empty|None", `body_03-feet-secondary_01|Short "socks"`, `body_03-feet-secondary_02|Long "socks"`];
      }
      if(document.getElementById("mainBodyType").value == 'body_04'){
        var secondaryOptionArray = ["body_04-empty|None", "body_04-secondary_01|Belly", "body_04-secondary_02|Chest to Thighs", "body_04-secondary_03|Chest, Thighs and Underarms", "body_04-secondary_04|Scales"];
        var accentOptionArray = ["body_04-empty|None", "body_04-accent_01|Spots", "body_04-accent_02|Stripes", "body_04-accent_03|Stripe Down Back"];
        var handsOptionArray = ["body_04-empty|None", `body_04-hands-secondary_01|Short "gloves"`, `body_04-hands-secondary_02|Long "gloves"`];
        var feetOptionArray = ["body_04-empty|None", `body_04-feet-secondary_01|Short "socks"`, `body_04-feet-secondary_02|Long "socks"`];
      }

      for(var secondaryOption in secondaryOptionArray) {
        var pair = secondaryOptionArray[secondaryOption].split("|");
        var newOptionForSecondary = document.createElement("option");
        newOptionForSecondary.value = pair[0];
        newOptionForSecondary.innerHTML = pair[1];
        bodySecondaryFurID.options.add(newOptionForSecondary);
      }
      for(var accentOption in accentOptionArray) {
        var pair = accentOptionArray[accentOption].split("|");
        var newOptionForAccent = document.createElement("option");
        newOptionForAccent.value = pair[0];
        newOptionForAccent.innerHTML = pair[1];
        bodyAccentFurID.options.add(newOptionForAccent);
      }
      for(var handsOption in handsOptionArray) {
        var pair = handsOptionArray[handsOption].split("|");
        var newOptionForHands = document.createElement("option");
        newOptionForHands.value = pair[0];
        newOptionForHands.innerHTML = pair[1];
        handsFurID.options.add(newOptionForHands);
      }
      for(var feetOption in feetOptionArray) {
        var pair = feetOptionArray[feetOption].split("|");
        var newOptionForFeet = document.createElement("option");
        newOptionForFeet.value = pair[0];
        newOptionForFeet.innerHTML = pair[1];
        feetFurID.options.add(newOptionForFeet);
      }
      document.getElementById('bodySecondaryFur').dispatchEvent(new Event("change"))
      document.getElementById('bodyAccentFur').dispatchEvent(new Event("change"))
      document.getElementById('handsFur').dispatchEvent(new Event("change"))
      document.getElementById('feetFur').dispatchEvent(new Event("change"))
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("outerEar").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      localPlayerInfo.ear.outerSprite = i.srcElement.value;

      if(document.getElementById("outerEar").value == 'empty'){
        // console.log('selected empty ear slot');
        localPlayerInfo.ear.innerSprite = "empty";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_01-outer'){
        // console.log('selected perky and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_01-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_02-outer'){
        // console.log('selected floppy ears');
        localPlayerInfo.ear.innerSprite = "ears_02-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_03-outer'){
        // console.log('selected short and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_03-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_04-outer'){
        // console.log('selected long and loppy ears');
        localPlayerInfo.ear.innerSprite = "ears_04-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_05-outer'){
        // console.log('selected long and tol ears');
        localPlayerInfo.ear.innerSprite = "ears_05-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_06-outer'){
        // console.log('selected split tip ears');
        localPlayerInfo.ear.innerSprite = "ears_06-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_07-outer'){
        // console.log('selected from the sides ears');
        localPlayerInfo.ear.innerSprite = "ears_07-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_08-outer'){
        // console.log('selected long and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_08-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_09-outer'){
        // console.log('selected long and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_09-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_10-outer'){
        // console.log('selected long and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_10-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_11-outer'){
        // console.log('selected long and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_11-inner";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      

      characterUpdated(localPlayerInfo);
    });


    //zimbabaway
    document.getElementById("head").addEventListener("change", function(i) {
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      // console.log('i = ', i.srcElement.value);
      localPlayerInfo.head.sprite = i.srcElement.value;
      var headSecondaryFurID = document.getElementById('headSecondaryFur');
      headSecondaryFurID.innerHTML = "";
      var headAccentFurID = document.getElementById('headAccentFur');
      headAccentFurID.innerHTML = "";
      localPlayerInfo.beak.sprite = 'empty';
      document.getElementById('beakSprite').value = localPlayerInfo.beak.sprite;
      document.getElementById('sneakyBeak').style.display = "none";
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);

      //self.socket.emit('characterUpdate', localPlayerInfo);
      if(document.getElementById("head").value == 'empty'){
        var optionArray = ["empty|None"];
      }

      if(document.getElementById("head").value == 'head_01'){
        //----- Vulpine Head -----//
        localPlayerInfo.eyes.outer = 'eyes_02';
        localPlayerInfo.eyes.iris = 'eyes_01';
        document.getElementById('beakSprite').value = 'empty';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        // localPlayerInfo.ear.outerSprite = 'ears_01-outer';
        // localPlayerInfo.ear.innerSprite = 'ears_01-inner';

        var optionArray = ["empty|None","head_01-secondary_01|Half Mask", "head_01-secondary_02|Full Mask", "head_01-secondary_03|Single Stripe", "head_01-secondary_04|Around Eyes", "head_01-secondary_05|Snout Only"];

        //chinglebingle
      }
      if(document.getElementById("head").value == 'head_02'){
        //----- Canine Head -----//
        localPlayerInfo.eyes.outer = 'eyes_02';
        localPlayerInfo.eyes.iris = 'eyes_01';
        document.getElementById('beakSprite').value = 'empty';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_02-secondary_01|Half Mask", "head_02-secondary_02|Full Mask", "head_02-secondary_03|Single Stripe", "head_02-secondary_04|Around Eyes", "head_02-secondary_05|Snout Only"];
      }
      if(document.getElementById("head").value == 'head_03'){
        //----- Feline Head -----//
        localPlayerInfo.eyes.outer = 'eyes_02';
        localPlayerInfo.eyes.iris = 'eyes_01';
        document.getElementById('beakSprite').value = 'empty';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_03-secondary_01|Half Mask", "head_03-secondary_02|Full Mask", "head_03-secondary_03|Single Stripe", "head_03-secondary_04|Around Eyes", "head_03-secondary_05|Snout Only"];
      }
      if(document.getElementById("head").value == 'head_04'){
        //----- Bunny Head -----//
        localPlayerInfo.eyes.outer = 'eyes_02';
        localPlayerInfo.eyes.iris = 'eyes_01';
        // localPlayerInfo.ear.outer = 'ear_05';
        // localPlayerInfo.ear.inner = 'ear_05';
        document.getElementById('beakSprite').value = 'empty';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_04-secondary_01|Half Mask", "head_04-secondary_02|Full Mask", "head_04-secondary_03|Single Stripe", "head_04-secondary_04|Around Eyes", "head_04-secondary_05|Snout Only"];
      }
      if(document.getElementById("head").value == 'head_05'){
        //----- Avain Head -----//
        document.getElementById('sneakyBeak').style.display = "block";
        localPlayerInfo.beak.sprite = 'head_05_beak';
        localPlayerInfo.eyes.outer = 'eyes_02';
        localPlayerInfo.eyes.iris = 'eyes_01';
        document.getElementById('beakSprite').value = localPlayerInfo.beak.sprite;
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_05-secondary_01|Half Mask", "head_05-secondary_02|Full Mask", "head_05-secondary_03|Single Stripe", "head_05-secondary_04|Around Eyes", "head_05-secondary_05|Around Beak"];
      }
      if(document.getElementById("head").value == 'head_06'){
        //----- Reptile Head -----//
        localPlayerInfo.eyes.outer = 'eyes_02';
        localPlayerInfo.eyes.iris = 'eyes_01';
        document.getElementById('beakSprite').value = 'empty';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_06-secondary_01|Half Mask", "head_06-secondary_02|Full Mask", "head_06-secondary_03|Single Stripe", "head_06-secondary_04|Around Eyes", "head_06-secondary_05|Snout Only"];
      }
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      for(var option in optionArray) {
        var pair = optionArray[option].split("|");
        var newOptionForSecondary = document.createElement("option");
        var newOptionForAccent = document.createElement("option");
        newOptionForSecondary.value = pair[0];
        newOptionForSecondary.innerHTML = pair[1];
        headSecondaryFurID.options.add(newOptionForSecondary);

        newOptionForAccent.value = pair[0];
        newOptionForAccent.innerHTML = pair[1];
        headAccentFurID.options.add(newOptionForAccent);
      }
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      document.getElementById('headSecondaryFur').dispatchEvent(new Event("change"))
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      document.getElementById('headAccentFur').dispatchEvent(new Event("change"))
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("headSecondaryFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      if(initialSetup == true){
        
      } else {
        localPlayerInfo.head.secondarySprite = i.srcElement.value;
      }
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("headAccentFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      if(initialSetup == true){
        
      } else {
        localPlayerInfo.head.accentSprite = i.srcElement.value;
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("headAccessories").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      localPlayerInfo.headAccessories.sprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("bodySecondaryFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      if(initialSetup == true){
        
      } else {
        localPlayerInfo.body.secondarySprite = i.srcElement.value;
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("bodyAccentFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      if(initialSetup == true){
        
      } else {
        localPlayerInfo.body.accentSprite = i.srcElement.value;
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("handsFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      if(initialSetup == true){
        
      } else {
        localPlayerInfo.hands.sprite = i.srcElement.value;
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("feetFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      if(initialSetup == true){
        
      } else {
        localPlayerInfo.feet.sprite = i.srcElement.value;
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("hair").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      localPlayerInfo.hair.sprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    // document.getElementById("ear").addEventListener("change", function(i) {
    //   console.log('i = ', i.srcElement.value);
    //   localPlayerInfo.ear.outerSprite = i.srcElement.value;
    //   characterUpdated(localPlayerInfo);
    // });



    document.getElementById("tail").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      document.getElementById('tailSecondaryFur').innerHTML = "";

      if(document.getElementById("tail").value == 'tail_01'){
        // console.log('selected Vulpine tail');
        var optionArray = ["empty|None","tail_01-secondary_01|Tiger Stripes","tail_01-secondary_02|Racoon Stripes","tail_01-secondary_03|Cheetah Spots","tail_01-secondary_04|Tail Tip","tail_01-secondary_05|Underside","tail_01-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_02'){
        // console.log('selected Canine tail');
        var optionArray = ["empty|None","tail_02-secondary_01|Tiger Stripes","tail_02-secondary_02|Racoon Stripes","tail_02-secondary_03|Cheetah Spots","tail_02-secondary_04|Tail Tip","tail_02-secondary_05|Underside","tail_02-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_03'){
        // console.log('selected Feline tail');
        var optionArray = ["empty|None","tail_03-secondary_01|Tiger Stripes","tail_03-secondary_02|Racoon Stripes","tail_03-secondary_03|Cheetah Spots","tail_03-secondary_04|Tail Tip","tail_03-secondary_05|Underside","tail_03-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_04'){
        // console.log('selected Rabbit tail');
        var optionArray = ["empty|None","tail_04-secondary_01|Tiger Stripes","tail_04-secondary_02|Racoon Stripes","tail_04-secondary_03|Cheetah Spots","tail_04-secondary_04|Tail Tip","tail_04-secondary_05|Underside","tail_04-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_05'){
        // console.log('selected Avain tail');
        var optionArray = ["empty|None","tail_05-secondary_01|Tiger Stripes","tail_05-secondary_02|Racoon Stripes","tail_05-secondary_03|Cheetah Spots","tail_05-secondary_04|Tail Tip","tail_05-secondary_05|Underside","tail_05-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_06'){
        // console.log('selected Reptile tail');
        var optionArray = ["empty|None","tail_06-secondary_01|Tiger Stripes","tail_06-secondary_02|Racoon Stripes","tail_06-secondary_03|Cheetah Spots","tail_06-secondary_04|Tail Tip","tail_06-secondary_05|Underside","tail_06-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_07'){
        // console.log('selected Equine tail');
        var optionArray = ["empty|None","tail_07-secondary_01|Tiger Stripes","tail_07-secondary_02|Racoon Stripes","tail_07-secondary_03|Cheetah Spots","tail_07-secondary_04|Tail Tip","tail_07-secondary_05|Underside","tail_07-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_08'){
        // console.log('selected thicc rodent tail');
        var optionArray = ["empty|None","tail_08-secondary_01|Tiger Stripes","tail_08-secondary_02|Racoon Stripes","tail_08-secondary_03|Cheetah Spots","tail_08-secondary_04|Tail Tip","tail_08-secondary_05|Underside","tail_08-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_09'){
        // console.log('selected thin rodent tail');
        var optionArray = ["empty|None","tail_09-secondary_01|Tiger Stripes","tail_09-secondary_02|Racoon Stripes","tail_09-secondary_03|Cheetah Spots","tail_09-secondary_04|Tail Tip","tail_09-secondary_05|Underside","tail_09-secondary_06|Single Stripe"];
      }

      if(document.getElementById("tail").value == 'tail_10'){
        // console.log('selected abdomen');
        var optionArray = ["empty|None","tail_10-secondary_01|Tiger Stripes","tail_10-secondary_02|Racoon Stripes","tail_10-secondary_03|Cheetah Spots","tail_10-secondary_04|Tail Tip","tail_10-secondary_05|Underside","tail_10-secondary_06|Single Stripe"];
      }

      if(initialSetup == true){
        
      } else {
        localPlayerInfo.tail.sprite = i.srcElement.value;
        localPlayerInfo.tail.secondarySprite = "empty";
      }

      for(var option in optionArray) {
        var pair = optionArray[option].split("|");
        var newOption = document.createElement("option");
        newOption.value = pair[0];
        newOption.innerHTML = pair[1];
        document.getElementById('tailSecondaryFur').options.add(newOption);
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("tailSecondaryFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      document.getElementById('tailAccentFur').innerHTML = "";
      console.log('localPlayerInfo.tail.secondarySprite = ', localPlayerInfo.tail.secondarySprite);
      var condition = document.getElementById("tailSecondaryFur").value;

      if(document.getElementById("tail").value == 'tail_01'){
        // console.log('selected Vulpine tail');
        var optionArray = ["empty|None"].concat(condition != "tail_01-secondary_01" ? ["tail_01-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_01-secondary_02" ? ["tail_01-secondary_02|Racoon Stripes"]:[]).concat(condition != "tail_01-secondary_03" ? ["tail_01-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_01-secondary_04" ? ["tail_01-secondary_04|Tail Tip"]:[]).concat(condition != "tail_01-secondary_05" ? ["tail_01-secondary_05|Underside"]:[]).concat(condition != "tail_01-secondary_06" ? ["tail_01-secondary_06|Single Stripe"]:[]);
      }

      if(document.getElementById("tail").value == 'tail_02'){
        // console.log('selected Canine tail');
        var optionArray = ["empty|None"].concat(condition != "tail_02-secondary_01" ? ["tail_02-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_02-secondary_02" ? ["tail_02-secondary_02|Racoon Stripes"]:[]).concat(condition != "tail_02-secondary_03" ? ["tail_02-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_02-secondary_04" ? ["tail_02-secondary_04|Tail Tip"]:[]).concat(condition != "tail_02-secondary_05" ? ["tail_02-secondary_05|Underside"]:[]).concat(condition != "tail_02-secondary_06" ? ["tail_02-secondary_06|Single Stripe"]:[]);
      }

      if(document.getElementById("tail").value == 'tail_03'){
        // console.log('selected Feline tail');
        var optionArray = ["empty|None"].concat(condition != "tail_03-secondary_01" ? ["tail_03-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_03-secondary_02" ? ["tail_03-secondary_02|Racoon Stripes"]:[]).concat(condition != "tail_03-secondary_03" ? ["tail_03-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_03-secondary_04" ? ["tail_03-secondary_04|Tail Tip"]:[]).concat(condition != "tail_03-secondary_05" ? ["tail_03-secondary_05|Underside"]:[]).concat(condition != "tail_03-secondary_06" ? ["tail_03-secondary_06|Single Stripe"]:[]);
      }

      if(document.getElementById("tail").value == 'tail_04'){
        // console.log('selected Rabbit tail');
        var optionArray = ["empty|None"].concat(condition != "tail_04-secondary_01" ? ["tail_04-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_04-secondary_02" ? ["tail_04-secondary_02|Racoon Stripes"]:  []).concat(condition != "tail_04-secondary_03" ? ["tail_04-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_04-secondary_04" ? ["tail_04-secondary_04|Tail Tip"]:[]).concat(condition != "tail_04-secondary_05" ? ["tail_04-secondary_05|Underside"]:[]).concat(condition != "tail_04-secondary_06" ? ["tail_04-secondary_06|Single Stripe"]:[]);
      }

      if(document.getElementById("tail").value == 'tail_05'){
        // console.log('selected Avain tail');
        var optionArray = ["empty|None"].concat(condition != "tail_05-secondary_01" ? ["tail_05-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_05-secondary_02" ? ["tail_05-secondary_02|Racoon Stripes"]:[]).concat(condition != "tail_05-secondary_03" ? ["tail_05-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_05-secondary_04" ? ["tail_05-secondary_04|Tail Tip"]:[]).concat(condition != "tail_05-secondary_05" ? ["tail_05-secondary_05|Underside"]:[]).concat(condition != "tail_05-secondary_06" ? ["tail_05-secondary_06|Single Stripe"]:[]);
      }

      if(document.getElementById("tail").value == 'tail_06'){
        // console.log('selected Reptile tail');
        var optionArray = ["empty|None"].concat(condition != "tail_06-secondary_01" ? ["tail_06-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_06-secondary_02" ? ["tail_06-secondary_02|Racoon Stripes"]:  []).concat(condition != "tail_06-secondary_03" ? ["tail_06-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_06-secondary_04" ? ["tail_06-secondary_04|Tail Tip"]:[]).concat(condition != "tail_06-secondary_05" ? ["tail_06-secondary_05|Underside"]:[]).concat(condition != "tail_06-secondary_06" ? ["tail_06-secondary_06|Single Stripe"]:[]);
      }

      if(document.getElementById("tail").value == 'tail_07'){
        // console.log('selected Equine tail');
        var optionArray = ["empty|None"].concat(condition != "tail_07-secondary_01" ? ["tail_07-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_07-secondary_02" ? ["tail_07-secondary_02|Racoon Stripes"]:  []).concat(condition != "tail_07-secondary_03" ? ["tail_07-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_07-secondary_04" ? ["tail_07-secondary_04|Tail Tip"]:[]).concat(condition != "tail_07-secondary_05" ? ["tail_07-secondary_05|Underside"]:[]).concat(condition != "tail_07-secondary_06" ? ["tail_07-secondary_06|Single Stripe"]:[]); 
      }

      if(document.getElementById("tail").value == 'tail_08'){
        // console.log('selected thicc rodent tail');
        var optionArray = ["empty|None"].concat(condition != "tail_08-secondary_01" ? ["tail_08-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_08-secondary_02" ? ["tail_08-secondary_02|Racoon Stripes"]:  []).concat(condition != "tail_08-secondary_03" ? ["tail_08-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_08-secondary_04" ? ["tail_08-secondary_04|Tail Tip"]:[]).concat(condition != "tail_08-secondary_05" ? ["tail_08-secondary_05|Underside"]:[]).concat(condition != "tail_08-secondary_06" ? ["tail_08-secondary_06|Single Stripe"]:[]); 
      }

      if(document.getElementById("tail").value == 'tail_09'){
        // console.log('selected thin rodent tail');
        var optionArray = ["empty|None"].concat(condition != "tail_09-secondary_01" ? ["tail_09-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_09-secondary_02" ? ["tail_09-secondary_02|Racoon Stripes"]:  []).concat(condition != "tail_09-secondary_03" ? ["tail_09-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_09-secondary_04" ? ["tail_09-secondary_04|Tail Tip"]:[]).concat(condition != "tail_09-secondary_05" ? ["tail_09-secondary_05|Underside"]:[]).concat(condition != "tail_09-secondary_06" ? ["tail_09-secondary_06|Single Stripe"]:[]); 
      }

      if(document.getElementById("tail").value == 'tail_10'){
        // console.log('selected abdomen');
        var optionArray = ["empty|None"].concat(condition != "tail_10-secondary_01" ? ["tail_10-secondary_01|Tiger Stripes"]:[]).concat(condition != "tail_10-secondary_02" ? ["tail_10-secondary_02|Racoon Stripes"]:  []).concat(condition != "tail_10-secondary_03" ? ["tail_10-secondary_03|Cheetah Spots"]:[]).concat(condition != "tail_10-secondary_04" ? ["tail_10-secondary_04|Tail Tip"]:[]).concat(condition != "tail_10-secondary_05" ? ["tail_10-secondary_05|Underside"]:[]).concat(condition != "tail_10-secondary_06" ? ["tail_10-secondary_06|Single Stripe"]:[]); 
      }

      if(initialSetup == true){
        console.log('localPlayerInfo.tail.secondarySprite = ', localPlayerInfo.tail.secondarySprite);
      } else {
        localPlayerInfo.tail.secondarySprite = i.srcElement.value;
        localPlayerInfo.tail.accentSprite = "empty";
      }

      for(var option in optionArray) {
        var pair = optionArray[option].split("|");
        var newOption = document.createElement("option");
        newOption.value = pair[0];
        newOption.innerHTML = pair[1];
        document.getElementById('tailAccentFur').options.add(newOption);
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("tailAccentFur").addEventListener("change", function(i) {
      // console.log('i = ', i.srcElement.value);
      if(initialSetup == true){
        
      } else {
        localPlayerInfo.tail.accentSprite = i.srcElement.value;
      }
      characterUpdated(localPlayerInfo);
    });









    rotateRight.addEventListener("click", function() {
      console.log('rotateRight clicked');
      if (rotation < 4) {
        rotation = rotation + 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 1;
        rotationfunct(self, rotation);
      }
    });
    rotateLeft.addEventListener("click", function() {
      console.log('rotateLeft clicked');
      if (rotation > 1) {
        rotation = rotation - 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 4;
        rotationfunct(self, rotation);
      }
    });
    function rotationfunct(self, rotation) {
      let direction =  null;
      if (rotation == 1) {
        direction = 'Down';
        self.container.sendToBack(self.accentTail);
        self.container.sendToBack(self.secondaryTail);
        self.container.sendToBack(self.tail);
        self.container.bringToTop(self.headAccessories);
      }
      if (rotation == 2) {
        direction = 'Right';
        self.container.bringToTop(self.tail);
        self.container.bringToTop(self.secondaryTail);
        self.container.bringToTop(self.accentTail);
        self.container.bringToTop(self.headAccessories);
      }
      if (rotation == 3) {
        direction = 'Up';
        self.container.bringToTop(self.tail);
        self.container.bringToTop(self.secondaryTail);
        self.container.bringToTop(self.accentTail);
        self.container.sendToBack(self.headAccessories);
      }
      if (rotation == 4) {
        direction = 'Left';
        self.container.bringToTop(self.tail);
        self.container.bringToTop(self.secondaryTail);
        self.container.bringToTop(self.accentTail);
        self.container.bringToTop(self.headAccessories);
      }

      self.head.play(localPlayerInfo.head.sprite + direction);
      self.beak.play(localPlayerInfo.beak.sprite + direction);
      self.secondaryHead.play(localPlayerInfo.head.secondarySprite + direction);
      self.accentHead.play(localPlayerInfo.head.accentSprite + direction);
      self.headAccessories.play(localPlayerInfo.headAccessories.sprite + direction);
      self.body.play(localPlayerInfo.body.sprite + direction);
      self.secondaryBody.play(localPlayerInfo.body.secondarySprite + direction);
      self.accentBody.play(localPlayerInfo.body.accentSprite + direction);
      self.tail.play(localPlayerInfo.tail.sprite + direction);
      self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + direction);
      self.accentTail.play(localPlayerInfo.tail.accentSprite + direction);
      self.hair.play(localPlayerInfo.hair.sprite + direction);
      self.outerEar.play(localPlayerInfo.ear.outerSprite + direction);
      self.innerEar.play(localPlayerInfo.ear.innerSprite + direction);
      self.eyes.play(localPlayerInfo.eyes.outer + direction);
      self.iris.play(localPlayerInfo.eyes.iris + direction);
      self.genitles.play(localPlayerInfo.genitles.sprite + direction);
      self.hands.play(localPlayerInfo.hands.sprite + direction);
      self.feet.play(localPlayerInfo.feet.sprite + direction);
    }

    //this.socket.on('characterUpdated', function (playerInfo) {
    function characterUpdated(playerInfo){
      //console.log('characterUpdated', '\n', 'playerInfo.playerId = ', playerInfo.playerId, '\n', 'self.socket.id = ', self.socket.id);
        if (playerInfo.playerId === self.socket.id) {
          rotationfunct(self, rotation);

          self.head.setTint(playerInfo.head.color);
          self.beak.setTint(playerInfo.beak.color);
          self.secondaryHead.setTint(playerInfo.head.secondaryColor);
          self.accentHead.setTint(playerInfo.head.accentColor);
          self.headAccessories.setTint(playerInfo.headAccessories.color);
          self.body.setTint(playerInfo.body.color);
          self.secondaryBody.setTint(playerInfo.body.secondaryColor);
          self.accentBody.setTint(playerInfo.body.accentColor);
          self.hands.setTint(playerInfo.hands.color);
          self.feet.setTint(playerInfo.feet.color);
          self.tail.setTint(playerInfo.tail.color);
          self.secondaryTail.setTint(playerInfo.tail.secondaryColor);
          self.accentTail.setTint(playerInfo.tail.accentColor);
          self.hair.setTint(playerInfo.hair.color);
          self.outerEar.setTint(playerInfo.ear.outerColor);
          self.innerEar.setTint(playerInfo.ear.innerColor);
          self.iris.setTint(playerInfo.eyes.color);


          //console.log('Head: ', self.head.anims.nextTick, '\n', 'Body: ', self.body.anims.nextTick, '\n', 'Tail: ', self.tail.anims.nextTick, '\n', 'Eyes: ', self.eyes.anims.nextTick);
          return;
        }
    };


    function addPlayer(self, playerInfo) {
      console.log('localPlayerInfo at addPlayer Function = ', localPlayerInfo);
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      console.log(
        playerInfo.playerId, 'Has entered the Character Creation screen with the following default values: ', '\n',
        'Set head Sprite to: ', localPlayerInfo.head.sprite, '\n',
        'Set head Color to: ', localPlayerInfo.head.color, '\n',
        'Set beak Sprite to: ', localPlayerInfo.beak.sprite, '\n',
        'Set beak Color to: ', localPlayerInfo.beak.color, '\n',
        'Set head Secondary Sprite to: ', localPlayerInfo.head.secondarySprite, '\n',
        'Set head Secondary Color to: ', localPlayerInfo.head.secondaryColor, '\n',
        'Set head Accent Sprite to: ', localPlayerInfo.head.accentSprite, '\n',
        'Set head Accent Sprite to: ', localPlayerInfo.headAccessories.sprite, '\n',
        'Set head Accent Sprite to: ', localPlayerInfo.headAccessories.color, '\n',
        'Set head Accent Color to: ', localPlayerInfo.head.accentColor, '\n',
        'Set body Sprite to: ', localPlayerInfo.body.sprite, '\n',
        'Set body Color to: ', localPlayerInfo.body.color, '\n',
        'Set body Secondary Sprite to: ', localPlayerInfo.body.secondarySprite, '\n',
        'Set body Secondary Color to: ', localPlayerInfo.body.secondaryColor, '\n',
        'Set body Accent Sprite to: ', localPlayerInfo.body.accentSprite, '\n',
        'Set body Accent Color to: ', localPlayerInfo.body.accentColor, '\n',
        'Set hands Sprite to: ', localPlayerInfo.hands.sprite, '\n',
        'Set hands Color to: ', localPlayerInfo.hands.color, '\n',
        'Set feet Sprite to: ', localPlayerInfo.feet.sprite, '\n',
        'Set feet Color to: ', localPlayerInfo.feet.color, '\n',
        'Set tail Sprite to: ', localPlayerInfo.tail.sprite, '\n',
        'Set tail Color to: ', localPlayerInfo.tail.color, '\n',
        'Set tail Secondary Sprite to: ', localPlayerInfo.tail.secondarySprite, '\n',
        'Set tail Secondary Color to: ', localPlayerInfo.tail.secondaryColor, '\n',
        'Set tail Accent Sprite to: ', localPlayerInfo.tail.accentSprite, '\n',
        'Set tail Accent Color to: ', localPlayerInfo.tail.accentColor, '\n',
        'Set hair Sprite to: ', localPlayerInfo.hair.sprite, '\n',
        'Set hair Color to: ', localPlayerInfo.hair.color, '\n',
        'Set outer ear Sprite to: ', localPlayerInfo.ear.outerSprite, '\n',
        'Set outer ear Color to: ', localPlayerInfo.ear.outerColor, '\n',
        'Set inner ear Sprite to: ', localPlayerInfo.ear.innerSprite, '\n',
        'Set inner ear Color to: ', localPlayerInfo.ear.innerColor, '\n',
        'Set outer eyes sprite to:', localPlayerInfo.eyes.outer, '\n',
        'Set irises to:', localPlayerInfo.eyes.iris, '\n',
        'Set eye color to:', localPlayerInfo.eyes.color, '\n',
        'Set genitles to:', localPlayerInfo.genitles.sprite
      );
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);

      self.container = self.add.container(0, 0).setSize(70, 170).setInteractive().setScale(1.5);

      self.head = self.physics.add.sprite(0, 0, localPlayerInfo.head.sprite).setInteractive();
      self.head.setTint(localPlayerInfo.head.color);
      self.beak = self.physics.add.sprite(0, 0, localPlayerInfo.beak.sprite).setInteractive();
      self.beak.setTint(localPlayerInfo.beak.color);
      self.secondaryHead = self.physics.add.sprite(0, 0, localPlayerInfo.head.secondarySprite).setInteractive();
      self.secondaryHead.setTint(localPlayerInfo.head.secondaryColor);
      self.accentHead = self.physics.add.sprite(0, 0, localPlayerInfo.head.accentSprite).setInteractive();
      self.accentHead.setTint(localPlayerInfo.head.accentColor);
      self.headAccessories = self.physics.add.sprite(0, 0, localPlayerInfo.headAccessories.sprite).setInteractive();
      self.headAccessories.setTint(localPlayerInfo.headAccessories.color);

      self.body = self.physics.add.sprite(0, 0, localPlayerInfo.body.sprite).setInteractive();
      self.body.setTint(localPlayerInfo.body.color);
      self.secondaryBody = self.physics.add.sprite(0, 0, localPlayerInfo.body.secondarySprite).setInteractive();
      self.secondaryBody.setTint(localPlayerInfo.body.secondaryColor);
      self.accentBody = self.physics.add.sprite(0, 0, localPlayerInfo.body.accentSprite).setInteractive();
      self.accentBody.setTint(localPlayerInfo.body.accentColor);
      self.hands = self.physics.add.sprite(0, 0, localPlayerInfo.hands.sprite).setInteractive();
      self.hands.setTint(localPlayerInfo.hands.color);
      self.feet = self.physics.add.sprite(0, 0, localPlayerInfo.feet.sprite).setInteractive();
      self.feet.setTint(localPlayerInfo.feet.color);

      self.tail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.sprite).setInteractive();
      self.tail.setTint(localPlayerInfo.tail.color);
      self.secondaryTail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.secondarySprite).setInteractive();
      self.secondaryTail.setTint(localPlayerInfo.tail.secondaryColor);
      self.accentTail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.accentSprite).setInteractive();
      self.accentTail.setTint(localPlayerInfo.tail.accentColor);

      self.hair = self.physics.add.sprite(0, 0, localPlayerInfo.hair.sprite).setInteractive();
      self.hair.setTint(localPlayerInfo.hair.color);

      self.outerEar = self.physics.add.sprite(0, 0, localPlayerInfo.ear.outerSprite).setInteractive();
      self.outerEar.setTint(localPlayerInfo.ear.outerColor);
      self.innerEar = self.physics.add.sprite(0, 0, localPlayerInfo.ear.innerSprite).setInteractive();
      self.innerEar.setTint(localPlayerInfo.ear.innerColor);

      self.eyes = self.physics.add.sprite(0, 0, localPlayerInfo.eyes.outer).setInteractive();
      self.iris = self.physics.add.sprite(0, 0, localPlayerInfo.eyes.iris).setInteractive();
      self.iris.setTint(localPlayerInfo.eyes.color);


      self.genitles = self.physics.add.sprite(0, 0, localPlayerInfo.genitles.sprite).setInteractive();
      //self.genitles.setTint(localPlayerInfo.genitles.color);
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);

      self.container.add([
        self.tail,
        self.secondaryTail,
        self.accentTail,


        self.body,
        self.secondaryBody,
        self.accentBody,
        self.genitles,
        self.hands,
        self.feet,

        self.head,

        self.secondaryHead,
        self.accentHead,

        self.beak,

        self.eyes,
        self.iris,
        self.hair,
        self.outerEar,
        self.innerEar,
        self.headAccessories
      ]);
      console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
      rotationfunct(self, rotation);

      localPlayerInfo.playerId = playerInfo.playerId;
      let cam1 = self.cameras.main.setSize(200, 300).startFollow(self.container).setName('Camera 1');
      if (charList == 'new') {
        randomizeColors();
      } else {
        console.log('editing character not randomizing initial color settings');
        console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
        //set default sprite selections
        document.getElementById('bodyShape').value = localPlayerInfo.bodyShape.sprite;
        document.getElementById('mainBodyType').value = localPlayerInfo.body.sprite;
        console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
        document.getElementById("mainBodyType").dispatchEvent(new Event('change'));
        console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
        document.getElementById('genitles').value = localPlayerInfo.genitles.sprite;
        document.getElementById('head').value = localPlayerInfo.head.sprite;
        console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
        document.getElementById("head").dispatchEvent(new Event('change'));
        // console.log('charList.head.secondarySprite = ', charList.head.secondarySprite)
        console.log('secondary head sprite = ', localPlayerInfo.head.secondarySprite);
        console.log("document.getElementById('headSecondaryFur').value = ", document.getElementById('headSecondaryFur').value);
        document.getElementById('headSecondaryFur').value = localPlayerInfo.head.secondarySprite;
        console.log("document.getElementById('headSecondaryFur').value = ", document.getElementById('headSecondaryFur').value);
        document.getElementById('headAccentFur').value = localPlayerInfo.head.accentSprite;
        document.getElementById('headAccessories').value = localPlayerInfo.headAccessories.sprite;
        document.getElementById('hair').value = localPlayerInfo.hair.sprite;
        document.getElementById('outerEar').value = localPlayerInfo.ear.outerSprite;
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
        document.getElementById('beakSprite').value = localPlayerInfo.beak.sprite;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        
        
        document.getElementById('bodySecondaryFur').value = localPlayerInfo.body.secondarySprite;
        document.getElementById('bodyAccentFur').value = localPlayerInfo.body.accentSprite;
        document.getElementById('handsFur').value = localPlayerInfo.hands.sprite;
        document.getElementById('feetFur').value = localPlayerInfo.feet.sprite;
        document.getElementById('tail').value = localPlayerInfo.tail.sprite;
        console.log('localPlayerInfo.tail.secondarySprite = ', localPlayerInfo.tail.secondarySprite);
        document.getElementById("tail").dispatchEvent(new Event('change'));
        console.log('localPlayerInfo.tail.secondarySprite = ', localPlayerInfo.tail.secondarySprite);
        document.getElementById('tailSecondaryFur').value = localPlayerInfo.tail.secondarySprite;
        document.getElementById('tailSecondaryFur').dispatchEvent(new Event('change'));
        document.getElementById('tailAccentFur').value = localPlayerInfo.tail.accentSprite;

        mainPrimaryHex.setColor(localPlayerInfo.body.color.replace("0x", "#"));
        mainSecondaryHex.setColor(localPlayerInfo.body.secondaryColor.replace("0x", "#"));
        mainAccentHex.setColor(localPlayerInfo.body.accentColor.replace("0x", "#"));

        primaryHeadHex.setColor(localPlayerInfo.head.color.replace("0x", "#"));
        beakHex.setColor(localPlayerInfo.beak.color.replace("0x", "#"));
        secondaryHeadHex.setColor(localPlayerInfo.head.secondaryColor.replace("0x", "#"));
        accentHeadHex.setColor(localPlayerInfo.head.accentColor.replace("0x", "#"));

        hairHex.setColor(localPlayerInfo.hair.color.replace("0x", "#"));
        outerEarHex.setColor(localPlayerInfo.ear.outerColor.replace("0x", "#"));
        innerEarHex.setColor(localPlayerInfo.ear.innerColor.replace("0x", "#"));
        eyesHex.setColor(localPlayerInfo.eyes.color.replace("0x", "#"));

        console.log('localPlayerInfo.body.color = ', localPlayerInfo.body.color.replace("0x", "#"));
        bodyHex.setColor(localPlayerInfo.body.color.replace("0x", "#"));
        secondaryBodyHex.setColor(localPlayerInfo.body.secondaryColor.replace("0x", "#"));
        accentBodyHex.setColor(localPlayerInfo.body.accentColor.replace("0x", "#"));
        handsHex.setColor(localPlayerInfo.hands.color.replace("0x", "#"));
        console.log('localPlayerInfo.feet.color = ', localPlayerInfo.feet.color.replace("0x", "#"));
        feetHex.setColor(localPlayerInfo.feet.color.replace("0x", "#"));

        tailHex.setColor(localPlayerInfo.tail.color.replace("0x", "#"));
        secondaryTailHex.setColor(localPlayerInfo.tail.secondaryColor.replace("0x", "#"));
        accentTailHex.setColor(localPlayerInfo.tail.accentColor.replace("0x", "#"));
        initialSetup = false;
      }
    }

    function createAnimations(spriteKeys) {
      // console.log('spriteKeys = ', spriteKeys);
      // console.log('spriteKeys.length = ', spriteKeys.length);
      spriteKeys.forEach(key => {
        // console.log('key = ',key)
        self.anims.create({
          key: `${key}Down`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 1, end: 8 }), // Adjust frame numbers as needed
          frameRate: 8,
          repeat: -1 // Loop the animation
        });

        self.anims.create({
          key: `${key}Right`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 10, end: 17 }), // Adjust frame numbers as needed
          frameRate: 8,
          repeat: -1 // Loop the animation
        });

        self.anims.create({
          key: `${key}Left`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 19, end: 26 }), // Adjust frame numbers as needed
          frameRate: 8,
          repeat: -1 // Loop the animation
        });

        self.anims.create({
          key: `${key}Up`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 28, end: 35 }), // Adjust frame numbers as needed
          frameRate: 8,
          repeat: -1 // Loop the animation
        });

        self.anims.create({
          key: `${key}StopDown`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 0, end: 0 }), // Adjust frame numbers as needed
          frameRate: 1,
          repeat: -1 // Loop the animation
        });

        self.anims.create({
          key: `${key}StopRight`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 9, end: 9 }), // Adjust frame numbers as needed
          frameRate: 1,
          repeat: -1 // Loop the animation
        });

        self.anims.create({
          key: `${key}StopLeft`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 18, end: 18 }), // Adjust frame numbers as needed
          frameRate: 1,
          repeat: -1 // Loop the animation
        });

        self.anims.create({
          key: `${key}StopUp`, // Example animation key naming convention
          frames: self.anims.generateFrameNumbers(key, { start: 27, end: 27 }), // Adjust frame numbers as needed
          frameRate: 1,
          repeat: -1 // Loop the animation
        });
      });
    }
    // console.log('spritesToAnimate = ', self.spritesToAnimate);
    createAnimations.call(self, self.spritesToAnimate);
  }


  function update() {
    
  }
</script>
