<section id ="characterCreator">
  <div class="container">
    <div id="characterCreatorUi">
      <div id="primaryButtons">
        <ul>
          <li><button type="button" id="gender" class="button main" style="vertical-align:middle"><span>Style </span></button></li>
          <li><button type="button" id="about" class="button main" style="vertical-align:middle"><span>About </span></button></li>
          <li><button type="button" id="kinks" class="button main" style="vertical-align:middle"><span>Kinks </span></button></li>
          <li><button type="button" id="vore" class="button main" style="vertical-align:middle"><span>Vore </span></button></li>
        </ul>
      </div>


<% if (charList == 'new') { %><form action="/api/user/createcharacter" method="POST"><% } else {%><form action="/api/user/editcharacter" method="POST"><%}%>      
      <div id ="genderPullout" class="pullout">
        <div id ="collapsibleBox">

          <button type="button" class="collapsible" style="font-size: 30px;"><span>&#65086;</span><span> &#9892; </span><span>&#65086;</span></button>
          <div class="content">
            <ul>
              <li><div class="selectionContainer">
                <select name="body" id="body">
                  <option value = "body_01">Feminine</option>
                  <option value = "empty">Masculine (unavailable)</option>
                </select>
                <select name="genitles" id="genitles">
                  <option value = "empty">Vagina (unavailable)</option>
                  <option value = "empty">Penis (unavailable)</option>
                  <option value = "empty">Both (unavailable)</option>
                </select>
              </div></li>
            </ul>
          </div>


          <button type="button" class="collapsible"><span>&#65086;</span> Head <span>&#65086;</span></button>
          <div class="content">
            <ul>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Head:<br>
                  <select name="head" id="head">
                    <option value = "head_01">Vulpine</option>
                    <option value = "head_02">Long Eared Rabbit</option>
                    <option value = "head_03">Lop Eared Bunny</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="headColorBtn" class="selected"></button>
                </div>
              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Secondary Fur:<br>
                  <select name="headSecondaryFur" id="headSecondaryFur">
                    <option value="empty">None</option>
                    <option value="secondaryHead_01">Half Mask</option>
                    <option value="secondaryHead_02">Full Mask</option>
                    <option value="secondaryHead_03">Stripes</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="secondaryHeadColorBtn" class="selected"></button>
                </div>


              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Accent Fur: <br>
                  <select name="headAccentFur" id="headAccentFur">
                    <option value="empty">None</option>
                    <option value="secondaryHead_01">Half Mask</option>
                    <option value="secondaryHead_02">Full Mask</option>
                    <option value="secondaryHead_03">Stripes</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="accentHeadColorBtn" class="selected"></button>
                </div>



              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Hair: <br>
                  <select name="hair" id="hair">
                    <option value="empty">None</option>
                    <option value="hair_01">Long I guess?</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="hairColorBtn" class="selected"></button>
                </div>


              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Inner Ears: <br>
                  <select name="ear" id="ear">
                    <option value="empty">None</option>
                    <option value="ear_01">Innear Ear Floof</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="earColorBtn" class="selected"></button>
                </div>


              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Eye Color:<br>
                </div>
                <div class="colorDivide">

                  <button type="button" id="eyeColorBtn" class="selected"></button>
                </div>

              </div></li>
            </ul>
          </div>
          <button type="button" class="collapsible"><span>&#65086;</span> Body <span>&#65086;</span></button>
          <div class="content">
            <ul>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Body:
                  <br>
                  Primary Color:
                </div>
                <div class="colorDivide">
                  <button type="button" id="bodyColorBtn" class="selected"></button>
                </div>

              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Secondary Fur: <br>
                  <select name="bodySecondaryFur" id="bodySecondaryFur">
                    <option value="empty">None</option>
                    <option value="secondaryBody_01">Half Mask</option>
                    <option value="secondaryBody_02">Full Mask</option>
                    <option value="secondaryBody_03">Stripes</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="secondaryBodyColorBtn" class="selected"></button>
                </div>


              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Accent Fur: <br>
                  <select name="bodyAccentFur" id="bodyAccentFur">
                    <option value="empty">None</option>
                    <option value="secondaryBody_01">Half Mask</option>
                    <option value="secondaryBody_02">Full Mask</option>
                    <option value="secondaryBody_03">Stripes</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="accentBodyColorBtn" class="selected"></button>
                </div>


              </div></li>
            </ul>
          </div>
          <button type="button" class="collapsible"><span>&#65086;</span> Tail <span>&#65086;</span></button>
          <div class="content">
            <ul>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Tail: <br>
                  <select name="tail" id="tail">
                    <option value="tail_01">Vulpine</option>
                    <option value="empty">Bunny (unavailable)</option>
                    <option value="empty">None</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="tailColorBtn" class="selected"></button>
                </div>


              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Secondary Fur: <br>
                  <select name="tailSecondaryFur" id="tailSecondaryFur">
                    <option value="empty">None</option>
                    <option value="empty">Half Mask (Unavailable)</option>
                    <option value="empty">Full Mask (Unavailable)</option>
                    <option value="empty">Stripes (Unavailable)</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="secondaryTailColorBtn" class="selected"></button>
                </div>


              </div></li>
              <li><div class="selectionContainer">
                <div class="dropDownDivide">
                  Accent Fur: <br>
                  <select name="tailAccentFur" id="tailAccentFur">
                    <option value="empty">None</option>
                    <option value="empty">Half Mask (Unavailable)</option>
                    <option value="empty">Full Mask (Unavailable)</option>
                    <option value="empty">Stripes (Unavailable)</option>
                  </select>
                </div>
                <div class="colorDivide">
                  Color: <br>
                  <button type="button" id="accentTailColorBtn" class="selected"></button>
                </div>


              </div></li>
            </ul>
          </div>
        </div>
        <div class="info">
          <!-- <ul>
            <li><div id= "test1">
              Primary Color:<br>
              <button type="button" id="primary" class="selected"></button>
            </div></li>
            <li><div id= "test2">
              Secondary Color:<br>
              <button type="button" id="secondary" class="selected"></button>
            </div></li>
            <li><div id="test3">
              Accent Color:<br>
              <button type="button" id="accent" class="selected"></button>
            </div></li>
            <li><div id="test4">
              Eye Color:<br>
              <button type="button" id="eyeColor" class="selected"></button>
            </div></li>
          </ul> -->
        </div>
        <div class="colorContainer">
          <canvas id="color-picker"></canvas>
          <br>
          <div class="hexContainer">
            <div class="colorQuickSelect">
              Color Hex Value:
              <input id="primaryHeadHex" name="primaryHeadColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value" ></input>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="secondaryHeadHex" name="secondaryHeadColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Head's Primary Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="accentHeadHex" name="accentHeadColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Head's Secondary Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              Color Hex Value: <br>
              <input id="hairHex" name="hairColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="earHex" name="earColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Head's Secondary Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              Color Hex Value: <br>
              <input id="eyesHex" name="eyesColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="bodyHex" name="bodyColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Head's Primary Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="secondaryBodyHex" name="secondaryBodyColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Head's Secondary Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="accentBodyHex" name="accentBodyColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Head's Accent Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="tailHex" name="tailColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Body's Primary Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="secondaryTailHex" name="secondaryTailColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Body's Secondary Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
            <div class="colorQuickSelect">
              <div class="hexDivide">
                Color Hex Value: <br>
                <input id="accentTailHex" name="accentTailColor" type="text" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
              </div>
              <div class="copyDivide">
                Copy Your Body's Accent Color? <br>
                <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
              </div>
            </div>
          </div>
        </div>



      </div>



      <div id ="aboutPullout" class="pullout">
        <div id="playerInformation">
          <div id="nameInput">
              <label for="firstName">First Name:</label>
              <br>
              <input id="firstName" name="firstName" type="text" autocomplete="off" class="form-control" placeholder="First Name" aria-label="First Name"></input>
              <br>
              <label for="lastName">Last Name:</label><br>
              <input id="lastName" name="lastName" type="text" autocomplete="off" class="form-control" placeholder="Last Name" aria-label="Last Name"></input>
              <br>
              <label for="nickName">Nick Name:</label><br>
              <input id="nickName" name="nickName" type="text" autocomplete="off" class="form-control" placeholder="Nick Name" aria-label="Nick Name"></input>
              <br>
              <label for="speciesName">Species Name:</label>
              <br>
              <input id="speciesName" name="speciesName" type="text" autocomplete="off" class="form-control" placeholder="Species Name" aria-label="Species Name"></input>
              <div id="pronouns">
                <label>Preferred Pronouns:</label>
                <label for="she/her" class="radioContainer"> She/Her
                  <input id="she/her" type="radio" name="pronouns" value="1">
                  <span class="checkmark"></span>
                </label>

                <label for="he/his" class="radioContainer"> He/His
                  <input id="he/his" type="radio" name="pronouns" value="2">
                  <span class="checkmark"></span>
                </label>
              </div>
          </div>
          <div id="detailsInput">
            <div id="descriptionInput">
              <button type="button" class="collapsible">In Character Description</button>
              <div class="content">
                Input Character Description here: <br> <textarea id="icDescrip" name="icDescrip" autocomplete="off" class="form-control" placeholder="In Character Description..." aria-label="description"></textarea>
              </div>

              <button type="button" class="collapsible">Out of Character Description</button>
              <div class="content">
                Input Character Description here: <br> <textarea id="oocDescrip" type="text" name="oocDescrip" autocomplete="off" class="form-control" placeholder="Out of Charactrer Description" aria-label="description"></textarea>
              </div>
            </div>
          </div>
        </div>


      </div>



      <div id ="kinksPullout" class="pullout">

          <div id="kinksInput">
            <ul>
              <li>
                Oral Vore
                <div class="rating">
                  <input type="radio" name="ovStar" id="ovStar1" value="1"><label for="ovStar1"> </label>
                  <input type="radio" name="ovStar" id="ovStar2" value="2"><label for="ovStar2"> </label>
                  <input type="radio" name="ovStar" id="ovStar3" value="3"><label for="ovStar3"> </label>
                  <input type="radio" name="ovStar" id="ovStar4" value="4"><label for="ovStar4"> </label>
                  <input type="radio" name="ovStar" id="ovStar5" value="5"><label for="ovStar5"> </label>
                </div>
              </li>

              <li>
                Anal Vore
                <div class="rating">
                  <input type="radio" name="avStar" id="avStar1" value="1"><label for="avStar1"> </label>
                  <input type="radio" name="avStar" id="avStar2" value="2"><label for="avStar2"> </label>
                  <input type="radio" name="avStar" id="avStar3" value="3"><label for="avStar3"> </label>
                  <input type="radio" name="avStar" id="avStar4" value="4"><label for="avStar4"> </label>
                  <input type="radio" name="avStar" id="avStar5" value="5"><label for="avStar5"> </label>
                </div>
              </li>

              <li>
                Cock Vore
                <div class="rating">
                  <input type="radio" name="cvStar" id="cvStar1" value="1"><label for="cvStar1"> </label>
                  <input type="radio" name="cvStar" id="cvStar2" value="2"><label for="cvStar2"> </label>
                  <input type="radio" name="cvStar" id="cvStar3" value="3"><label for="cvStar3"> </label>
                  <input type="radio" name="cvStar" id="cvStar4" value="4"><label for="cvStar4"> </label>
                  <input type="radio" name="cvStar" id="cvStar5" value="5"><label for="cvStar5"> </label>
                </div>
              </li>

              <li>
                Unbirth
                <div class="rating">
                  <input type="radio" name="ubStar" id="ubStar1" value="1"><label for="ubStar1"> </label>
                  <input type="radio" name="ubStar" id="ubStar2" value="2"><label for="ubStar2"> </label>
                  <input type="radio" name="ubStar" id="ubStar3" value="3"><label for="ubStar3"> </label>
                  <input type="radio" name="ubStar" id="ubStar4" value="4"><label for="ubStar4"> </label>
                  <input type="radio" name="ubStar" id="ubStar5" value="5"><label for="ubStar5"> </label>
                </div>
              </li>

              <li>
                Tail Vore
                <div class="rating">
                  <input type="radio" name="tvStar" id="tvStar1" value="1"><label for="tvStar1"> </label>
                  <input type="radio" name="tvStar" id="tvStar2" value="2"><label for="tvStar2"> </label>
                  <input type="radio" name="tvStar" id="tvStar3" value="3"><label for="tvStar3"> </label>
                  <input type="radio" name="tvStar" id="tvStar4" value="4"><label for="tvStar4"> </label>
                  <input type="radio" name="tvStar" id="tvStar5" value="5"><label for="tvStar5"> </label>
                </div>
              </li>

              <li>
                Absorbtion
                <div class="rating">
                  <input type="radio" name="absStar" id="absStar1" value="1"><label for="absStar1"> </label>
                  <input type="radio" name="absStar" id="absStar2" value="2"><label for="absStar2"> </label>
                  <input type="radio" name="absStar" id="absStar3" value="3"><label for="absStar3"> </label>
                  <input type="radio" name="absStar" id="absStar4" value="4"><label for="absStar4"> </label>
                  <input type="radio" name="absStar" id="absStar5" value="5"><label for="absStar5"> </label>
                </div>
              </li>

              <li>
                Soul Vore
                <div class="rating">
                  <input type="radio" name="svStar" id="svStar1" value="1"><label for="svStar1"> </label>
                  <input type="radio" name="svStar" id="svStar2" value="2"><label for="svStar2"> </label>
                  <input type="radio" name="svStar" id="svStar3" value="3"><label for="svStar3"> </label>
                  <input type="radio" name="svStar" id="svStar4" value="4"><label for="svStar4"> </label>
                  <input type="radio" name="svStar" id="svStar5" value="5"><label for="svStar5"> </label>
                </div>
              </li>
            </ul>

            <ul>
              <li>
                Being Predator
                <div class="rating">
                  <input type="radio" name="predStar" id="predStar1" value="1"><label for="predStar1"> </label>
                  <input type="radio" name="predStar" id="predStar2" value="2"><label for="predStar2"> </label>
                  <input type="radio" name="predStar" id="predStar3" value="3"><label for="predStar3"> </label>
                  <input type="radio" name="predStar" id="predStar4" value="4"><label for="predStar4"> </label>
                  <input type="radio" name="predStar" id="predStar5" value="5"><label for="predStar5"> </label>
                </div>
              </li>

              <li>
                Being Prey
                <div class="rating">
                  <input type="radio" name="preyStar" id="preyStar1" value="1"><label for="preyStar1"> </label>
                  <input type="radio" name="preyStar" id="preyStar2" value="2"><label for="preyStar2"> </label>
                  <input type="radio" name="preyStar" id="preyStar3" value="3"><label for="preyStar3"> </label>
                  <input type="radio" name="preyStar" id="preyStar4" value="4"><label for="preyStar4"> </label>
                  <input type="radio" name="preyStar" id="preyStar5" value="5"><label for="preyStar5"> </label>
                </div>
              </li>

              <li>
                Soft Vore
                <div class="rating">
                  <input type="radio" name="softStar" id="softStar1" value="1"><label for="softStar1"> </label>
                  <input type="radio" name="softStar" id="softStar2" value="2"><label for="softStar2"> </label>
                  <input type="radio" name="softStar" id="softStar3" value="3"><label for="softStar3"> </label>
                  <input type="radio" name="softStar" id="softStar4" value="4"><label for="softStar4"> </label>
                  <input type="radio" name="softStar" id="softStar5" value="5"><label for="softStar5"> </label>
                </div>
              </li>

              <li>
                Hard Vore
                <div class="rating">
                  <input type="radio" name="hardStar" id="hardStar1" value="1"><label for="hardStar1"> </label>
                  <input type="radio" name="hardStar" id="hardStar2" value="2"><label for="hardStar2"> </label>
                  <input type="radio" name="hardStar" id="hardStar3" value="3"><label for="hardStar3"> </label>
                  <input type="radio" name="hardStar" id="hardStar4" value="4"><label for="hardStar4"> </label>
                  <input type="radio" name="hardStar" id="hardStar5" value="5"><label for="hardStar5"> </label>
                </div>
              </li>

              <li>
                Digestion
                <div class="rating">
                  <input type="radio" name="digestionStar" id="digestionStar1" value="1"><label for="digestionStar1"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar2" value="2"><label for="digestionStar2"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar3" value="3"><label for="digestionStar3"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar4" value="4"><label for="digestionStar4"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar5" value="5"><label for="digestionStar5"> </label>
                </div>
              </li>

              <li>
                Disposal
                <div class="rating">
                  <input type="radio" name="disposalStar" id="disposalStar1" value="1"><label for="disposalStar1"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar2" value="2"><label for="disposalStar2"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar3" value="3"><label for="disposalStar3"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar4" value="4"><label for="disposalStar4"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar5" value="5"><label for="disposalStar5"> </label>
                </div>
              </li>
            </ul>

            <ul>
              <li>
                Transformation
                <div class="rating">
                  <input type="radio" name="tfStar" id="tfStar1" value="1"><label for="tfStar1"> </label>
                  <input type="radio" name="tfStar" id="tfStar2" value="2"><label for="tfStar2"> </label>
                  <input type="radio" name="tfStar" id="tfStar3" value="3"><label for="tfStar3"> </label>
                  <input type="radio" name="tfStar" id="tfStar4" value="4"><label for="tfStar4"> </label>
                  <input type="radio" name="tfStar" id="tfStar5" value="5"><label for="tfStar5"> </label>
                </div>
              </li>

              <li>
                Body Part Transformation
                <div class="rating">
                  <input type="radio" name="btfStar" id="btfStar1" value="1"><label for="btfStar1"> </label>
                  <input type="radio" name="btfStar" id="btfStar2" value="2"><label for="btfStar2"> </label>
                  <input type="radio" name="btfStar" id="btfStar3" value="3"><label for="btfStar3"> </label>
                  <input type="radio" name="btfStar" id="btfStar4" value="4"><label for="btfStar4"> </label>
                  <input type="radio" name="btfStar" id="btfStar5" value="5"><label for="btfStar5"> </label>
                </div>
              </li>

              <li>
                Body Swapping
                <div class="rating">
                  <input type="radio" name="bsStar" id="bsStar1" value="1"><label for="bsStar1"> </label>
                  <input type="radio" name="bsStar" id="bsStar2" value="2"><label for="bsStar2"> </label>
                  <input type="radio" name="bsStar" id="bsStar3" value="3"><label for="bsStar3"> </label>
                  <input type="radio" name="bsStar" id="bsStar4" value="4"><label for="bsStar4"> </label>
                  <input type="radio" name="bsStar" id="bsStar5" value="5"><label for="bsStar5"> </label>
                </div>
              </li>

              <li>
                Gender Transformation
                <div class="rating">
                  <input type="radio" name="gStar" id="gStar1" value="1"><label for="gStar1"> </label>
                  <input type="radio" name="gStar" id="gStar2" value="2"><label for="gStar2"> </label>
                  <input type="radio" name="gStar" id="gStar3" value="3"><label for="gStar3"> </label>
                  <input type="radio" name="gStar" id="gStar4" value="4"><label for="gStar4"> </label>
                  <input type="radio" name="gStar" id="gStar5" value="5"><label for="gStar5"> </label>
                </div>
              </li>

              <li>
                Species Transformation
                <div class="rating">
                  <input type="radio" name="sStar" id="sStar1" value="1"><label for="sStar1"> </label>
                  <input type="radio" name="sStar" id="sStar2" value="2"><label for="sStar2"> </label>
                  <input type="radio" name="sStar" id="sStar3" value="3"><label for="sStar3"> </label>
                  <input type="radio" name="sStar" id="sStar4" value="4"><label for="sStar4"> </label>
                  <input type="radio" name="sStar" id="sStar5" value="5"><label for="sStar5"> </label>
                </div>
              </li>

              <li>
                Inanimate Object Transformation
                <div class="rating">
                  <input type="radio" name="iaoStar" id="iaoStar1" value="1"><label for="iaoStar1"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar2" value="2"><label for="iaoStar2"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar3" value="3"><label for="iaoStar3"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar4" value="4"><label for="iaoStar4"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar5" value="5"><label for="iaoStar5"> </label>
                </div>
              </li>
            </ul>
          </div>



      </div>

      <div id ="vorePullout" class="pullout">
        <div id="voreTypes">
          <h1>Input Vore Types Here</h1>
          <ul id="voreList">

          </ul>
          <button type="button" id="addVore" class="button main"><span>Add New Vore</span></button>
        </div>

        <!-- <a href="gameindex.html" id="finish" class="button main" style="vertical-align:middle">Finish</a> -->
      </div>
      <div id="buttonHolder">
        <div id="previewContainer">
          <div id="preview">

          </div>
          <div id ="previewRotation">
            <button type ="button" id="rotateLeft" class="button left rotate" style="vertical-align:middle"><span> </span></button>

            <button type ="button" id="rotateRight" class="button right rotate" style="vertical-align:middle"><span> </span></button>
          </div>
        </div>
        <button type="button" id="next" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="button" id="next2" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="button" id="next3" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="submit" id="finish" class="button main" style="vertical-align:middle"><span>Finish</span></button>
      </div>
      </form>
    </div>
  </div>
</section>


<script src="//cdn.jsdelivr.net/npm/phaser@3.13.0/dist/phaser.min.js"></script>
<script src="/socket.io/socket.io.js"></script>



<script>

  <% if (charList == 'new') { %>
      var charList = '<%- charList %>';
      console.log('charList = ', charList);

      var localPlayerInfo = {
        Identifier:'',
        playerId:'',
        Username:'',
        Description:'',
        head: {
          sprite: 'head_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        body: {
          sprite: 'body_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        tail: {
          sprite: 'tail_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        eyes: {
          outer: 'eyes_01',
          iris: 'eyes_02',
          color: '0xfcf2f2'
        },
        hair: {
          sprite: 'empty',
          color: '0x636363'
        },
        ear: {
          sprite: 'empty',
          color: '0xe0e0e0'
        },
        genitles:{
          sprite: 'empty',
          secondarySprite: 'empty'
        },
        specialList:[],
        spellInventory:[],
        consumedBy:''
      };

      //Set default color hex values in input fields
      document.getElementById('primaryHeadHex').value = localPlayerInfo.head.color.replace("0x", "#");
      document.getElementById('secondaryHeadHex').value = localPlayerInfo.head.secondaryColor.replace("0x", "#");
      document.getElementById('accentHeadHex').value = localPlayerInfo.head.accentColor.replace("0x", "#");
      document.getElementById('hairHex').value = localPlayerInfo.hair.color.replace("0x", "#");
      document.getElementById('earHex').value = localPlayerInfo.ear.color.replace("0x", "#");
      document.getElementById('eyesHex').value = localPlayerInfo.eyes.color.replace("0x", "#");
      document.getElementById('bodyHex').value = localPlayerInfo.body.color.replace("0x", "#");
      document.getElementById('secondaryBodyHex').value = localPlayerInfo.body.secondaryColor.replace("0x", "#");
      document.getElementById('accentBodyHex').value = localPlayerInfo.body.accentColor.replace("0x", "#");
      document.getElementById('tailHex').value = localPlayerInfo.tail.color.replace("0x", "#");
      document.getElementById('secondaryTailHex').value = localPlayerInfo.tail.secondaryColor.replace("0x", "#");
      document.getElementById('accentTailHex').value = localPlayerInfo.tail.accentColor.replace("0x", "#");

      //set default sprite selections
      document.getElementById('body').value = localPlayerInfo.body.sprite;
      document.getElementById('genitles').value = localPlayerInfo.genitles.sprite;
      document.getElementById('head').value = localPlayerInfo.head.sprite;
      document.getElementById('headSecondaryFur').value = localPlayerInfo.head.secondarySprite;
      document.getElementById('headAccentFur').value = localPlayerInfo.head.accentSprite;
      document.getElementById('hair').value = localPlayerInfo.hair.sprite;
      document.getElementById('ear').value = localPlayerInfo.ear.sprite;
      document.getElementById('body').value = localPlayerInfo.body.sprite;
      document.getElementById('bodySecondaryFur').value = localPlayerInfo.body.secondarySprite;
      document.getElementById('bodyAccentFur').value = localPlayerInfo.body.accentSprite;
      document.getElementById('tail').value = localPlayerInfo.tail.sprite;
      document.getElementById('tailSecondaryFur').value = localPlayerInfo.tail.secondarySprite;
      document.getElementById('tailAccentFur').value = localPlayerInfo.tail.accentSprite;

      //set default background color for color selection buttons
      document.getElementsByClassName("selected")[0].style.backgroundColor = localPlayerInfo.head.color.replace("0x", "#");
      document.getElementsByClassName("selected")[1].style.backgroundColor = localPlayerInfo.head.secondaryColor.replace("0x", "#");
      document.getElementsByClassName("selected")[2].style.backgroundColor = localPlayerInfo.head.accentColor.replace("0x", "#");
      document.getElementsByClassName("selected")[3].style.backgroundColor = localPlayerInfo.hair.color.replace("0x", "#");
      document.getElementsByClassName("selected")[4].style.backgroundColor = localPlayerInfo.ear.color.replace("0x", "#");
      document.getElementsByClassName("selected")[5].style.backgroundColor = localPlayerInfo.eyes.color.replace("0x", "#");
      document.getElementsByClassName("selected")[6].style.backgroundColor = localPlayerInfo.body.color.replace("0x", "#");
      document.getElementsByClassName("selected")[7].style.backgroundColor = localPlayerInfo.body.secondaryColor.replace("0x", "#");
      document.getElementsByClassName("selected")[8].style.backgroundColor = localPlayerInfo.body.accentColor.replace("0x", "#");
      document.getElementsByClassName("selected")[9].style.backgroundColor = localPlayerInfo.tail.color.replace("0x", "#");
      document.getElementsByClassName("selected")[10].style.backgroundColor = localPlayerInfo.tail.secondaryColor.replace("0x", "#");
      document.getElementsByClassName("selected")[11].style.backgroundColor = localPlayerInfo.tail.accentColor.replace("0x", "#");




      var voreList = [
        { destination: "Stomach",
          verb: "shoves",
          digestionTimer: "120",
          animation: "1",
          destinationDescrip: "The walls feel hot and slimy as they constrict around you.",
          examineMsgDescrip: "<pred>'s belly looks as though something inside is moving...",
          struggleInsideMsgDescrip: "Pressing against the slimy walls doesn't seem to get much of a reaction from <pred>.",
          struggleOutsideMsgDescrip: "<pred>'s belly bulges out with the outline of a hand print for a moment before returning to it's distended shape.",
          digestionInsideMsgDescrip: "You finally feel your body succumb and are reduced to mush for <pred> to absorb.",
          digestionOutsideMsgDescrip: "The constant movement inside <pred>'s middle finally goes still as a soft gurgling sound comes from their belly."
        } ,
        { destination: "Bowels",
          verb: "forces",
          digestionTimer: "120",
          animation: "2",
          destinationDescrip: "You feel the musky walls of <pred>'s digestive tract undulating around you as you are shoved up their ass.",
          examineMsgDescrip: "<pred>'s lower abdomen seems to be swollen out quite a lot...did something just move?",
          struggleInsideMsgDescrip: "Wriggling about only seems to make that tight fleshy tube squeeze tighter around your body.",
          struggleOutsideMsgDescrip: "The outline of a footprint forms against the surface of <pred>'s lower belly",
          digestionInsideMsgDescrip: "A final powerful squeeze of the muscles around you causes your body to give out and you become a puddle of nutrients to feed <pred>",
          digestionOutsideMsgDescrip: "<pred>'s tummy seems to shrink some as it lets out a satisfied burbling sound."
        },
        { destination: "Balls",
          verb: "presses",
          digestionTimer: "120",
          animation: "3",
          destinationDescrip: "You fall down into a thick, musky puddle of jizz that immediately starts coating your body and you feel the wrinkly walls of <pred>'s scrotum tighten up to welcome you~",
          examineMsgDescrip: "A large bulge between their thighs seems to shift and sway on it's own.",
          struggleInsideMsgDescrip: "The walls of your prison seem to give easily when you push out against them, but they always clench right back down the moment you relax...",
          struggleOutsideMsgDescrip: "A very clear imprint of someone's face bulges out from the side of <pred>'s nutsack.",
          digestionInsideMsgDescrip: "The walls around you suddenly cinch up tightly submerging your head completely in <pred>'s sperm before you finally melt, becoming one with the pool of seed you had been bathing in.",
          digestionOutsideMsgDescrip: "There are a few frantic garbled sounds seeming to come up from <pred>'s crotch before there was a sudden, thick sounding, GLORP and those frantic sounds were reduced to a soft sloshing."
        },
        { destination: "Womb",
          verb: "slurps",
          digestionTimer: "120",
          animation: "4",
          destinationDescrip: "You are wholly enveloped in a humid heat as you are deposited into a wet and slimy chamber. The air is filled with the scent of <pred>'s arousal and their heart can be heard beating just above.",
          examineMsgDescrip: "<pred>'s tummy looks swollen... could they be pregnant?",
          struggleInsideMsgDescrip: "Struggling seems to do little good, but you do feel the gentle rubbing of <pred>'s hand over your shape as they press the bulges you make back into their core.",
          struggleOutsideMsgDescrip: "<pred>'s distended belly seems to rock and sway on it's own, they coo softly and seem to rub over their middle affectionately.",
          digestionInsideMsgDescrip: "Your body seems to feel soggy and wet as the heat surrounding you grows more intense. The walls seem to flex down harder and harder until finally... splorsh! You succumb to <pred>'s arousal and are reduced to a pool of fem-cum.",
          digestionOutsideMsgDescrip: "<pred>'s middle suddenly compacts down noticeably and their face flushes red as they bite their lower lip. A muffled sloshing sound could be heard seemingly coming from their belly!"
        }
      ];
  <% } else { %>
      var charList = <%- charList %>;
      console.log('charList = ', charList);
      var localPlayerInfo = charList;
      console.log('localPlayerInfo at start = ', localPlayerInfo);
      document.getElementById('firstName').value = charList.firstName;
      document.getElementById('lastName').value = charList.lastName;
      document.getElementById('nickName').value = charList.nickName;
      document.getElementById('speciesName').value = charList.speciesName;
      if (charList.pronouns == 1){
        document.getElementById('she/her').value = charList.pronouns;
        document.getElementById('she/her').checked = true;
      }
      if (charList.pronouns == 2){
        document.getElementById('he/his').value = charList.pronouns;
        document.getElementById('he/his').checked = true;
      }
      document.getElementById('icDescrip').value = charList.icDescrip;
      document.getElementById('oocDescrip').value = charList.oocDescrip;

      //set default hex colors
      document.getElementById('primaryHeadHex').value = charList.head.color.replace("0x", "#");
      document.getElementById('secondaryHeadHex').value = charList.head.secondaryColor.replace("0x", "#");
      document.getElementById('accentHeadHex').value = charList.head.accentColor.replace("0x", "#");
      document.getElementById('hairHex').value = charList.hair.color.replace("0x", "#");
      document.getElementById('earHex').value = charList.ear.color.replace("0x", "#");
      document.getElementById('eyesHex').value = charList.eyes.color.replace("0x", "#");
      document.getElementById('bodyHex').value = charList.body.color.replace("0x", "#");
      document.getElementById('secondaryBodyHex').value = charList.body.secondaryColor.replace("0x", "#");
      document.getElementById('accentBodyHex').value = charList.body.accentColor.replace("0x", "#");
      document.getElementById('tailHex').value = charList.tail.color.replace("0x", "#");
      document.getElementById('secondaryTailHex').value = charList.tail.secondaryColor.replace("0x", "#");
      document.getElementById('accentTailHex').value = charList.tail.accentColor.replace("0x", "#");

      //set default sprite selections
      document.getElementById('body').value = localPlayerInfo.body.sprite;
      document.getElementById('genitles').value = localPlayerInfo.genitles.sprite;
      document.getElementById('head').value = localPlayerInfo.head.sprite;
      document.getElementById('headSecondaryFur').value = localPlayerInfo.head.secondarySprite;
      document.getElementById('headAccentFur').value = localPlayerInfo.head.accentSprite;
      document.getElementById('hair').value = localPlayerInfo.hair.sprite;
      document.getElementById('ear').value = localPlayerInfo.ear.sprite;
      document.getElementById('body').value = localPlayerInfo.body.sprite;
      document.getElementById('bodySecondaryFur').value = localPlayerInfo.body.secondarySprite;
      document.getElementById('bodyAccentFur').value = localPlayerInfo.body.accentSprite;
      document.getElementById('tail').value = localPlayerInfo.tail.sprite;
      document.getElementById('tailSecondaryFur').value = localPlayerInfo.tail.secondarySprite;
      document.getElementById('tailAccentFur').value = localPlayerInfo.tail.accentSprite;

      //set default background color for color selection buttons
      document.getElementsByClassName("selected")[0].style.backgroundColor = localPlayerInfo.head.color.replace("0x", "#");
      document.getElementsByClassName("selected")[1].style.backgroundColor = localPlayerInfo.head.secondaryColor.replace("0x", "#");
      document.getElementsByClassName("selected")[2].style.backgroundColor = localPlayerInfo.head.accentColor.replace("0x", "#");
      document.getElementsByClassName("selected")[3].style.backgroundColor = localPlayerInfo.hair.color.replace("0x", "#");
      document.getElementsByClassName("selected")[4].style.backgroundColor = localPlayerInfo.ear.color.replace("0x", "#");
      document.getElementsByClassName("selected")[5].style.backgroundColor = localPlayerInfo.eyes.color.replace("0x", "#");
      document.getElementsByClassName("selected")[6].style.backgroundColor = localPlayerInfo.body.color.replace("0x", "#");
      document.getElementsByClassName("selected")[7].style.backgroundColor = localPlayerInfo.body.secondaryColor.replace("0x", "#");
      document.getElementsByClassName("selected")[8].style.backgroundColor = localPlayerInfo.body.accentColor.replace("0x", "#");
      document.getElementsByClassName("selected")[9].style.backgroundColor = localPlayerInfo.tail.color.replace("0x", "#");
      document.getElementsByClassName("selected")[10].style.backgroundColor = localPlayerInfo.tail.secondaryColor.replace("0x", "#");
      document.getElementsByClassName("selected")[11].style.backgroundColor = localPlayerInfo.tail.accentColor.replace("0x", "#");

      ratingClass = document.getElementsByClassName("rating");
      //console.log('ratingClass = ', ratingClass[0].firstElementChild.name);
      for (i = 0; i < ratingClass.length; i++) {
        const ratingName = ratingClass[i].firstElementChild.name;
        //console.log('ratingName = ', ratingName);
        var ratingGroup = document.getElementsByName(ratingName);
        //console.log('ratingGroup = ', ratingGroup);
        for (j = 0; j < ratingGroup.length; j++) {
          //console.log('ratingName = ', ratingName);
          //ratingName = 'cvStar';
          //console.log('charList.ratings = ', charList.ratings);
          //console.log('ratingGroup[j].value = ', ratingGroup[j].value, 'charList.ratings.',ratingName, ' = ', charList.ratings[ratingName])
          if (ratingGroup[j].value == charList.ratings[ratingName]) {
            ratingGroup[j].checked = true;
            //console.log('checking box');
          }
        }
        //ratingGroup.find(setRatings);
        //setRatings(ratingName, ratingGroup);
      }

      var voreList = charList.voreTypes;
  <% } %>

  var coll = document.getElementsByClassName("collapsible");
  var i;

  for (i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
      for (i = 0; i < coll.length; i++) {
        coll[i].classList.remove("active");
        var content = coll[i].nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        }
      }
      this.classList.toggle("active");
      var content = this.nextElementSibling;
      if (content.style.display === "block") {
        content.style.display = "none";
      } else {
        content.style.display = "block";
      }
    });
  }


  var currentVoreCount = document.getElementById("voreList").childElementCount;
  createVoreList(voreList);



  function createVoreList() {
    currentVoreCount = document.getElementById("voreList").childElementCount;
    console.log('document.getElementById("voreList").childElementCount;', document.getElementById("voreList").childElementCount);
    if (!currentVoreCount) {

      currentVoreCount = 0;
    }
    console.log('currentVoreCount = ', currentVoreCount);

    for(i = currentVoreCount; i < voreList.length; i++) {
      var br = document.createElement('br');
      var br2 = document.createElement('br');
      var br3 = document.createElement('br');
      var br4 = document.createElement('br');
      var li = document.createElement("li");
      var button = document.createElement("button");
      var examineButton = document.createElement('button');
      var struggleInsideButton = document.createElement('button');
      var struggleOutsideButton = document.createElement('button');
      var digestionInsideButton = document.createElement('button');
      var digestionOutsideButton = document.createElement('button');
      var div = document.createElement("div");
      var div2 = document.createElement("div");
      var div3 = document.createElement("div");
      var examineMsgDiv = document.createElement("div");
      var examineContentDiv = document.createElement("div");
      var struggleInsideContentDiv = document.createElement("div");
      var struggleOutsideContentDiv = document.createElement("div");
      var digestionInsideContentDiv = document.createElement("div");
      var digestionOutsideContentDiv = document.createElement("div");
      var destinationLbl = document.createElement('label');
      var destination = document.createElement('input');
      var destinationDescripLbl = document.createElement('label');
      var destinationDescrip = document.createElement('textarea');
      var verbLbl = document.createElement('label');
      var verb = document.createElement('input');
      var digestionTimerLbl = document.createElement('label');
      var digestionTimer = document.createElement('input');
      var animationLbl = document.createElement('label');
      var animation = document.createElement('select');
      var examineMsgLbl = document.createElement('label');
      var examineMsgDescrip = document.createElement('textarea');
      var struggleInsideMsgLbl = document.createElement('label');
      var struggleInsideMsgDescrip = document.createElement('textarea');
      var struggleOutsideMsgLbl = document.createElement('label');
      var struggleOutsideMsgDescrip = document.createElement('textarea');
      var digestionInsideMsgLbl = document.createElement('label');
      var digestionInsideMsgDescrip = document.createElement('textarea');
      var digestionOutsideMsgLbl = document.createElement('label');
      var digestionOutsideMsgDescrip = document.createElement('textarea');

      //li.className = "voreListItem";

      button.id = 'voreOption'+i;
      button.className = 'voreTypecollapsible';
      button.type = 'button';
      button.innerHTML = "<h1>" + voreList[i].destination; + "</h1>"
      li.appendChild(button);

      div.id = 'content'+i;
      div.className = "voreTypecontent";
      div2.id = 'voreClassifiers'+i;
      div2.className = 'voreClassifiers';
      div.appendChild(div2);
      div3.className = 'activityMessages'
      div.appendChild(div3);

      destinationLbl.innerHTML = 'Destination: ';
      destinationLbl.htmlFor = 'destination'+i;
      div2.appendChild(destinationLbl);
      //onkeyup='updateBttnName(event)'
      destination.id = 'destination'+i;
      destination.name = 'destination';
      destination.onkeyup = updateBttnName;
      destination.type = 'text';
      destination.autocomplete = 'off';
      destination.className = 'form-control';
      destination.placeholder = 'Destination';
      destination.ariaLabel = 'Destination';
      destination.value = voreList[i].destination;
      div2.appendChild(destination);
      div2.appendChild(br);

      verbLbl.innerHTML = 'Verb: ';
      verbLbl.htmlFor = 'verb'+i;
      div2.appendChild(verbLbl);

      verb.id = 'verb'+i;
      verb.name = 'verb';
      verb.type = 'text';
      verb.autocomplete = 'off';
      verb.className = 'form-control';
      verb.placeholder = 'Destination Verb...';
      verb.ariaLabel = 'verb';
      verb.value = voreList[i].verb;
      div2.appendChild(verb);
      div2.appendChild(br2);

      var test = document.createTextNode ('Digestion Timer: ');
      div2.appendChild(test);

      digestionTimer.id = 'digestionTimer'+i;
      digestionTimer.name = 'digestionTimer';
      digestionTimer.type = 'number';
      digestionTimer.autocomplete = 'off';
      digestionTimer.className = 'form-control';
      digestionTimer.placeholder = 'Digestion Timer (In Seconds)';
      digestionTimer.ariaLabel = 'digestionTimer';
      digestionTimer.value = voreList[i].digestionTimer;
      div2.appendChild(digestionTimer);
      div2.appendChild(br3);

      var test2 = document.createTextNode ('Animation: ');
      div2.appendChild(test2);

      animation.id = 'animation'+i;
      animation.name = 'animation';
      animation.innerHTML = '<option value="1">Oral Vore</option><option value="2">Anal Vore</option><option value="3">Cock Vore</option><option value="4">Unbirth</option><option value="5">Tail Vore</option><option value="6">Absorbtion</option>';
      animation.value = voreList[i].animation;
      div2.appendChild(animation);
      div2.appendChild(br4);

      destinationDescrip.id = 'destinationDescrip'+i;
      destinationDescrip.name = 'destinationDescrip';
      destinationDescrip.autocomplete = 'off';
      destinationDescrip.className = 'form-control';
      destinationDescrip.placeholder = "Describe the inside of the prey's destination...";
      destinationDescrip.areaLabel = 'destinationDescrip';
      destinationDescrip.innerHTML = voreList[i].destinationDescrip;
      div2.appendChild(destinationDescrip);

      examineButton.id = 'examineButton'+i;
      examineButton.className = 'actMsgcollapsible';
      examineButton.type = 'button';
      examineButton.innerHTML = "Examine Messages";
      div3.appendChild(examineButton);

      examineMsgDiv.className = 'actMsgcontent';
      //examineMsgDiv.innerHTML = 'testing activity messages';
      examineMsgLbl.innerHTML = 'Describe what people would see when examining you while this destination is "full":';
      examineMsgLbl.htmlFor = 'examineMsgDescrip'+i;
      examineMsgDiv.appendChild(examineMsgLbl);
      examineMsgDescrip.id = 'examineMsgDescrip'+i;
      examineMsgDescrip.name = 'examineMsgDescrip';
      examineMsgDescrip.autocomplete = 'off';
      examineMsgDescrip.className = 'form-control';
      examineMsgDescrip.placeholder = 'What do you look like when this destination is "full"?';
      examineMsgDescrip.areaLabel = 'examineMsgDescrip';
      examineMsgDescrip.innerHTML = voreList[i].examineMsgDescrip;
      examineMsgDiv.appendChild(examineMsgDescrip);
      div3.appendChild(examineMsgDiv);

      struggleInsideButton.id = 'struggleInsideMsgButton'+i;
      struggleInsideButton.className = 'actMsgcollapsible';
      struggleInsideButton.type = 'button';
      struggleInsideButton.innerHTML = "Struggle Messages (Interior)";
      div3.appendChild(struggleInsideButton);

      struggleInsideContentDiv.className = 'actMsgcontent';
      //struggleInsideMsgDiv.innerHTML = 'testing activity messages';
      struggleInsideMsgLbl.innerHTML = 'Describe what your prey experiances when struggling:';
      struggleInsideMsgLbl.htmlFor = 'struggleInsideMsgDescrip'+i;
      struggleInsideContentDiv.appendChild(struggleInsideMsgLbl);
      struggleInsideMsgDescrip.id = 'struggleInsideMsgDescrip'+i;
      struggleInsideMsgDescrip.name = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.autocomplete = 'off';
      struggleInsideMsgDescrip.className = 'form-control';
      struggleInsideMsgDescrip.placeholder = 'What does your prey experiance when struggling while inside this destination?';
      struggleInsideMsgDescrip.areaLabel = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.innerHTML = voreList[i].struggleInsideMsgDescrip;
      struggleInsideContentDiv.appendChild(struggleInsideMsgDescrip);
      div3.appendChild(struggleInsideContentDiv);

      struggleOutsideButton.id = 'struggleOutsideMsgButton'+i;
      struggleOutsideButton.className = 'actMsgcollapsible';
      struggleOutsideButton.type = 'button';
      struggleOutsideButton.innerHTML = "Struggle Messages (Exterior)";
      div3.appendChild(struggleOutsideButton);

      struggleOutsideContentDiv.className = 'actMsgcontent';
      //struggleOutsideMsgDiv.innerHTML = 'testing activity messages';
      struggleOutsideMsgLbl.innerHTML = 'Describe what an onlooker may see when your prey is struggling inside this destination:';
      struggleOutsideMsgLbl.htmlFor = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgLbl);
      struggleOutsideMsgDescrip.id = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideMsgDescrip.name = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.autocomplete = 'off';
      struggleOutsideMsgDescrip.className = 'form-control';
      struggleOutsideMsgDescrip.placeholder = 'What do others see when prey is struggling in here?';
      struggleOutsideMsgDescrip.areaLabel = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.innerHTML = voreList[i].struggleOutsideMsgDescrip;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgDescrip);
      div3.appendChild(struggleOutsideContentDiv);

      digestionInsideButton.id = 'digestionInsideMsgButton'+i;
      digestionInsideButton.className = 'actMsgcollapsible';
      digestionInsideButton.type = 'button';
      digestionInsideButton.innerHTML = "Digestion Messages (Interior)";
      div3.appendChild(digestionInsideButton);

      digestionInsideContentDiv.className = 'actMsgcontent';
      //digestionInsideMsgDiv.innerHTML = 'testing activity messages';
      digestionInsideMsgLbl.innerHTML = 'Describe what your prey may experiance in their final moments as they are digested in this destination:';
      digestionInsideMsgLbl.htmlFor = 'digestionInsideMsgDescrip'+i;
      digestionInsideContentDiv.appendChild(digestionInsideMsgLbl);
      digestionInsideMsgDescrip.id = 'digestionInsideMsgDescrip'+i;
      digestionInsideMsgDescrip.name = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.autocomplete = 'off';
      digestionInsideMsgDescrip.className = 'form-control';
      digestionInsideMsgDescrip.placeholder = 'What does your prey experiance in the moment they are completely digested here?';
      digestionInsideMsgDescrip.areaLabel = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.innerHTML = voreList[i].digestionInsideMsgDescrip;
      digestionInsideContentDiv.appendChild(digestionInsideMsgDescrip);
      div3.appendChild(digestionInsideContentDiv);

      digestionOutsideButton.id = 'digestionOutsideMsgButton'+i;
      digestionOutsideButton.className = 'actMsgcollapsible';
      digestionOutsideButton.type = 'button';
      digestionOutsideButton.innerHTML = "Digestion Messages (Exterior)";
      div3.appendChild(digestionOutsideButton);

      digestionOutsideContentDiv.className = 'actMsgcontent';
      //digestionOutsideMsgDiv.innerHTML = 'testing activity messages';
      digestionOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may notice as this destination finishes digetsing your prey:';
      digestionOutsideMsgLbl.htmlFor = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgLbl);
      digestionOutsideMsgDescrip.id = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideMsgDescrip.name = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.autocomplete = 'off';
      digestionOutsideMsgDescrip.className = 'form-control';
      digestionOutsideMsgDescrip.placeholder = 'What do others around you notice as you finish digesting prey here?';
      digestionOutsideMsgDescrip.areaLabel = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.innerHTML = voreList[i].digestionOutsideMsgDescrip;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgDescrip);
      div3.appendChild(digestionOutsideContentDiv);

      li.appendChild(div);


      button.addEventListener("click", function() {

        var voreTypecollapsible = document.getElementsByClassName("voreTypecollapsible");
        for (i = 0; i < voreTypecollapsible.length; i++) {
          voreTypecollapsible[i].classList.remove("active");
          var content = voreTypecollapsible[i].nextElementSibling;
          if (content.style.display === "block") {
            content.style.display = "none";
          }
        }

        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      examineButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          actMsgcollapsible[i].classList.remove("active");
          var content = actMsgcollapsible[i].nextElementSibling;
          if (content.style.display === "block") {
            content.style.display = "none";
          }
        }
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      struggleInsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          actMsgcollapsible[i].classList.remove("active");
          var content = actMsgcollapsible[i].nextElementSibling;
          if (content.style.display === "block") {
            content.style.display = "none";
          }
        }
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      struggleOutsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          actMsgcollapsible[i].classList.remove("active");
          var content = actMsgcollapsible[i].nextElementSibling;
          if (content.style.display === "block") {
            content.style.display = "none";
          }
        }
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      digestionInsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          actMsgcollapsible[i].classList.remove("active");
          var content = actMsgcollapsible[i].nextElementSibling;
          if (content.style.display === "block") {
            content.style.display = "none";
          }
        }
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      digestionOutsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          actMsgcollapsible[i].classList.remove("active");
          var content = actMsgcollapsible[i].nextElementSibling;
          if (content.style.display === "block") {
            content.style.display = "none";
          }
        }
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });

      document.getElementById("voreList").appendChild(li);
    }
  }

  function updateBttnName(event) {
    //console.log(event.srcElement.id);
    //console.log('text box value = ', event.srcElement.value);
    var parent = document.getElementById(event.srcElement.id).parentElement.id;
    //console.log('parent = ', parent);
    var grandParent = document.getElementById(parent).parentElement.id;
    //console.log('grandParent = ', grandParent);

    var parentSibling = document.getElementById(grandParent).previousSibling.id;
    //console.log('grandParent = ', grandParent);
    document.getElementById(parentSibling).innerHTML = '<h1>'+event.srcElement.value+'</h1>';
  }

  gender.addEventListener("click", function() {
    console.log('gender clicked');
    document.getElementById("genderPullout").style.display = "block";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "block";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
    //document.getElementById("genderPullout").style.transform = translateX(50px);
  });
  about.addEventListener("click", function() {
    console.log('about clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "block";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
  });
  kinks.addEventListener("click", function() {
    console.log('kinks clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "block";
    document.getElementById("finish").style.display = "none";
  });
  vore.addEventListener("click", function() {
    console.log('Vore Types clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "block";
  });
  next.addEventListener("click", function() {
    console.log('next clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "block";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
  });
  next2.addEventListener("click", function() {
    console.log('next2 clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "block";
    document.getElementById("finish").style.display = "none";
  });
  next3.addEventListener("click", function() {
    console.log('next clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "block";
  });
  addVore.addEventListener("click", function() {
    console.log('Add New Vore clicked');
    voreList.push(
      { destination: "New Vore",
        verb: "",
        digestionTimer: "120",
        animation: "1",
        destinationDescrip: "",
        examineMsgDescrip: "",
        struggleInsideMsgDescrip: "",
        struggleOutsideMsgDescrip: "",
        digestionInsideMsgDescrip: "",
        digestionOutsideMsgDescrip: ""
      }
    );
    //var voreArray = voreList[vorelist.length - 1];
    createVoreList(voreList[voreList.length - 1]);
    console.log('voreList = ', voreList[voreList.length - 1]);
  });


  var bodySelection = 1;
  var genitleSelection = 1;
  var headSelection = 1;
  var secondaryFurSelection = 1;
  var rotation = 1;
  console.log('bodySelection = ', bodySelection);
  console.log('genitleSelection = ', genitleSelection);
  var config = {
    type: Phaser.AUTO,
    parent: 'preview',
    width: 200,
    height: 200,
    physics: {
      default: 'arcade',
      arcade: {
        debug: false,
        gravity: { y: 0 }
      }
    },
    scene: {
      preload: preload,
      create: create,
      update: update
    }
  };

  var game = new Phaser.Game(config);
  console.log('localPlayerInfo before preload = ', localPlayerInfo);

  function preload() {
    this.load.spritesheet('empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
    this.load.spritesheet('head_01', './../assets/spritesheets/head_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('head_02', './../assets/spritesheets/head_02.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('head_03', './../assets/spritesheets/head_03.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('body_01', './../assets/spritesheets/body_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('tail_01', './../assets/spritesheets/tail_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('hair_01', './../assets/spritesheets/hair_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('ear_01', './../assets/spritesheets/ear_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('eyes_01', './../assets/spritesheets/eyes_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('eyes_02', './../assets/spritesheets/eyes_02.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryBody_01', './../assets/spritesheets/secondaryBody_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryBody_02', './../assets/spritesheets/secondaryBody_02.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryBody_03', './../assets/spritesheets/secondaryBody_03.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryHead_01', './../assets/spritesheets/secondaryHead_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryHead_02', './../assets/spritesheets/secondaryHead_02.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryHead_03', './../assets/spritesheets/secondaryHead_03.png', {frameWidth: 182, frameHeight: 190});
  }

  function create() {
    console.log('localPlayerInfo in create = ', localPlayerInfo);
    var self = this;
    this.socket = io();
    this.otherPlayers = this.physics.add.group();
    //cursors = this.input.keyboard.createCursorKeys();
    //console.log('self.socket = ', self.socket);
    this.socket.on('currentPlayers', function (players, spells) {
      Object.keys(players).forEach(function (id) {
        console.log('Local players socket Id = ', players[id].playerId);
        if (players[id].playerId === self.socket.id) {
          console.log('players[id] = ', players[id]);
          addPlayer(self, players[id]);
        } else {
          return;
        }
      });
    });






    let isMouseDown = false;
    let colorButton = 1;
    class Picker {
      constructor(target, width, height) {
        this.target = target;
        this.width = width;
        this.height = height;
        this.target.width = width;
        this.target.height = height;
        //Get context
        this.context = this.target.getContext("2d");
        //Circle
        this.pickerCircle = { x: 10, y: 10, width: 7, height: 7 };



        this.listenForEvents();
      }

      draw() {
        this.build();
      }

      build() {
        let gradient = this.context.createLinearGradient(0, 0, this.width, 0);

        //Color Stops
        gradient.addColorStop(0, "rgb(255, 0, 0)");
        gradient.addColorStop(0.15, "rgb(255, 0, 255)");
        gradient.addColorStop(0.33, "rgb(0, 0, 255)");
        gradient.addColorStop(0.49, "rgb(0, 255, 255)");
        gradient.addColorStop(0.67, "rgb(0, 255, 0)");
        gradient.addColorStop(0.84, "rgb(255, 255, 0)");
        gradient.addColorStop(1, "rgb(255, 0, 0)");
        //Fill it
        this.context.fillStyle = gradient;
        this.context.fillRect(0, 0, this.width, this.height);

        //Apply black & white
        gradient = this.context.createLinearGradient(0, 0, 0, this.height);
        gradient.addColorStop(0, "rgba(255, 255, 255, 1)");
        gradient.addColorStop(0.5, "rgba(255, 255, 255, 0)");
        gradient.addColorStop(0.5, "rgba(0, 0, 0, 0)");
        gradient.addColorStop(1, "rgba(0, 0, 0, 1)");
        this.context.fillStyle = gradient;
        this.context.fillRect(0, 0, this.width, this.height);

        //Circle
        this.context.beginPath();
        this.context.arc(this.pickerCircle.x, this.pickerCircle.y, this.pickerCircle.width, 0, Math.PI * 2);
        this.context.strokeStyle = "black";
        this.context.stroke();
        this.context.closePath();

      }
      listenForEvents() {

        const onMouseDown = (e) => {
          let colorPickerRect = document.getElementById('color-picker').getBoundingClientRect();
          let currentX = e.clientX - colorPickerRect.left;
          let currentY = e.clientY - colorPickerRect.top;
          //console.log('currentX = ', currentX, '\n', 'currentY = ', currentY, '\n', 'e.clientX = ', e.clientX, '\n', 'e.clientY = ', e.clientY, '\n', 'this.target.offsetLeft = ', this.target.offsetLeft, '\n', 'this.target.offsetTop = ', this.target.offsetTop);
          /**if(currentY > this.pickerCircle.y && currentY < this.pickerCircle.y + this.pickerCircle.width && currentX > this.pickerCircle.x && currentX < this.pickerCircle.x + this.pickerCircle.width) {
            isMouseDown = true;
          } else {
            this.pickerCircle.x = currentX;
            this.pickerCircle.y = currentY;
          }**/
          isMouseDown = true;
          this.pickerCircle.x = currentX;
          this.pickerCircle.y = currentY;
        }
        const onMouseMove = (e) => {
          if (isMouseDown) {
            let colorPickerRect = document.getElementById('color-picker').getBoundingClientRect();
            let currentX = e.clientX - colorPickerRect.left;
            let currentY = e.clientY - colorPickerRect.top;
            this.pickerCircle.x = currentX;
            this.pickerCircle.y = currentY;
          }
        }
        const onMouseUp = () => {
          setTimeout(myFunction, 10);
          function myFunction() {
            isMouseDown = false;
          }
        }
        //Register
        this.target.addEventListener("mousedown", onMouseDown);
        this.target.addEventListener("mousedown", () => this.onChangeCallback(this.getPickedColor()));
        this.target.addEventListener("mousemove", onMouseMove);
        this.target.addEventListener("mousemove", () => this.onChangeCallback(this.getPickedColor()));
        document.addEventListener("mouseup", onMouseUp);
      }

      getPickedColor() {
        let imageData = this.context.getImageData(this.pickerCircle.x, this.pickerCircle.y, 1, 1);
          return {r: imageData.data[0], g: imageData.data[1], b: imageData.data[2] };
      }
      onChange(callback) {
        this.onChangeCallback = callback;
      }
    }
    let picker = new Picker(document.getElementById("color-picker"), 250, 220);
    //draw
    setInterval(() => picker.draw(), 1);
    picker.onChange((color) => {
      console.log("colorButton = ", colorButton);
      let selected = "";
      if(colorButton == 1) {
        selected = document.getElementsByClassName("selected")[0];
      }
      if(colorButton == 2) {
        selected = document.getElementsByClassName("selected")[1];
      }
      if(colorButton == 3) {
        selected = document.getElementsByClassName("selected")[2];
      }
      if(colorButton == 4) {
        selected = document.getElementsByClassName("selected")[3];
      }
      if(colorButton == 5) {
        selected = document.getElementsByClassName("selected")[4];
      }
      if(colorButton == 6) {
        selected = document.getElementsByClassName("selected")[5];
      }
      if(colorButton == 7) {
        selected = document.getElementsByClassName("selected")[6];
      }
      if(colorButton == 8) {
        selected = document.getElementsByClassName("selected")[7];
      }
      if(colorButton == 9) {
        selected = document.getElementsByClassName("selected")[8];
      }
      if(colorButton == 10) {
        selected = document.getElementsByClassName("selected")[9];
      }
      if(colorButton == 11) {
        selected = document.getElementsByClassName("selected")[10];
      }


      if (isMouseDown == true) {
      console.log('color.r = ', color.r, '\n', 'color.g = ', color.g, '\n', 'color.b', color.b);
        selected.style.backgroundColor = 'rgb(' + [color.r,color.g,color.b].join(',') + ')';
        var hexColorCode = "#" + getHex(color.r) + getHex(color.g) + getHex(color.b);
        var gameColorCode = hexColorCode.replace("#", "0x");
        if(colorButton == 1) {
          localPlayerInfo.head.color = gameColorCode;
          document.getElementById('primaryHeadHex').value = hexColorCode;
          console.log('head.color gameColorCode = ', localPlayerInfo.head.color);
        }
        if(colorButton == 2) {
          localPlayerInfo.head.secondaryColor = gameColorCode;
          document.getElementById('secondaryHeadHex').value = hexColorCode;
          console.log('head.secondaryColor gameColorCode = ', localPlayerInfo.head.secondaryColor);
        }
        if(colorButton == 3) {
          localPlayerInfo.head.accentColor = gameColorCode;
          document.getElementById('accentHeadHex').value = hexColorCode;
          console.log('head.accentColor gameColorCode = ', localPlayerInfo.head.accentColor);
        }
        if(colorButton == 4) {
          localPlayerInfo.hair.color = gameColorCode;
          document.getElementById('hairHex').value = hexColorCode;
          console.log('hair.color gameColorCode = ', localPlayerInfo.hair.color);
        }
        if(colorButton == 5) {
          localPlayerInfo.ear.color = gameColorCode;
          document.getElementById('earHex').value = hexColorCode;
          console.log('ear.color gameColorCode = ', localPlayerInfo.ear.color);
        }
        if(colorButton == 6) {
          localPlayerInfo.eyes.color = gameColorCode;
          document.getElementById('eyesHex').value = hexColorCode;
          console.log('eyes.color gameColorCode = ', localPlayerInfo.eyes.color);
        }
        if(colorButton == 7) {
          localPlayerInfo.body.color = gameColorCode;
          document.getElementById('bodyHex').value = hexColorCode;
          console.log('body.color gameColorCode = ', localPlayerInfo.body.color);
        }
        if(colorButton == 8) {
          localPlayerInfo.body.secondaryColor = gameColorCode;
          document.getElementById('secondaryBodyHex').value = hexColorCode;
          console.log('body.secondaryColor gameColorCode = ', localPlayerInfo.body.secondaryColor);
        }
        if(colorButton == 9) {
          localPlayerInfo.body.accentColor = gameColorCode;
          document.getElementById('accentBodyHex').value = hexColorCode;
          console.log('body.accentColor gameColorCode = ', localPlayerInfo.body.accentColor);
        }
        if(colorButton == 10) {
          localPlayerInfo.tail.color = gameColorCode;
          document.getElementById('tailHex').value = hexColorCode;
          console.log('body.accentColor gameColorCode = ', localPlayerInfo.body.accentColor);
        }
        if(colorButton == 11) {
          localPlayerInfo.tail.secondaryColor = gameColorCode;
          document.getElementById('secondaryTailHex').value = hexColorCode;
          console.log('body.accentColor gameColorCode = ', localPlayerInfo.body.accentColor);
        }
        if(colorButton == 12) {
          localPlayerInfo.tail.accentColor = gameColorCode;
          document.getElementById('accentTailHex').value = hexColorCode;
          console.log('body.accentColor gameColorCode = ', localPlayerInfo.body.accentColor);
        }


        self.socket.emit('characterUpdate', localPlayerInfo);
        }
    });

    document.getElementById("primaryHeadHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.head.color = gameColorCode;
      document.getElementsByClassName("selected")[0].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("secondaryHeadHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.head.secondaryColor = gameColorCode;
      document.getElementsByClassName("selected")[1].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("accentHeadHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.head.accentColor = gameColorCode;
      document.getElementsByClassName("selected")[2].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("hairHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.hair.color = gameColorCode;
      document.getElementsByClassName("selected")[3].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("earHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.ear.color = gameColorCode;
      document.getElementsByClassName("selected")[4].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("eyesHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.eyes.color = gameColorCode;
      document.getElementsByClassName("selected")[5].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("bodyHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.body.color = gameColorCode;
      document.getElementsByClassName("selected")[6].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("secondaryBodyHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.body.secondaryBodyColor = gameColorCode;
      document.getElementsByClassName("selected")[7].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("accentBodyHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.body.accentColor = gameColorCode;
      document.getElementsByClassName("selected")[8].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("tailHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.tail.color = gameColorCode;
      document.getElementsByClassName("selected")[9].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("secondaryTailHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.tail.secondaryColor = gameColorCode;
      document.getElementsByClassName("selected")[10].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementById("accentTailHex").addEventListener("input", function(i) {
      console.log('colorUpdate i = ', i.srcElement.value);
      var gameColorCode = i.srcElement.value.replace("#", "0x");
      localPlayerInfo.tail.accentColor = gameColorCode;
      document.getElementsByClassName("selected")[11].style.backgroundColor = i.srcElement.value;
      self.socket.emit('characterUpdate', localPlayerInfo);
    });
    document.getElementsByClassName("colorQuickSelectBtn")[0].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.head.color;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.head.secondaryColor = gameColorCode
      document.getElementById("secondaryHeadHex").value = hexColorCode;
      document.getElementsByClassName("selected")[1].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[1].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.head.secondaryColor;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.head.accentColor = gameColorCode
      document.getElementById("accentHeadHex").value = hexColorCode;
      document.getElementsByClassName("selected")[2].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[2].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.head.secondaryColor;
      var hexColorCode = gameColorCode.replace("0x", "#");
      console.log('you were right!');
      localPlayerInfo.ear.color = gameColorCode
      document.getElementById("earHex").value = hexColorCode;
      document.getElementsByClassName("selected")[4].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[3].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.head.color;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.body.color = gameColorCode
      document.getElementById("bodyHex").value = hexColorCode;
      document.getElementsByClassName("selected")[6].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[4].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.head.secondaryColor;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.body.secondaryColor = gameColorCode
      document.getElementById("secondaryBodyHex").value = hexColorCode;
      document.getElementsByClassName("selected")[7].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[5].addEventListener("click", function() {
      console.log('you called dis shit!');
      var gameColorCode = localPlayerInfo.head.accentColor;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.body.accentColor = gameColorCode
      document.getElementById("accentBodyHex").value = hexColorCode;
      document.getElementsByClassName("selected")[8].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[6].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.body.color;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.tail.color = gameColorCode
      document.getElementById("tailHex").value = hexColorCode;
      document.getElementsByClassName("selected")[9].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[7].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.body.secondaryColor;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.tail.secondaryColor = gameColorCode
      document.getElementById("secondaryTailHex").value = hexColorCode;
      document.getElementsByClassName("selected")[10].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    document.getElementsByClassName("colorQuickSelectBtn")[8].addEventListener("click", function() {
      var gameColorCode = localPlayerInfo.body.accentColor;
      var hexColorCode = gameColorCode.replace("0x", "#");
      localPlayerInfo.tail.accentColor = gameColorCode
      document.getElementById("accentTailHex").value = hexColorCode;
      document.getElementsByClassName("selected")[11].style.backgroundColor = hexColorCode;
      self.socket.emit('characterUpdate', localPlayerInfo);
    })
    // function colorUpdate(i) {
    //   console.log('colorUpdate i = ', i);
    // }

    function getHex(color) {
      var hex = parseInt(color).toString(16);
      return hex.length == 1 ? "0" + hex : hex;
    };



    document.getElementsByClassName("colorQuickSelect")[0].style.display = "block";
    headColorBtn.addEventListener("click", function() {
      console.log('headColorBtn clicked');
      colorButton = 1;
      //console.log(document.getElementsByClassName("colorQuickSelect"));
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "block";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    secondaryHeadColorBtn.addEventListener("click", function() {
      console.log('secondaryHeadColorBtn clicked');
      colorButton = 2;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    accentHeadColorBtn.addEventListener("click", function() {
      console.log('accentHeadColorBtn clicked');
      colorButton = 3;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    hairColorBtn.addEventListener("click", function() {
      console.log('hairColorBtn clicked');
      colorButton = 4;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "block";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    earColorBtn.addEventListener("click", function() {
      console.log('earColorBtn clicked');
      colorButton = 5;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    eyeColorBtn.addEventListener("click", function() {
      console.log('eyeColorBtn clicked');
      colorButton = 6;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "block";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    bodyColorBtn.addEventListener("click", function() {
      console.log('bodyColorBtn clicked');
      colorButton = 7;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    secondaryBodyColorBtn.addEventListener("click", function() {
      console.log('secondaryBodyColorBtn clicked');
      colorButton = 8;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
    });
    accentBodyColorBtn.addEventListener("click", function() {
      console.log('accentBodyColorBtn clicked');
      colorButton = 9;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    tailColorBtn.addEventListener("click", function() {
      console.log('tailColorBtn clicked');
      colorButton = 10;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    secondaryTailColorBtn.addEventListener("click", function() {
      console.log('secondaryTailColorBtn clicked');
      colorButton = 11;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
    });
    accentTailColorBtn.addEventListener("click", function() {
      console.log('accentTailColorBtn clicked');
      colorButton = 12;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "flex";
    });



    document.getElementById("body").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.body.sprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.head.sprite = 'head_01';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.head.sprite = 'head_02';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.head.sprite = 'head_03';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });



    document.getElementById("head").addEventListener("change", function(i) {
      colorButton = 1;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "block";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.head.sprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.head.sprite = 'head_01';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.head.sprite = 'head_02';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.head.sprite = 'head_03';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("headSecondaryFur").addEventListener("change", function(i) {
      colorButton = 2;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.head.secondarySprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.head.secondarySprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.head.secondarySprite = 'secondaryHead_01';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.head.secondarySprite = 'secondaryHead_02';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 3) {
      //   localPlayerInfo.head.secondarySprite = 'secondaryHead_03';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("headAccentFur").addEventListener("change", function(i) {
      colorButton = 3;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.head.accentSprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.head.accentSprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.head.accentSprite = 'secondaryHead_01';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.head.accentSprite = 'secondaryHead_02';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 3) {
      //   localPlayerInfo.head.accentSprite = 'secondaryHead_03';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("bodySecondaryFur").addEventListener("change", function(i) {
      colorButton = 8;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.body.secondarySprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.body.secondarySprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.body.secondarySprite = 'secondaryBody_01';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.body.secondarySprite = 'secondaryBody_02';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 3) {
      //   localPlayerInfo.body.secondarySprite = 'secondaryBody_03';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("bodyAccentFur").addEventListener("change", function(i) {
      colorButton = 9;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.body.accentSprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.body.accentSprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.body.accentSprite = 'secondaryBody_01';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.body.accentSprite = 'secondaryBody_02';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 3) {
      //   localPlayerInfo.body.accentSprite = 'secondaryBody_03';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("hair").addEventListener("change", function(i) {
      colorButton = 4;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.hair.sprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.hair.sprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.hair.sprite = 'hair_01';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("ear").addEventListener("change", function(i) {
      colorButton = 5;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.ear.sprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.ear.sprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.ear.sprite = 'ear_01';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("tail").addEventListener("change", function(i) {
      colorButton = 10;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.tail.sprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.tail.sprite = 'tail_01';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.tail.sprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.tail.sprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 3) {
      //   localPlayerInfo.tail.sprite = 'empty';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("tailSecondaryFur").addEventListener("change", function(i) {
      colorButton = 11;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "flex";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "none";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.tail.secondarySprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.tail.secondarySprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.tail.secondarySprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.tail.secondarySprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 3) {
      //   localPlayerInfo.tail.secondarySprite = 'empty';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });

    document.getElementById("tailAccentFur").addEventListener("change", function(i) {
      colorButton = 12;
      document.getElementsByClassName("colorQuickSelect")[0].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[1].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[2].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[3].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[4].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[5].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[6].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[7].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[8].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[9].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[10].style.display = "none";
      document.getElementsByClassName("colorQuickSelect")[11].style.display = "flex";
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.tail.accentSprite = i.srcElement.value;
      // if (i.srcElement.options.selectedIndex == 0) {
      //   localPlayerInfo.tail.accentSprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 1) {
      //   localPlayerInfo.tail.accentSprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 2) {
      //   localPlayerInfo.tail.accentSprite = 'empty';
      //
      // }
      // if (i.srcElement.options.selectedIndex == 3) {
      //   localPlayerInfo.tail.accentSprite = 'empty';
      //
      // }
      self.socket.emit('characterUpdate', localPlayerInfo);
    });









    rotateRight.addEventListener("click", function() {
      console.log('rotateRight clicked');
      if (rotation < 4) {
        rotation = rotation + 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 1;
        rotationfunct(self, rotation);
      }
    });
    rotateLeft.addEventListener("click", function() {
      console.log('rotateLeft clicked');
      if (rotation > 1) {
        rotation = rotation - 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 4;
        rotationfunct(self, rotation);
      }
    });
    function rotationfunct(self, rotation) {
      if (rotation == 1) {
        self.head.play(localPlayerInfo.head.sprite + 'Down');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Down');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Down');
        self.body.play(localPlayerInfo.body.sprite + 'Down');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Down');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Down');
        self.tail.play(localPlayerInfo.tail.sprite + 'Down');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Down');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Down');
        self.hair.play(localPlayerInfo.hair.sprite + 'Down');
        self.ear.play(localPlayerInfo.ear.sprite + 'Down');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Down');
        self.iris.play(localPlayerInfo.eyes.iris + 'Down');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Down');
        self.container.sendToBack(self.accentTail);
        self.container.sendToBack(self.secondaryTail);
        self.container.sendToBack(self.tail);
      }
      if (rotation == 2) {
        self.head.play(localPlayerInfo.head.sprite + 'Right');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Right');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Right');
        self.body.play(localPlayerInfo.body.sprite + 'Right');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Right');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Right');
        self.tail.play(localPlayerInfo.tail.sprite + 'Right');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Right');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Right');
        self.hair.play(localPlayerInfo.hair.sprite + 'Right');
        self.ear.play(localPlayerInfo.ear.sprite + 'Right');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Right');
        self.iris.play(localPlayerInfo.eyes.iris + 'Right');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Right');
        self.container.sendToBack(self.accentTail);
        self.container.sendToBack(self.secondaryTail);
        self.container.sendToBack(self.tail);
      }
      if (rotation == 3) {
        self.head.play(localPlayerInfo.head.sprite + 'Up');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Up');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Up');
        self.body.play(localPlayerInfo.body.sprite + 'Up');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Up');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Up');
        self.tail.play(localPlayerInfo.tail.sprite + 'Up');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Up');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Up');
        self.hair.play(localPlayerInfo.hair.sprite + 'Up');
        self.ear.play(localPlayerInfo.ear.sprite + 'Up');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Up');
        self.iris.play(localPlayerInfo.eyes.iris + 'Up');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Up');
        self.container.sendToBack(self.hair);
        self.container.sendToBack(self.eyes);
        self.container.sendToBack(self.iris);
        self.container.sendToBack(self.accentBody);
        self.container.sendToBack(self.secondaryBody);
        self.container.sendToBack(self.body);
        self.container.sendToBack(self.accentHead);
        self.container.sendToBack(self.secondaryHead);
        self.container.sendToBack(self.ear);
        self.container.sendToBack(self.head);
      }
      if (rotation == 4) {
        self.head.play(localPlayerInfo.head.sprite + 'Left');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Left');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Left');
        self.body.play(localPlayerInfo.body.sprite + 'Left');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Left');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Left');
        self.tail.play(localPlayerInfo.tail.sprite + 'Left');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Left');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Left');
        self.hair.play(localPlayerInfo.hair.sprite + 'Left');
        self.ear.play(localPlayerInfo.ear.sprite + 'Left');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Left');
        self.iris.play(localPlayerInfo.eyes.iris + 'Left');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Left');
        self.container.sendToBack(self.accentTail);
        self.container.sendToBack(self.secondaryTail);
        self.container.sendToBack(self.tail);
      }

    }

    this.socket.on('characterUpdated', function (playerInfo) {
      //console.log('characterUpdated', '\n', 'playerInfo.playerId = ', playerInfo.playerId, '\n', 'self.socket.id = ', self.socket.id);
        if (playerInfo.playerId === self.socket.id) {
          //addOtherPlayers(self, playerInfo);
          console.log(
            playerInfo.playerId, 'Called new animation successfully: ', '\n',
            'Set head Sprite to: ', playerInfo.head.sprite, '\n',
            'Set head Color to: ', playerInfo.head.color, '\n',
            'Set head Secondary Sprite to: ', playerInfo.head.secondarySprite, '\n',
            'Set head Secondary Color to: ', playerInfo.head.secondaryColor, '\n',
            'Set head Accent Sprite to: ', playerInfo.head.accentSprite, '\n',
            'Set head Accent Color to: ', playerInfo.head.accentColor, '\n',
            'Set body Sprite to: ', playerInfo.body.sprite, '\n',
            'Set body Color to: ', playerInfo.body.color, '\n',
            'Set body Secondary Sprite to: ', playerInfo.body.secondarySprite, '\n',
            'Set body Secondary Color to: ', playerInfo.body.secondaryColor, '\n',
            'Set body Accent Sprite to: ', playerInfo.body.accentSprite, '\n',
            'Set body Accent Color to: ', playerInfo.body.accentColor, '\n',
            'Set tail Sprite to: ', playerInfo.tail.sprite, '\n',
            'Set tail Color to: ', playerInfo.tail.color, '\n',
            'Set tail Secondary Sprite to: ', playerInfo.tail.secondarySprite, '\n',
            'Set tail Secondary Color to: ', playerInfo.tail.secondaryColor, '\n',
            'Set tail Accent Sprite to: ', playerInfo.tail.accentSprite, '\n',
            'Set tail Accent Color to: ', playerInfo.tail.accentColor, '\n',
            'Set hair Sprite to: ', playerInfo.hair.sprite, '\n',
            'Set hair Color to: ', playerInfo.hair.color, '\n',
            'Set ear Sprite to: ', playerInfo.ear.sprite, '\n',
            'Set ear Color to: ', playerInfo.ear.color, '\n',
            'Set outer eyes sprite to:', playerInfo.eyes.outer, '\n',
            'Set irises to:', playerInfo.eyes.iris, '\n',
            'Set eye color to:', playerInfo.eyes.color, '\n',
            'Set genitles to:', playerInfo.genitles.sprite
          );
          if (rotation == 1) {
            self.head.play(playerInfo.head.sprite + 'Down');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Down');
            self.accentHead.play(playerInfo.head.accentSprite + 'Down');
            self.body.play(playerInfo.body.sprite + 'Down');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Down');
            self.accentBody.play(playerInfo.body.accentSprite + 'Down');
            self.tail.play(playerInfo.tail.sprite + 'Down');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Down');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Down');
            self.hair.play(playerInfo.hair.sprite + 'Down');
            self.ear.play(playerInfo.ear.sprite + 'Down');
            self.eyes.play(playerInfo.eyes.outer + 'Down');
            self.iris.play(playerInfo.eyes.iris + 'Down');
            self.genitles.play(playerInfo.genitles.sprite + 'Down');
            self.container.sendToBack(self.tail);
          }
          if (rotation == 2) {
            self.head.play(playerInfo.head.sprite + 'Right');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Right');
            self.accentHead.play(playerInfo.head.accentSprite + 'Right');
            self.body.play(playerInfo.body.sprite + 'Right');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Right');
            self.accentBody.play(playerInfo.body.accentSprite + 'Right');
            self.tail.play(playerInfo.tail.sprite + 'Right');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Right');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Right');
            self.hair.play(playerInfo.hair.sprite + 'Right');
            self.ear.play(playerInfo.ear.sprite + 'Right');
            self.eyes.play(playerInfo.eyes.outer + 'Right');
            self.iris.play(playerInfo.eyes.iris + 'Right');
            self.genitles.play(playerInfo.genitles.sprite + 'Right');
            self.container.sendToBack(self.accentTail);
            self.container.sendToBack(self.secondaryTail);
            self.container.sendToBack(self.tail);
          }
          if (rotation == 3) {
            self.head.play(playerInfo.head.sprite + 'Up');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Up');
            self.accentHead.play(playerInfo.head.accentSprite + 'Up');
            self.body.play(playerInfo.body.sprite + 'Up');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Up');
            self.accentBody.play(playerInfo.body.accentSprite + 'Up');
            self.tail.play(playerInfo.tail.sprite + 'Up');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Up');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Up');
            self.hair.play(playerInfo.hair.sprite + 'Up');
            self.ear.play(playerInfo.ear.sprite + 'Up');
            self.eyes.play(playerInfo.eyes.outer + 'Up');
            self.iris.play(playerInfo.eyes.iris + 'Up');
            self.genitles.play(playerInfo.genitles.sprite + 'Up');
            self.container.sendToBack(self.hair);
            self.container.sendToBack(self.eyes);
            self.container.sendToBack(self.iris);
            self.container.sendToBack(self.accentBody);
            self.container.sendToBack(self.secondaryBody);
            self.container.sendToBack(self.body);
            self.container.sendToBack(self.accentHead);
            self.container.sendToBack(self.secondaryHead);
            self.container.sendToBack(self.ear);
            self.container.sendToBack(self.head);
          }
          if (rotation == 4) {
            self.head.play(playerInfo.head.sprite + 'Left');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Left');
            self.accentHead.play(playerInfo.head.accentSprite + 'Left');
            self.body.play(playerInfo.body.sprite + 'Left');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Left');
            self.accentBody.play(playerInfo.body.accentSprite + 'Left');
            self.tail.play(playerInfo.tail.sprite + 'Left');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Left');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Left');
            self.hair.play(playerInfo.hair.sprite + 'Left');
            self.ear.play(playerInfo.ear.sprite + 'Left');
            self.eyes.play(playerInfo.eyes.outer + 'Left');
            self.iris.play(playerInfo.eyes.iris + 'Left');
            self.genitles.play(playerInfo.genitles.sprite + 'Left');
            self.container.sendToBack(self.accentTail);
            self.container.sendToBack(self.secondaryTail);
            self.container.sendToBack(self.tail);
          }

          self.head.setTint(playerInfo.head.color);
          self.secondaryHead.setTint(playerInfo.head.secondaryColor);
          self.accentHead.setTint(playerInfo.head.accentColor);
          self.body.setTint(playerInfo.body.color);
          self.secondaryBody.setTint(playerInfo.body.secondaryColor);
          self.accentBody.setTint(playerInfo.body.accentColor);
          self.tail.setTint(playerInfo.tail.color);
          self.secondaryTail.setTint(playerInfo.tail.secondaryColor);
          self.accentTail.setTint(playerInfo.tail.accentColor);
          self.hair.setTint(playerInfo.hair.color);
          self.ear.setTint(playerInfo.ear.color);
          self.iris.setTint(playerInfo.eyes.color);


          //console.log('Head: ', self.head.anims.nextTick, '\n', 'Body: ', self.body.anims.nextTick, '\n', 'Tail: ', self.tail.anims.nextTick, '\n', 'Eyes: ', self.eyes.anims.nextTick);
          return;
        }
    });


    function addPlayer(self, playerInfo) {
      console.log('localPlayerInfo at addPlayer Function = ', localPlayerInfo);
      console.log(
        playerInfo.playerId, 'Has entered the Character Creation screen with the following default values: ', '\n',
        'Set head Sprite to: ', localPlayerInfo.head.sprite, '\n',
        'Set head Color to: ', localPlayerInfo.head.color, '\n',
        'Set head Secondary Sprite to: ', localPlayerInfo.head.secondarySprite, '\n',
        'Set head Secondary Color to: ', localPlayerInfo.head.secondaryColor, '\n',
        'Set head Accent Sprite to: ', localPlayerInfo.head.accentSprite, '\n',
        'Set head Accent Color to: ', localPlayerInfo.head.accentColor, '\n',
        'Set body Sprite to: ', localPlayerInfo.body.sprite, '\n',
        'Set body Color to: ', localPlayerInfo.body.color, '\n',
        'Set body Secondary Sprite to: ', localPlayerInfo.body.secondarySprite, '\n',
        'Set body Secondary Color to: ', localPlayerInfo.body.secondaryColor, '\n',
        'Set body Accent Sprite to: ', localPlayerInfo.body.accentSprite, '\n',
        'Set body Accent Color to: ', localPlayerInfo.body.accentColor, '\n',
        'Set tail Sprite to: ', localPlayerInfo.tail.sprite, '\n',
        'Set tail Color to: ', localPlayerInfo.tail.color, '\n',
        'Set tail Secondary Sprite to: ', localPlayerInfo.tail.secondarySprite, '\n',
        'Set tail Secondary Color to: ', localPlayerInfo.tail.secondaryColor, '\n',
        'Set tail Accent Sprite to: ', localPlayerInfo.tail.accentSprite, '\n',
        'Set tail Accent Color to: ', localPlayerInfo.tail.accentColor, '\n',
        'Set hair Sprite to: ', localPlayerInfo.hair.sprite, '\n',
        'Set hair Color to: ', localPlayerInfo.hair.color, '\n',
        'Set ear Sprite to: ', localPlayerInfo.ear.sprite, '\n',
        'Set ear Color to: ', localPlayerInfo.ear.color, '\n',
        'Set outer eyes sprite to:', localPlayerInfo.eyes.outer, '\n',
        'Set irises to:', localPlayerInfo.eyes.iris, '\n',
        'Set eye color to:', localPlayerInfo.eyes.color, '\n',
        'Set genitles to:', localPlayerInfo.genitles.sprite
      );

      self.container = self.add.container(0, 0).setSize(109, 220).setInteractive();

      self.head = self.physics.add.sprite(0, 0, localPlayerInfo.head.sprite).setInteractive();
      self.head.setTint(localPlayerInfo.head.color);
      self.secondaryHead = self.physics.add.sprite(0, 0, localPlayerInfo.head.secondarySprite).setInteractive();
      self.secondaryHead.setTint(localPlayerInfo.head.secondaryColor);
      self.accentHead = self.physics.add.sprite(0, 0, localPlayerInfo.head.accentSprite).setInteractive();
      self.accentHead.setTint(localPlayerInfo.head.accentColor);

      self.body = self.physics.add.sprite(0, 0, localPlayerInfo.body.sprite).setInteractive();
      self.body.setTint(localPlayerInfo.body.color);
      self.secondaryBody = self.physics.add.sprite(0, 0, localPlayerInfo.body.secondarySprite).setInteractive();
      self.secondaryBody.setTint(localPlayerInfo.body.secondaryColor);
      self.accentBody = self.physics.add.sprite(0, 0, localPlayerInfo.body.accentSprite).setInteractive();
      self.accentBody.setTint(localPlayerInfo.body.accentColor);

      self.tail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.sprite).setInteractive();
      self.tail.setTint(localPlayerInfo.tail.color);
      self.secondaryTail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.secondarySprite).setInteractive();
      self.secondaryTail.setTint(localPlayerInfo.tail.secondaryColor);
      self.accentTail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.accentSprite).setInteractive();
      self.accentTail.setTint(localPlayerInfo.tail.accentColor);

      self.hair = self.physics.add.sprite(0, 0, localPlayerInfo.hair.sprite).setInteractive();
      self.hair.setTint(localPlayerInfo.hair.color);

      self.ear = self.physics.add.sprite(0, 0, localPlayerInfo.ear.sprite).setInteractive();
      self.ear.setTint(localPlayerInfo.ear.color);

      self.eyes = self.physics.add.sprite(0, 0, localPlayerInfo.eyes.outer).setInteractive();
      self.iris = self.physics.add.sprite(0, 0, localPlayerInfo.eyes.iris).setInteractive();
      self.iris.setTint(localPlayerInfo.eyes.color);

      self.genitles = self.physics.add.sprite(0, 0, localPlayerInfo.genitles.sprite).setInteractive();
      //self.genitles.setTint(localPlayerInfo.genitles.color);


      self.container.add([
        self.tail,
        self.secondaryTail,
        self.accentTail,

        self.head,
        self.ear,
        self.secondaryHead,
        self.accentHead,
        self.eyes,
        self.iris,
        self.hair,
        self.body,
        self.secondaryBody,
        self.accentBody,
        self.genitles
      ]);
      //self.container.sendToBack(self.tail);

      //self.container.visible = false;
      self.head.play(localPlayerInfo.head.sprite + 'Down');
      self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Down');
      self.accentHead.play(localPlayerInfo.head.accentSprite + 'Down');
      self.body.play(localPlayerInfo.body.sprite + 'Down');
      self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Down');
      self.accentBody.play(localPlayerInfo.body.accentSprite + 'Down');
      self.tail.play(localPlayerInfo.tail.sprite + 'Down');
      self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Down');
      self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Down');
      self.hair.play(localPlayerInfo.hair.sprite + 'Down');
      self.ear.play(localPlayerInfo.ear.sprite + 'Down');
      self.eyes.play(localPlayerInfo.eyes.outer + 'Down');
      self.iris.play(localPlayerInfo.eyes.iris + 'Down');
      self.genitles.play(localPlayerInfo.genitles.sprite + 'Down');
      self.container.sendToBack(self.tail);


      localPlayerInfo.playerId = playerInfo.playerId;
      //localPlayerInfo.sprite = self.stack
      let cam1 = self.cameras.main.setSize(200, 200).startFollow(self.container).setName('Camera 1');


    }
    self.anims.create({
      key: 'head_01Down',
      frames: self.anims.generateFrameNumbers('head_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Right',
      frames: self.anims.generateFrameNumbers('head_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Left',
      frames: self.anims.generateFrameNumbers('head_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Up',
      frames: self.anims.generateFrameNumbers('head_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Stop',
      frames: self.anims.generateFrameNumbers('head_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_02Down',
      frames: self.anims.generateFrameNumbers('head_02', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Right',
      frames: self.anims.generateFrameNumbers('head_02', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Left',
      frames: self.anims.generateFrameNumbers('head_02', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Up',
      frames: self.anims.generateFrameNumbers('head_02', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Stop',
      frames: self.anims.generateFrameNumbers('head_02', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03Down',
      frames: self.anims.generateFrameNumbers('head_03', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Right',
      frames: self.anims.generateFrameNumbers('head_03', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Left',
      frames: self.anims.generateFrameNumbers('head_03', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Up',
      frames: self.anims.generateFrameNumbers('head_03', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Stop',
      frames: self.anims.generateFrameNumbers('head_03', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'body_01Down',
      frames: self.anims.generateFrameNumbers('body_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Right',
      frames: self.anims.generateFrameNumbers('body_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Left',
      frames: self.anims.generateFrameNumbers('body_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Up',
      frames: self.anims.generateFrameNumbers('body_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Stop',
      frames: self.anims.generateFrameNumbers('body_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'tail_01Down',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Right',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Left',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Up',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Stop',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_01Down',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Right',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Left',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Up',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Stop',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_02Down',
      frames: self.anims.generateFrameNumbers('eyes_02', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_02Right',
      frames: self.anims.generateFrameNumbers('eyes_02', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_02Left',
      frames: self.anims.generateFrameNumbers('eyes_02', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_02Up',
      frames: self.anims.generateFrameNumbers('eyes_02', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_02Stop',
      frames: self.anims.generateFrameNumbers('eyes_02', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_01Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_02Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_03Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryHead_01Down',
      frames: self.anims.generateFrameNumbers('secondaryHead_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_01Right',
      frames: self.anims.generateFrameNumbers('secondaryHead_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_01Left',
      frames: self.anims.generateFrameNumbers('secondaryHead_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_01Up',
      frames: self.anims.generateFrameNumbers('secondaryHead_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_01Stop',
      frames: self.anims.generateFrameNumbers('secondaryHead_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryHead_02Down',
      frames: self.anims.generateFrameNumbers('secondaryHead_02', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_02Right',
      frames: self.anims.generateFrameNumbers('secondaryHead_02', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_02Left',
      frames: self.anims.generateFrameNumbers('secondaryHead_02', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_02Up',
      frames: self.anims.generateFrameNumbers('secondaryHead_02', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_02Stop',
      frames: self.anims.generateFrameNumbers('secondaryHead_02', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryHead_03Down',
      frames: self.anims.generateFrameNumbers('secondaryHead_03', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_03Right',
      frames: self.anims.generateFrameNumbers('secondaryHead_03', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_03Left',
      frames: self.anims.generateFrameNumbers('secondaryHead_03', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_03Up',
      frames: self.anims.generateFrameNumbers('secondaryHead_03', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryHead_03Stop',
      frames: self.anims.generateFrameNumbers('secondaryHead_03', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'hair_01Down',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Right',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Left',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Up',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Stop',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'ear_01Down',
      frames: self.anims.generateFrameNumbers('ear_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_01Right',
      frames: self.anims.generateFrameNumbers('ear_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_01Left',
      frames: self.anims.generateFrameNumbers('ear_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_01Up',
      frames: self.anims.generateFrameNumbers('ear_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_01Stop',
      frames: self.anims.generateFrameNumbers('ear_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'emptyDown',
      frames: self.anims.generateFrameNumbers('empty', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyRight',
      frames: self.anims.generateFrameNumbers('empty', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyLeft',
      frames: self.anims.generateFrameNumbers('empty', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyUp',
      frames: self.anims.generateFrameNumbers('empty', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyStop',
      frames: self.anims.generateFrameNumbers('empty', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
  }


  function update() {
    // if (cursors.down.isDown) {
    //   this.head.anims.stop();
    //   this.body.anims.stop();
    //   this.tail.anims.stop();
    //   this.eyes.anims.stop();
    // }
    // if (cursors.up.isDown) {
    //   this.head.play(localPlayerInfo.head + 'Down');
    //   this.body.play(localPlayerInfo.body + 'Down');
    //   this.tail.play(localPlayerInfo.tail + 'Down');
    //   this.eyes.play(localPlayerInfo.eyes + 'Down');
    // }
    // if (cursors.left.isDown) {
    //   this.head.setDepth(4);
    //   this.body.setDepth(3);
    //   this.tail.setDepth(1);
    //   this.eyes.setDepth(2);
    // }
  }
</script>
