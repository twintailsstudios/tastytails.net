<section id ="characterCreator">
  <div class="container">
    <div id="characterCreatorUi">
      <div id="primaryButtons">
        <ul>
          <li><button type="button" id="gender" class="button main" style="vertical-align:middle"><span>&#9892; </span></button></li>
          <li><button type="button" id="about" class="button main" style="vertical-align:middle"><span>About </span></button></li>
          <li><button type="button" id="kinks" class="button main" style="vertical-align:middle"><span>Kinks </span></button></li>
          <li><button type="button" id="vore" class="button main" style="vertical-align:middle"><span>Vore </span></button></li>
          <li>Hair</li>
        </ul>
      </div>




      <form action="/api/user/createcharacter" method="POST">
      <div id ="genderPullout" class="pullout">
        <div id ="collapsibleBox">
          <button type="button" class="collapsible">Body Type <span>&#65086;</span></button>
          <div class="content">
            <div id ="bodyType">
              <button type="button" id="bodyLeft" class="button left" style="vertical-align:middle"><span> </span></button>
              <div id ="bodyTypeLabel" class="typeLabel">
                Feminine
              </div>
              <button type="button" id="bodyRight" class="button right" style="vertical-align:middle"><span> </span></button>
            </div>
          </div>
          <button type="button" class="collapsible">Genitailia</button>
          <div class="content">
            <div id ="genitailia">
              <button type="button" id="genitleLeft" class="button left" style="vertical-align:middle"><span> </span></button>
              <div type="button" id ="genitleTypeLabel" class="typeLabel">
                (unavailable)
              </div>
              <button type="button" id="genitleRight" class="button right" style="vertical-align:middle"><span> </span></button>
            </div>
          </div>
          <button type="button" class="collapsible">Secondary Fur</button>
          <div class="content">
            <div id ="secondaryFurType">
              <button type="button" id="secondaryFurLeft" class="button left" style="vertical-align:middle"><span> </span></button>
              <div id ="secondaryFurTypeLabel" class="typeLabel">
                Option 1
              </div>
              <button type="button" id="secondaryFurRight" class="button right" style="vertical-align:middle"><span> </span></button>
            </div>
          </div>
          <button type="button" class="collapsible">Head</button>
          <div class="content">
            <div id ="headType">
              <button type="button" id="headLeft" class="button left" style="vertical-align:middle"><span> </span></button>
              <div id ="headTypeLabel" class="typeLabel">
                Fox
              </div>
              <button type="button" id="headRight" class="button right" style="vertical-align:middle"><span> </span></button>
            </div>
          </div>
          <button type="button" class="collapsible">Tail</button>
          <div class="content">
            <div id ="tailType">
              <button type="button" id="tailLeft" class="button left" style="vertical-align:middle"><span> </span></button>
              Tail Options
              <button type="button" id="tailRight" class="button right" style="vertical-align:middle"><span> </span></button>
            </div>
          </div>
        </div>
        <div class="info">
          <ul>
            <li><div id= "test1">
              Primary Color:<br>
              <button type="button" id="primary" class="selected"></button>
            </div></li>
            <li><div id= "test2">
              Secondary Color:<br>
              <button type="button" id="secondary" class="selected"></button>
            </div></li>
            <li><div id="test3">
              Accent Color:<br>
              <button type="button" id="accent" class="selected"></button>
            </div></li>
            <li><div id="test4">
              Eye Color:<br>
              <button type="button" id="eyeColor" class="selected"></button>
            </div></li>
          </ul>
        </div>
        <div class="colorContainer">
          <canvas id="color-picker"></canvas>
        </div>
        <button type="button" id="next" class="button main" style="vertical-align:middle"><span>Next </span></button>
      </div>



      <div id ="aboutPullout" class="pullout">
        <div id="playerInformation">
          <div id="nameInput">
              <label for="firstName">First Name:</label>
              <br>
              <input id="firstName" name="firstName" type="text" autocomplete="off" class="form-control" placeholder="First Name" aria-label="First Name"></input>
              <br>
              <label for="lastName">Last Name:</label><br>
              <input id="lastName" name="lastName" type="text" autocomplete="off" class="form-control" placeholder="Last Name" aria-label="Last Name"></input>
              <br>
              <label for="nickName">Nick Name:</label><br>
              <input id="nickName" name="nickName" type="text" autocomplete="off" class="form-control" placeholder="Nick Name" aria-label="Nick Name"></input>
              <br>
              <label for="speciesName">Species Name:</label>
              <br>
              <input id="speciesName" name="speciesName" type="text" autocomplete="off" class="form-control" placeholder="Species Name" aria-label="Species Name"></input>
              <div id="pronouns">
                <label>Preferred Pronouns:</label>
                <label for="she/her" class="radioContainer"> She/Her
                  <input id="she/her" type="radio" name="pronouns" value="She/Her">
                  <span class="checkmark"></span>
                </label>

                <label for="he/his" class="radioContainer"> He/His
                  <input id="he/his" type="radio" name="pronouns" value="He/His">
                  <span class="checkmark"></span>
                </label>
              </div>
          </div>
          <div id="detailsInput">
            <div id="descriptionInput">
              <button type="button" class="collapsible">In Character Description</button>
              <div class="content">
                Input Character Description here: <br> <textarea id="icDescrip" name="icDescrip" autocomplete="off" class="form-control" placeholder="In Character Description..." aria-label="description"></textarea>
              </div>

              <button type="button" class="collapsible">Out of Character Description</button>
              <div class="content">
                Input Character Description here: <br> <textarea id="oocDescrip" type="text" name="oocDescrip" autocomplete="off" class="form-control" placeholder="Out of Charactrer Description" aria-label="description"></textarea>
              </div>
            </div>
          </div>
        </div>
        <button type="button" id="next2" class="button main" style="vertical-align:middle"><span>Next </span></button>

      </div>



      <div id ="kinksPullout" class="pullout">

          <div id="kinksInput">
            <ul>
              <li>
                Oral Vore
                <div class="rating">
                  <input type="radio" name="ovStar" id="ovStar1" value="1"><label for="ovStar1"> </label>
                  <input type="radio" name="ovStar" id="ovStar2" value="2"><label for="ovStar2"> </label>
                  <input type="radio" name="ovStar" id="ovStar3" value="3"><label for="ovStar3"> </label>
                  <input type="radio" name="ovStar" id="ovStar4" value="4"><label for="ovStar4"> </label>
                  <input type="radio" name="ovStar" id="ovStar5" value="5"><label for="ovStar5"> </label>
                </div>
              </li>

              <li>
                Anal Vore
                <div class="rating">
                  <input type="radio" name="avStar" id="avStar1" value="1"><label for="avStar1"> </label>
                  <input type="radio" name="avStar" id="avStar2" value="2"><label for="avStar2"> </label>
                  <input type="radio" name="avStar" id="avStar3" value="3"><label for="avStar3"> </label>
                  <input type="radio" name="avStar" id="avStar4" value="4"><label for="avStar4"> </label>
                  <input type="radio" name="avStar" id="avStar5" value="5"><label for="avStar5"> </label>
                </div>
              </li>

              <li>
                Cock Vore
                <div class="rating">
                  <input type="radio" name="cvStar" id="cvStar1" value="1"><label for="cvStar1"> </label>
                  <input type="radio" name="cvStar" id="cvStar2" value="2"><label for="cvStar2"> </label>
                  <input type="radio" name="cvStar" id="cvStar3" value="3"><label for="cvStar3"> </label>
                  <input type="radio" name="cvStar" id="cvStar4" value="4"><label for="cvStar4"> </label>
                  <input type="radio" name="cvStar" id="cvStar5" value="5"><label for="cvStar5"> </label>
                </div>
              </li>

              <li>
                Unbirth
                <div class="rating">
                  <input type="radio" name="ubStar" id="ubStar1" value="1"><label for="ubStar1"> </label>
                  <input type="radio" name="ubStar" id="ubStar2" value="2"><label for="ubStar2"> </label>
                  <input type="radio" name="ubStar" id="ubStar3" value="3"><label for="ubStar3"> </label>
                  <input type="radio" name="ubStar" id="ubStar4" value="4"><label for="ubStar4"> </label>
                  <input type="radio" name="ubStar" id="ubStar5" value="5"><label for="ubStar5"> </label>
                </div>
              </li>

              <li>
                Tail Vore
                <div class="rating">
                  <input type="radio" name="tvStar" id="tvStar1" value="1"><label for="tvStar1"> </label>
                  <input type="radio" name="tvStar" id="tvStar2" value="2"><label for="tvStar2"> </label>
                  <input type="radio" name="tvStar" id="tvStar3" value="3"><label for="tvStar3"> </label>
                  <input type="radio" name="tvStar" id="tvStar4" value="4"><label for="tvStar4"> </label>
                  <input type="radio" name="tvStar" id="tvStar5" value="5"><label for="tvStar5"> </label>
                </div>
              </li>

              <li>
                Absorbtion
                <div class="rating">
                  <input type="radio" name="absStar" id="absStar1" value="1"><label for="absStar1"> </label>
                  <input type="radio" name="absStar" id="absStar2" value="2"><label for="absStar2"> </label>
                  <input type="radio" name="absStar" id="absStar3" value="3"><label for="absStar3"> </label>
                  <input type="radio" name="absStar" id="absStar4" value="4"><label for="absStar4"> </label>
                  <input type="radio" name="absStar" id="absStar5" value="5"><label for="absStar5"> </label>
                </div>
              </li>

              <li>
                Soul Vore
                <div class="rating">
                  <input type="radio" name="svStar" id="svStar1" value="1"><label for="svStar1"> </label>
                  <input type="radio" name="svStar" id="svStar2" value="2"><label for="svStar2"> </label>
                  <input type="radio" name="svStar" id="svStar3" value="3"><label for="svStar3"> </label>
                  <input type="radio" name="svStar" id="svStar4" value="4"><label for="svStar4"> </label>
                  <input type="radio" name="svStar" id="svStar5" value="5"><label for="svStar5"> </label>
                </div>
              </li>
            </ul>

            <ul>
              <li>
                Being Predator
                <div class="rating">
                  <input type="radio" name="predStar" id="predStar1" value="1"><label for="predStar1"> </label>
                  <input type="radio" name="predStar" id="predStar2" value="2"><label for="predStar2"> </label>
                  <input type="radio" name="predStar" id="predStar3" value="3"><label for="predStar3"> </label>
                  <input type="radio" name="predStar" id="predStar4" value="4"><label for="predStar4"> </label>
                  <input type="radio" name="predStar" id="predStar5" value="5"><label for="predStar5"> </label>
                </div>
              </li>

              <li>
                Being Prey
                <div class="rating">
                  <input type="radio" name="preyStar" id="preyStar1" value="1"><label for="preyStar1"> </label>
                  <input type="radio" name="preyStar" id="preyStar2" value="2"><label for="preyStar2"> </label>
                  <input type="radio" name="preyStar" id="preyStar3" value="3"><label for="preyStar3"> </label>
                  <input type="radio" name="preyStar" id="preyStar4" value="4"><label for="preyStar4"> </label>
                  <input type="radio" name="preyStar" id="preyStar5" value="5"><label for="preyStar5"> </label>
                </div>
              </li>

              <li>
                Soft Vore
                <div class="rating">
                  <input type="radio" name="softStar" id="softStar1" value="1"><label for="softStar1"> </label>
                  <input type="radio" name="softStar" id="softStar2" value="2"><label for="softStar2"> </label>
                  <input type="radio" name="softStar" id="softStar3" value="3"><label for="softStar3"> </label>
                  <input type="radio" name="softStar" id="softStar4" value="4"><label for="softStar4"> </label>
                  <input type="radio" name="softStar" id="softStar5" value="5"><label for="softStar5"> </label>
                </div>
              </li>

              <li>
                Hard Vore
                <div class="rating">
                  <input type="radio" name="hardStar" id="hardStar1" value="1"><label for="hardStar1"> </label>
                  <input type="radio" name="hardStar" id="hardStar2" value="2"><label for="hardStar2"> </label>
                  <input type="radio" name="hardStar" id="hardStar3" value="3"><label for="hardStar3"> </label>
                  <input type="radio" name="hardStar" id="hardStar4" value="4"><label for="hardStar4"> </label>
                  <input type="radio" name="hardStar" id="hardStar5" value="5"><label for="hardStar5"> </label>
                </div>
              </li>

              <li>
                Digestion
                <div class="rating">
                  <input type="radio" name="digestionStar" id="digestionStar1" value="1"><label for="digestionStar1"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar2" value="2"><label for="digestionStar2"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar3" value="3"><label for="digestionStar3"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar4" value="4"><label for="digestionStar4"> </label>
                  <input type="radio" name="digestionStar" id="digestionStar5" value="5"><label for="digestionStar5"> </label>
                </div>
              </li>

              <li>
                Disposal
                <div class="rating">
                  <input type="radio" name="disposalStar" id="disposalStar1" value="1"><label for="disposalStar1"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar2" value="2"><label for="disposalStar2"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar3" value="3"><label for="disposalStar3"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar4" value="4"><label for="disposalStar4"> </label>
                  <input type="radio" name="disposalStar" id="disposalStar5" value="5"><label for="disposalStar5"> </label>
                </div>
              </li>
            </ul>

            <ul>
              <li>
                Transformation
                <div class="rating">
                  <input type="radio" name="tfStar" id="tfStar1" value="1"><label for="tfStar1"> </label>
                  <input type="radio" name="tfStar" id="tfStar2" value="2"><label for="tfStar2"> </label>
                  <input type="radio" name="tfStar" id="tfStar3" value="3"><label for="tfStar3"> </label>
                  <input type="radio" name="tfStar" id="tfStar4" value="4"><label for="tfStar4"> </label>
                  <input type="radio" name="tfStar" id="tfStar5" value="5"><label for="tfStar5"> </label>
                </div>
              </li>

              <li>
                Body Part Transformation
                <div class="rating">
                  <input type="radio" name="btfStar" id="btfStar1" value="1"><label for="btfStar1"> </label>
                  <input type="radio" name="btfStar" id="btfStar2" value="2"><label for="btfStar2"> </label>
                  <input type="radio" name="btfStar" id="btfStar3" value="3"><label for="btfStar3"> </label>
                  <input type="radio" name="btfStar" id="btfStar4" value="4"><label for="btfStar4"> </label>
                  <input type="radio" name="btfStar" id="btfStar5" value="5"><label for="btfStar5"> </label>
                </div>
              </li>

              <li>
                Body Swapping
                <div class="rating">
                  <input type="radio" name="bsStar" id="bsStar1" value="1"><label for="bsStar1"> </label>
                  <input type="radio" name="bsStar" id="bsStar2" value="2"><label for="bsStar2"> </label>
                  <input type="radio" name="bsStar" id="bsStar3" value="3"><label for="bsStar3"> </label>
                  <input type="radio" name="bsStar" id="bsStar4" value="4"><label for="bsStar4"> </label>
                  <input type="radio" name="bsStar" id="bsStar5" value="5"><label for="bsStar5"> </label>
                </div>
              </li>

              <li>
                Gender Transformation
                <div class="rating">
                  <input type="radio" name="gStar" id="gStar1" value="1"><label for="gStar1"> </label>
                  <input type="radio" name="gStar" id="gStar2" value="2"><label for="gStar2"> </label>
                  <input type="radio" name="gStar" id="gStar3" value="3"><label for="gStar3"> </label>
                  <input type="radio" name="gStar" id="gStar4" value="4"><label for="gStar4"> </label>
                  <input type="radio" name="gStar" id="gStar5" value="5"><label for="gStar5"> </label>
                </div>
              </li>

              <li>
                Species Transformation
                <div class="rating">
                  <input type="radio" name="sStar" id="sStar1" value="1"><label for="sStar1"> </label>
                  <input type="radio" name="sStar" id="sStar2" value="2"><label for="sStar2"> </label>
                  <input type="radio" name="sStar" id="sStar3" value="3"><label for="sStar3"> </label>
                  <input type="radio" name="sStar" id="sStar4" value="4"><label for="sStar4"> </label>
                  <input type="radio" name="sStar" id="sStar5" value="5"><label for="sStar5"> </label>
                </div>
              </li>

              <li>
                Inanimate Object Transformation
                <div class="rating">
                  <input type="radio" name="iaoStar" id="iaoStar1" value="1"><label for="iaoStar1"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar2" value="2"><label for="iaoStar2"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar3" value="3"><label for="iaoStar3"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar4" value="4"><label for="iaoStar4"> </label>
                  <input type="radio" name="iaoStar" id="iaoStar5" value="5"><label for="iaoStar5"> </label>
                </div>
              </li>
            </ul>
          </div>

        <button type="button" id="next3" class="button main" style="vertical-align:middle"><span>Next </span></button>

      </div>

      <div id ="vorePullout" class="pullout">
        <div id="voreTypes">
          <p>Input Vore Types Here</p>
          <ul id="voreList">

          </ul>
          <button type="button" id="addVore" class="button main"><span>Add New Vore</span></button>
        </div>
        <button type="submit" id="finish" class="button main" style="vertical-align:middle"><span>&#x1F5D9;</span></button>
        <!-- <a href="gameindex.html" id="finish" class="button main" style="vertical-align:middle">Finish</a> -->
      </div>
      </form>




      <div id="previewContainer">
        <div id="preview">

        </div>
        <div id ="previewRotation">
          <button id="rotateLeft" class="button left rotate" style="vertical-align:middle"><span> </span></button>

          <button id="rotateRight" class="button right rotate" style="vertical-align:middle"><span> </span></button>
        </div>
      </div>
    </div>
  </div>
</section>


<script src="//cdn.jsdelivr.net/npm/phaser@3.13.0/dist/phaser.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>

  var coll = document.getElementsByClassName("collapsible");
  var i;

  for (i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
      this.classList.toggle("active");
      var content = this.nextElementSibling;
      if (content.style.display === "block") {
        content.style.display = "none";
      } else {
        content.style.display = "block";
      }
    });
  }

  var voreList = [
    { name: "Stomach",
      verb: "shoves",
      digestionTimer: "120",
      animation: "1",
      descrip: "The walls feel hot and slimy as they constrict around you.",
      examineMsg: "<pred>'s belly looks as though something inside is moving...",
      struggleMsgInt: "Pressing against the slimy walls doesn't seem to get much of a reaction from <pred>.",
      struggleMsgExt: "<pred>'s belly bulges out with the outline of a hand print for a moment before returning to it's distended shape.",
      digestionMsgInt: "You finally feel your body succumb and are reduced to mush for <pred> to absorb.",
      digestionMsgExt: "The constant movement inside <pred>'s middle finally goes still as a soft gurgling sound comes from their belly."
    } ,
    { name: "Bowels",
      verb: "forces",
      digestionTimer: "120",
      animation: "2",
      descrip: "You feel the musky walls of <pred>'s digestive tract undulating around you as you are shoved up their ass.",
      examineMsg: "<pred>'s lower abdomen seems to be swollen out quite a lot...did something just move?",
      struggleMsgInt: "Wriggling about only seems to make that tight fleshy tube squeeze tighter around your body.",
      struggleMsgExt: "The outline of a footprint forms against the surface of <pred>'s lower belly",
      digestionMsgInt: "A final powerful squeeze of the muscles around you causes your body to give out and you become a puddle of nutrients to feed <pred>",
      digestionMsgExt: "<pred>'s tummy seems to shrink some as it lets out a satisfied burbling sound."
    },
    { name: "Balls",
      verb: "presses",
      digestionTimer: "120",
      animation: "3",
      descrip: "You fall down into a thick, musky puddle of jizz that immediately starts coating your body and you feel the wrinkly walls of <pred>'s scrotum tighten up to welcome you~",
      examineMsg: "A large bulge between their thighs seems to shift and sway on it's own.",
      struggleMsgInt: "The walls of your prison seem to give easily when you push out against them, but they always clench right back down the moment you relax...",
      struggleMsgExt: "A very clear imprint of someone's face bulges out from the side of <pred>'s nutsack.",
      digestionMsgInt: "The walls around you suddenly cinch up tightly submerging your head completely in <pred>'s sperm before you finally melt, becoming one with the pool of seed you had been bathing in.",
      digestionMsgExt: "There are a few frantic garbled sounds seeming to come up from <pred>'s crotch before there was a sudden, thick sounding, GLORP and those frantic sounds were reduced to a soft sloshing."
    },
    { name: "Womb",
      verb: "slurps",
      digestionTimer: "120",
      animation: "4",
      descrip: "You are wholly enveloped in a humid heat as you are deposited into a wet and slimy chamber. The air is filled with the scent of <pred>'s arousal and their heart can be heard beating just above.",
      examineMsg: "<pred>'s tummy looks swollen... could they be pregnant?",
      struggleMsgInt: "Struggling seems to do little good, but you do feel the gentle rubbing of <pred>'s hand over your shape as they press the bulges you make back into their core.",
      struggleMsgExt: "<pred>'s distended belly seems to rock and sway on it's own, they coo softly and seem to rub over their middle affectionately.",
      digestionMsgInt: "Your body seems to feel soggy and wet as the heat surrounding you grows more intense. The walls seem to flex down harder and harder until finally... splorsh! You succumb to <pred>'s arousal and are reduced to a pool of fem-cum.",
      digestionMsgExt: "<pred>'s middle suddenly compacts down noticeably and their face flushes red as they bite their lower lip. A muffled sloshing sound could be heard seemingly coming from their belly!"
    }
  ];
  var currentVoreCount = document.getElementById("voreList").childElementCount;
  createVoreList(voreList);



  function createVoreList() {
    currentVoreCount = document.getElementById("voreList").childElementCount;
    console.log('document.getElementById("voreList").childElementCount;', document.getElementById("voreList").childElementCount);
    if (!currentVoreCount) {

      currentVoreCount = 0;
    }
    console.log('currentVoreCount = ', currentVoreCount);

    for(i = currentVoreCount; i < voreList.length; i++) {
      var br = document.createElement('br');
      var br2 = document.createElement('br');
      var br3 = document.createElement('br');
      var br4 = document.createElement('br');
      var li = document.createElement("li");
      var button = document.createElement("button");
      var examineButton = document.createElement('button');
      var struggleInsideButton = document.createElement('button');
      var struggleOutsideButton = document.createElement('button');
      var digestionInsideButton = document.createElement('button');
      var digestionOutsideButton = document.createElement('button');
      var div = document.createElement("div");
      var div2 = document.createElement("div");
      var div3 = document.createElement("div");
      var examineMsgDiv = document.createElement("div");
      var examineContentDiv = document.createElement("div");
      var struggleInsideContentDiv = document.createElement("div");
      var struggleOutsideContentDiv = document.createElement("div");
      var digestionInsideContentDiv = document.createElement("div");
      var digestionOutsideContentDiv = document.createElement("div");
      var destinationLbl = document.createElement('label');
      var destination = document.createElement('input');
      var destinationDescripLbl = document.createElement('label');
      var destinationDescrip = document.createElement('textarea');
      var verbLbl = document.createElement('label');
      var verb = document.createElement('input');
      var digestionTimerLbl = document.createElement('label');
      var digestionTimer = document.createElement('input');
      var animationLbl = document.createElement('label');
      var animation = document.createElement('select');
      var examineMsgLbl = document.createElement('label');
      var examineMsgDescrip = document.createElement('textarea');
      var struggleInsideMsgLbl = document.createElement('label');
      var struggleInsideMsgDescrip = document.createElement('textarea');
      var struggleOutsideMsgLbl = document.createElement('label');
      var struggleOutsideMsgDescrip = document.createElement('textarea');
      var digestionInsideMsgLbl = document.createElement('label');
      var digestionInsideMsgDescrip = document.createElement('textarea');
      var digestionOutsideMsgLbl = document.createElement('label');
      var digestionOutsideMsgDescrip = document.createElement('textarea');

      //li.className = "voreListItem";

      button.id = 'voreOption'+i;
      button.className = 'collapsible';
      button.type = 'button';
      button.innerHTML = "<h1>" + voreList[i].name; + "</h1>"
      li.appendChild(button);

      div.id = 'content'+i;
      div.className = "content";
      div2.id = 'voreClassifiers'+i;
      div2.className = 'voreClassifiers';
      div.appendChild(div2);
      div3.className = 'activityMessages'
      div.appendChild(div3);

      destinationLbl.innerHTML = 'Destination: ';
      destinationLbl.htmlFor = 'destination'+i;
      div2.appendChild(destinationLbl);
      //onkeyup='updateBttnName(event)'
      destination.id = 'destination'+i;
      destination.name = 'destination';
      destination.onkeyup = updateBttnName;
      destination.type = 'text';
      destination.autocomplete = 'off';
      destination.className = 'form-control';
      destination.placeholder = 'Destination';
      destination.ariaLabel = 'Destination';
      destination.value = voreList[i].name;
      div2.appendChild(destination);
      div2.appendChild(br);

      verbLbl.innerHTML = 'Verb: ';
      verbLbl.htmlFor = 'verb'+i;
      div2.appendChild(verbLbl);

      verb.id = 'verb'+i;
      verb.name = 'verb';
      verb.type = 'text';
      verb.autocomplete = 'off';
      verb.className = 'form-control';
      verb.placeholder = 'Destination Verb...';
      verb.ariaLabel = 'verb';
      verb.value = voreList[i].verb;
      div2.appendChild(verb);
      div2.appendChild(br2);

      var test = document.createTextNode ('Digestion Timer: ');
      div2.appendChild(test);

      digestionTimer.id = 'digestionTimer'+i;
      digestionTimer.name = 'digestionTimer';
      digestionTimer.type = 'number';
      digestionTimer.autocomplete = 'off';
      digestionTimer.className = 'form-control';
      digestionTimer.placeholder = 'Digestion Timer (In Seconds)';
      digestionTimer.ariaLabel = 'digestionTimer';
      digestionTimer.value = voreList[i].digestionTimer;
      div2.appendChild(digestionTimer);
      div2.appendChild(br3);

      var test2 = document.createTextNode ('Animation: ');
      div2.appendChild(test2);

      animation.id = 'animation'+i;
      animation.name = 'animation';
      animation.innerHTML = '<option value="1">Oral Vore</option><option value="2">Anal Vore</option><option value="3">Cock Vore</option><option value="4">Unbirth</option><option value="5">Tail Vore</option><option value="6">Absorbtion</option>';
      animation.value = voreList[i].animation;
      div2.appendChild(animation);
      div2.appendChild(br4);

      destinationDescrip.id = 'destinationDescrip'+i;
      destinationDescrip.name = 'destinationDescrip';
      destinationDescrip.autocomplete = 'off';
      destinationDescrip.className = 'form-control';
      destinationDescrip.placeholder = "Describe the inside of the prey's destination...";
      destinationDescrip.areaLabel = 'destinationDescrip';
      destinationDescrip.innerHTML = voreList[i].descrip;
      div2.appendChild(destinationDescrip);

      examineButton.id = 'examineButton'+i;
      examineButton.className = 'collapsible';
      examineButton.type = 'button';
      examineButton.innerHTML = "Examine Messages";
      div3.appendChild(examineButton);

      examineMsgDiv.className = 'content';
      //examineMsgDiv.innerHTML = 'testing activity messages';
      examineMsgLbl.innerHTML = 'Describe what people would see when examining you while this destination is "full":';
      examineMsgLbl.htmlFor = 'examineMsgDescrip'+i;
      examineMsgDiv.appendChild(examineMsgLbl);
      examineMsgDescrip.id = 'examineMsgDescrip'+i;
      examineMsgDescrip.name = 'examineMsgDescrip';
      examineMsgDescrip.autocomplete = 'off';
      examineMsgDescrip.className = 'form-control';
      examineMsgDescrip.placeholder = 'What do you look like when this destination is "full"?';
      examineMsgDescrip.areaLabel = 'examineMsgDescrip';
      examineMsgDescrip.innerHTML = voreList[i].examineMsg;
      examineMsgDiv.appendChild(examineMsgDescrip);
      div3.appendChild(examineMsgDiv);

      struggleInsideButton.id = 'struggleInsideMsgButton'+i;
      struggleInsideButton.className = 'collapsible';
      struggleInsideButton.type = 'button';
      struggleInsideButton.innerHTML = "Struggle Messages (Interior)";
      div3.appendChild(struggleInsideButton);

      struggleInsideContentDiv.className = 'content';
      //struggleInsideMsgDiv.innerHTML = 'testing activity messages';
      struggleInsideMsgLbl.innerHTML = 'Describe what your prey experiances when struggling:';
      struggleInsideMsgLbl.htmlFor = 'struggleInsideMsgDescrip'+i;
      struggleInsideContentDiv.appendChild(struggleInsideMsgLbl);
      struggleInsideMsgDescrip.id = 'struggleInsideMsgDescrip'+i;
      struggleInsideMsgDescrip.name = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.autocomplete = 'off';
      struggleInsideMsgDescrip.className = 'form-control';
      struggleInsideMsgDescrip.placeholder = 'What does your prey experiance when struggling while inside this destination?';
      struggleInsideMsgDescrip.areaLabel = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.innerHTML = voreList[i].struggleMsgInt;
      struggleInsideContentDiv.appendChild(struggleInsideMsgDescrip);
      div3.appendChild(struggleInsideContentDiv);

      struggleOutsideButton.id = 'struggleOutsideMsgButton'+i;
      struggleOutsideButton.className = 'collapsible';
      struggleOutsideButton.type = 'button';
      struggleOutsideButton.innerHTML = "Struggle Messages (Exterior)";
      div3.appendChild(struggleOutsideButton);

      struggleOutsideContentDiv.className = 'content';
      //struggleOutsideMsgDiv.innerHTML = 'testing activity messages';
      struggleOutsideMsgLbl.innerHTML = 'Describe what an onlooker may see when your prey is struggling inside this destination:';
      struggleOutsideMsgLbl.htmlFor = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgLbl);
      struggleOutsideMsgDescrip.id = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideMsgDescrip.name = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.autocomplete = 'off';
      struggleOutsideMsgDescrip.className = 'form-control';
      struggleOutsideMsgDescrip.placeholder = 'What do others see when prey is struggling in here?';
      struggleOutsideMsgDescrip.areaLabel = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.innerHTML = voreList[i].struggleMsgExt;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgDescrip);
      div3.appendChild(struggleOutsideContentDiv);

      digestionInsideButton.id = 'digestionInsideMsgButton'+i;
      digestionInsideButton.className = 'collapsible';
      digestionInsideButton.type = 'button';
      digestionInsideButton.innerHTML = "Digestion Messages (Interior)";
      div3.appendChild(digestionInsideButton);

      digestionInsideContentDiv.className = 'content';
      //digestionInsideMsgDiv.innerHTML = 'testing activity messages';
      digestionInsideMsgLbl.innerHTML = 'Describe what your prey may experiance in their final moments as they are digested in this destination:';
      digestionInsideMsgLbl.htmlFor = 'digestionInsideMsgDescrip'+i;
      digestionInsideContentDiv.appendChild(digestionInsideMsgLbl);
      digestionInsideMsgDescrip.id = 'digestionInsideMsgDescrip'+i;
      digestionInsideMsgDescrip.name = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.autocomplete = 'off';
      digestionInsideMsgDescrip.className = 'form-control';
      digestionInsideMsgDescrip.placeholder = 'What does your prey experiance in the moment they are completely digested here?';
      digestionInsideMsgDescrip.areaLabel = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.innerHTML = voreList[i].digestionMsgInt;
      digestionInsideContentDiv.appendChild(digestionInsideMsgDescrip);
      div3.appendChild(digestionInsideContentDiv);

      digestionOutsideButton.id = 'digestionOutsideMsgButton'+i;
      digestionOutsideButton.className = 'collapsible';
      digestionOutsideButton.type = 'button';
      digestionOutsideButton.innerHTML = "Digestion Messages (Exterior)";
      div3.appendChild(digestionOutsideButton);

      digestionOutsideContentDiv.className = 'content';
      //digestionOutsideMsgDiv.innerHTML = 'testing activity messages';
      digestionOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may notice as this destination finishes digetsing your prey:';
      digestionOutsideMsgLbl.htmlFor = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgLbl);
      digestionOutsideMsgDescrip.id = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideMsgDescrip.name = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.autocomplete = 'off';
      digestionOutsideMsgDescrip.className = 'form-control';
      digestionOutsideMsgDescrip.placeholder = 'What do others around you notice as you finish digesting prey here?';
      digestionOutsideMsgDescrip.areaLabel = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.innerHTML = voreList[i].digestionMsgExt;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgDescrip);
      div3.appendChild(digestionOutsideContentDiv);

      li.appendChild(div);


      button.addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      examineButton.addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      struggleInsideButton.addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      struggleOutsideButton.addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      digestionInsideButton.addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });
      digestionOutsideButton.addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
        } else {
          content.style.display = "block";
        }
      });

      document.getElementById("voreList").appendChild(li);
    }
  }

  function updateBttnName(event) {
    //console.log(event.srcElement.id);
    //console.log('text box value = ', event.srcElement.value);
    var parent = document.getElementById(event.srcElement.id).parentElement.id;
    //console.log('parent = ', parent);
    var grandParent = document.getElementById(parent).parentElement.id;
    //console.log('grandParent = ', grandParent);

    var parentSibling = document.getElementById(grandParent).previousSibling.id;
    //console.log('grandParent = ', grandParent);
    document.getElementById(parentSibling).innerHTML = '<h1>'+event.srcElement.value+'</h1>';
  }

  gender.addEventListener("click", function() {
    console.log('gender clicked');
    document.getElementById("genderPullout").style.display = "block";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    //document.getElementById("genderPullout").style.transform = translateX(50px);
  });
  about.addEventListener("click", function() {
    console.log('about clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
  });
  kinks.addEventListener("click", function() {
    console.log('kinks clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
  });
  vore.addEventListener("click", function() {
    console.log('Vore Types clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
  });
  next.addEventListener("click", function() {
    console.log('next clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
  });
  next2.addEventListener("click", function() {
    console.log('next clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
  });
  next3.addEventListener("click", function() {
    console.log('next clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
  });
  addVore.addEventListener("click", function() {
    console.log('Add New Vore clicked');
    voreList.push(
      { name: "New Vore",
        verb: "",
        digestionTimer: "120",
        animation: "1",
        descrip: "",
        examineMsg: "",
        struggleMsgInt: "",
        struggleMsgExt: "",
        digestionMsgInt: "",
        digestionMsgExt: ""
      }
    );
    //var voreArray = voreList[vorelist.length - 1];
    createVoreList(voreList[voreList.length - 1]);
    console.log('voreList = ', voreList[voreList.length - 1]);
  });


  var bodySelection = 1;
  var genitleSelection = 1;
  var headSelection = 1;
  var secondaryFurSelection = 1;
  var rotation = 1;
  console.log('bodySelection = ', bodySelection);
  console.log('genitleSelection = ', genitleSelection);
  var config = {
    type: Phaser.AUTO,
    parent: 'preview',
    width: 200,
    height: 200,
    physics: {
      default: 'arcade',
      arcade: {
        debug: false,
        gravity: { y: 0 }
      }
    },
    scene: {
      preload: preload,
      create: create,
      update: update
    }
  };

  var game = new Phaser.Game(config);
  var localPlayerInfo = {Identifier:'', playerId:'', Username:'', Description:'', head:'head_01', body:'body_01', tail:'tail_01', eyes:'eyes_01', secondaryBody:'secondaryBody_01', genitle:'none', primaryColor:'0xe0e0e0', secondaryColor:'0xffffff', accentColor:'0xfcf2f2', eyeColor:'0xfcf2f2', specialList:[], spellInventory:[],
  consumedBy:''};

  function preload() {
    this.load.spritesheet('testBody', 'assets/spritesheets/testBody.png', {frameWidth: 109, frameHeight: 220});
    this.load.spritesheet('head_01', 'assets/spritesheets/head_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('head_02', 'assets/spritesheets/head_02.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('head_03', 'assets/spritesheets/head_03.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('body_01', 'assets/spritesheets/body_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('tail_01', 'assets/spritesheets/tail_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('eyes_01', 'assets/spritesheets/eyes_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryBody_01', 'assets/spritesheets/secondaryBody_01.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryBody_02', 'assets/spritesheets/secondaryBody_02.png', {frameWidth: 182, frameHeight: 190});
    this.load.spritesheet('secondaryBody_03', 'assets/spritesheets/secondaryBody_03.png', {frameWidth: 182, frameHeight: 190});
  }

  function create() {
    var self = this;
    this.socket = io();
    this.otherPlayers = this.physics.add.group();
    //cursors = this.input.keyboard.createCursorKeys();
    //console.log('self.socket = ', self.socket);
    this.socket.on('currentPlayers', function (players, spells) {
      Object.keys(players).forEach(function (id) {
        console.log('Local players socket Id = ', players[id].playerId);
        if (players[id].playerId === self.socket.id) {
          console.log('players[id] = ', players[id]);
          addPlayer(self, players[id]);
        } else {
          return;
        }
      });
    });






    let isMouseDown = false;
    let colorButton = 1;
    class Picker {
      constructor(target, width, height) {
        this.target = target;
        this.width = width;
        this.height = height;
        this.target.width = width;
        this.target.height = height;
        //Get context
        this.context = this.target.getContext("2d");
        //Circle
        this.pickerCircle = { x: 10, y: 10, width: 7, height: 7 };



        this.listenForEvents();
      }

      draw() {
        this.build();
      }

      build() {
        let gradient = this.context.createLinearGradient(0, 0, this.width, 0);

        //Color Stops
        gradient.addColorStop(0, "rgb(255, 0, 0)");
        gradient.addColorStop(0.15, "rgb(255, 0, 255)");
        gradient.addColorStop(0.33, "rgb(0, 0, 255)");
        gradient.addColorStop(0.49, "rgb(0, 255, 255)");
        gradient.addColorStop(0.67, "rgb(0, 255, 0)");
        gradient.addColorStop(0.84, "rgb(255, 255, 0)");
        gradient.addColorStop(1, "rgb(255, 0, 0)");
        //Fill it
        this.context.fillStyle = gradient;
        this.context.fillRect(0, 0, this.width, this.height);

        //Apply black & white
        gradient = this.context.createLinearGradient(0, 0, 0, this.height);
        gradient.addColorStop(0, "rgba(255, 255, 255, 1)");
        gradient.addColorStop(0.5, "rgba(255, 255, 255, 0)");
        gradient.addColorStop(0.5, "rgba(0, 0, 0, 0)");
        gradient.addColorStop(1, "rgba(0, 0, 0, 1)");
        this.context.fillStyle = gradient;
        this.context.fillRect(0, 0, this.width, this.height);

        //Circle
        this.context.beginPath();
        this.context.arc(this.pickerCircle.x, this.pickerCircle.y, this.pickerCircle.width, 0, Math.PI * 2);
        this.context.strokeStyle = "black";
        this.context.stroke();
        this.context.closePath();

      }
      listenForEvents() {

        const onMouseDown = (e) => {
          let colorPickerRect = document.getElementById('color-picker').getBoundingClientRect();
          let currentX = e.clientX - colorPickerRect.left;
          let currentY = e.clientY - colorPickerRect.top;
          //console.log('currentX = ', currentX, '\n', 'currentY = ', currentY, '\n', 'e.clientX = ', e.clientX, '\n', 'e.clientY = ', e.clientY, '\n', 'this.target.offsetLeft = ', this.target.offsetLeft, '\n', 'this.target.offsetTop = ', this.target.offsetTop);
          /**if(currentY > this.pickerCircle.y && currentY < this.pickerCircle.y + this.pickerCircle.width && currentX > this.pickerCircle.x && currentX < this.pickerCircle.x + this.pickerCircle.width) {
            isMouseDown = true;
          } else {
            this.pickerCircle.x = currentX;
            this.pickerCircle.y = currentY;
          }**/
          isMouseDown = true;
          this.pickerCircle.x = currentX;
          this.pickerCircle.y = currentY;
        }
        const onMouseMove = (e) => {
          if (isMouseDown) {
            let colorPickerRect = document.getElementById('color-picker').getBoundingClientRect();
            let currentX = e.clientX - colorPickerRect.left;
            let currentY = e.clientY - colorPickerRect.top;
            this.pickerCircle.x = currentX;
            this.pickerCircle.y = currentY;
          }
        }
        const onMouseUp = () => {
          setTimeout(myFunction, 10);
          function myFunction() {
            isMouseDown = false;
          }
        }
        //Register
        this.target.addEventListener("mousedown", onMouseDown);
        this.target.addEventListener("mousedown", () => this.onChangeCallback(this.getPickedColor()));
        this.target.addEventListener("mousemove", onMouseMove);
        this.target.addEventListener("mousemove", () => this.onChangeCallback(this.getPickedColor()));
        document.addEventListener("mouseup", onMouseUp);
      }

      getPickedColor() {
        let imageData = this.context.getImageData(this.pickerCircle.x, this.pickerCircle.y, 1, 1);
          return {r: imageData.data[0], g: imageData.data[1], b: imageData.data[2] };
      }
      onChange(callback) {
        this.onChangeCallback = callback;
      }
    }
    let picker = new Picker(document.getElementById("color-picker"), 250, 220);
    //draw
    setInterval(() => picker.draw(), 1);
    picker.onChange((color) => {
      console.log("colorButton = ", colorButton);
      let selected = "";
      if(colorButton == 1) {
        selected = document.getElementsByClassName("selected")[0];
      }
      if(colorButton == 2) {
        selected = document.getElementsByClassName("selected")[1];
      }
      if(colorButton == 3) {
        selected = document.getElementsByClassName("selected")[2];
      }
      if(colorButton == 4) {
        selected = document.getElementsByClassName("selected")[3];
      }


      if (isMouseDown == true) {
      console.log('color.r = ', color.r, '\n', 'color.g = ', color.g, '\n', 'color.b', color.b);
        selected.style.backgroundColor = 'rgb(' + [color.r,color.g,color.b].join(',') + ')';
        var hexColorCode = "0x" + getHex(color.r) + getHex(color.g) + getHex(color.b);
        if(colorButton == 1) {
          localPlayerInfo.primaryColor = hexColorCode
          console.log('PRIMARY hexColorCode = ', localPlayerInfo.primaryColor);
        }
        if(colorButton == 2) {
          localPlayerInfo.secondaryColor = hexColorCode
          console.log('SECONDARY hexColorCode = ', localPlayerInfo.secondaryColor);
        }
        if(colorButton == 3) {
          localPlayerInfo.accentColor = hexColorCode
          console.log('ACCENT hexColorCode = ', localPlayerInfo.accentColor);
        }
        if(colorButton == 4) {
          localPlayerInfo.eyeColor = hexColorCode
          console.log('EYE COLOR hexColorCode = ', localPlayerInfo.eyeColor);
        }


        self.socket.emit('characterUpdate', localPlayerInfo);
        }
    });

    function getHex(color) {
      var hex = parseInt(color).toString(16);
      return hex.length == 1 ? "0" + hex : hex;
    };




    primary.addEventListener("click", function() {
      console.log('primary clicked');
      colorButton = 1;
    });
    secondary.addEventListener("click", function() {
      console.log('secondary clicked');
      colorButton = 2;
    });
    accent.addEventListener("click", function() {
      console.log('accent clicked');
      colorButton = 3;
    });
    eyeColor.addEventListener("click", function() {
      console.log('eye color clicked');
      colorButton = 4;
    });
    headRight.addEventListener("click", function() {
      console.log('headRight clicked');
      if (headSelection < 3) {
        headSelection = headSelection + 1;
        headfunct(self, headSelection);
      } else {
        headSelection = 1;
        headfunct(self, headSelection);
      }
    });
    headLeft.addEventListener("click", function() {
      console.log('headLeft clicked');
      if (headSelection > 1) {
        headSelection = headSelection - 1;
        headfunct(self, headSelection);
      } else {
        headSelection = 3;
        headfunct(self, headSelection);
      }
    });
    function headfunct(self, headSelection) {
      if (headSelection == 1) {
        localPlayerInfo.head = 'head_01';
        document.getElementById("headTypeLabel").innerHTML = "Fox";
      }
      if (headSelection == 2) {
        localPlayerInfo.head = 'head_02';
        document.getElementById("headTypeLabel").innerHTML = "Long Eared Bunny";
      }
      if (headSelection == 3) {
        localPlayerInfo.head = 'head_03';
        document.getElementById("headTypeLabel").innerHTML = "Lop Eared Bunny";
      }
      self.socket.emit('characterUpdate', localPlayerInfo);
    }
    secondaryFurRight.addEventListener("click", function() {
      console.log('secondaryFurRight clicked');
      if (secondaryFurSelection < 3) {
        secondaryFurSelection = secondaryFurSelection + 1;
        console.log('secondaryFurSelection =', secondaryFurSelection);
        secondaryFurfunct(self, secondaryFurSelection);
      } else {
        secondaryFurSelection = 1;
        console.log('secondaryFurSelection =', secondaryFurSelection);
        secondaryFurfunct(self, secondaryFurSelection);
      }
    });
    secondaryFurLeft.addEventListener("click", function() {
      console.log('secondaryFurLeft clicked');
      if (secondaryFurSelection > 1) {
        secondaryFurSelection = secondaryFurSelection - 1;
        console.log('secondaryFurSelection =', secondaryFurSelection);
        secondaryFurfunct(self, secondaryFurSelection);
      } else {
        secondaryFurSelection = 3;
        console.log('secondaryFurSelection =', secondaryFurSelection);
        secondaryFurfunct(self, secondaryFurSelection);
      }
    });
    function secondaryFurfunct(self, secondaryFurSelection) {
      if (secondaryFurSelection == 1) {
        localPlayerInfo.secondaryBody = 'secondaryBody_01';
        document.getElementById("secondaryFurTypeLabel").innerHTML = "Option 1";
      }
      if (secondaryFurSelection == 2) {
        localPlayerInfo.secondaryBody = 'secondaryBody_02';
        document.getElementById("secondaryFurTypeLabel").innerHTML = "Option 2";
      }
      if (secondaryFurSelection == 3) {
        localPlayerInfo.secondaryBody = 'secondaryBody_03';
        document.getElementById("secondaryFurTypeLabel").innerHTML = "Option 3";
      }
      self.socket.emit('characterUpdate', localPlayerInfo);
    }
    bodyRight.addEventListener("click", function() {
      console.log('bodyRight clicked');
      if (bodySelection < 2) {
        bodySelection = bodySelection + 1;
        bodyfunct(self, bodySelection);
      } else {
        bodySelection = 1;
        bodyfunct(self, bodySelection);
      }
    });
    bodyLeft.addEventListener("click", function() {
      console.log('bodyLeft clicked');
      if (bodySelection > 1) {
        bodySelection = bodySelection - 1;
        bodyfunct(self, bodySelection);
      } else {
        bodySelection = 2;
        bodyfunct(self, bodySelection);
      }
    });
    function bodyfunct(self, bodySelection) {
      if (bodySelection == 1) {
        localPlayerInfo.body = 'body_01';
        document.getElementById("bodyTypeLabel").innerHTML = "Feminine";
      }
      if (bodySelection == 2) {
        localPlayerInfo.body = 'none';
        document.getElementById("bodyTypeLabel").innerHTML = "(unavailable)";
      }
      self.socket.emit('characterUpdate', localPlayerInfo);
    }
    genitleLeft.addEventListener("click", function() {
      console.log('genitleLeft clicked');
      if (genitleSelection > 1) {
        genitleSelection = genitleSelection - 1;
        genitlefunct(self, genitleSelection);
      } else {
        genitleSelection = 3;
        genitlefunct(self, genitleSelection);
      }
    });
    genitleRight.addEventListener("click", function() {
      console.log('genitleRight clicked');
      if (genitleSelection < 3) {
        genitleSelection = genitleSelection + 1;
        genitlefunct(self, genitleSelection);
      } else {
        genitleSelection = 1;
        genitlefunct(self, genitleSelection);
      }
    });
    function genitlefunct(self, genitleSelection) {
      if (genitleSelection == 1) {
        localPlayerInfo.genitle = 'none';
        document.getElementById("genitleTypeLabel").innerHTML = "(unavailable)";
      }
      if (genitleSelection == 2) {
        localPlayerInfo.genitle = 'none';
        document.getElementById("genitleTypeLabel").innerHTML = "(unavailable)";
      }
      if (genitleSelection == 3) {
        localPlayerInfo.genitle = 'none';
        document.getElementById("genitleTypeLabel").innerHTML = "(unavailable)";
      }
      self.socket.emit('characterUpdate', localPlayerInfo);
    }










    rotateRight.addEventListener("click", function() {
      console.log('rotateRight clicked');
      if (rotation < 4) {
        rotation = rotation + 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 1;
        rotationfunct(self, rotation);
      }
    });
    rotateLeft.addEventListener("click", function() {
      console.log('rotateLeft clicked');
      if (rotation > 1) {
        rotation = rotation - 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 4;
        rotationfunct(self, rotation);
      }
    });
    function rotationfunct(self, rotation) {
      if (rotation == 1) {
        self.head.play(localPlayerInfo.head + 'Down');
        self.body.play(localPlayerInfo.body + 'Down');
        self.tail.play(localPlayerInfo.tail + 'Down');
        self.eyes.play(localPlayerInfo.eyes + 'Down');
        self.secondaryBody.play(localPlayerInfo.secondaryBody + 'Down');
        self.container.sendToBack(self.tail);
      }
      if (rotation == 2) {
        self.head.play(localPlayerInfo.head + 'Right');
        self.body.play(localPlayerInfo.body + 'Right');
        self.tail.play(localPlayerInfo.tail + 'Right');
        self.eyes.play(localPlayerInfo.eyes + 'Right');
        self.secondaryBody.play(localPlayerInfo.secondaryBody + 'Right');
        self.container.sendToBack(self.tail);
      }
      if (rotation == 3) {
        self.head.play(localPlayerInfo.head + 'Up');
        self.body.play(localPlayerInfo.body + 'Up');
        self.tail.play(localPlayerInfo.tail + 'Up');
        self.eyes.play(localPlayerInfo.eyes + 'Up');
        self.secondaryBody.play(localPlayerInfo.secondaryBody + 'Up');
        self.container.sendToBack(self.secondaryBody);
        self.container.sendToBack(self.eyes);
        self.container.sendToBack(self.body);
        self.container.sendToBack(self.head);

      }
      if (rotation == 4) {
        self.head.play(localPlayerInfo.head + 'Left');
        self.body.play(localPlayerInfo.body + 'Left');
        self.tail.play(localPlayerInfo.tail + 'Left');
        self.eyes.play(localPlayerInfo.eyes + 'Left');
        self.secondaryBody.play(localPlayerInfo.secondaryBody + 'Left');
        self.container.sendToBack(self.tail);
      }

    }

    this.socket.on('characterUpdated', function (playerInfo) {
      //console.log('characterUpdated', '\n', 'playerInfo.playerId = ', playerInfo.playerId, '\n', 'self.socket.id = ', self.socket.id);
        if (playerInfo.playerId === self.socket.id) {
          //addOtherPlayers(self, playerInfo);
          console.log(playerInfo.playerId, 'Called new animation successfully: ', '\n', 'Set head to: ', playerInfo.head, '\n', 'Set body to: ', playerInfo.body, '\n', 'Set secondary body to: ', playerInfo.secondaryBody, '\n', 'Set Tail to:', playerInfo.tail,  '\n', 'Set eyes to:', playerInfo.eyes, '\n', 'Set Primary Color to: ', playerInfo.primaryColor, '\n', 'Set Secondary Color to: ', playerInfo.secondaryColor, '\n', 'Set Accent Color to: ', playerInfo.accentColor);
          if (rotation == 1) {
            self.head.play(playerInfo.head + 'Down');
            self.body.play(playerInfo.body + 'Down');
            self.tail.play(playerInfo.tail + 'Down');
            self.eyes.play(playerInfo.eyes + 'Down');
            self.secondaryBody.play(playerInfo.secondaryBody + 'Down');
            self.container.sendToBack(self.tail);
          }
          if (rotation == 2) {
            self.head.play(playerInfo.head + 'Right');
            self.body.play(playerInfo.body + 'Right');
            self.tail.play(playerInfo.tail + 'Right');
            self.eyes.play(playerInfo.eyes + 'Right');
            self.secondaryBody.play(playerInfo.secondaryBody + 'Right');
            self.container.sendToBack(self.tail);
          }
          if (rotation == 3) {
            self.head.play(playerInfo.head + 'Up');
            self.body.play(playerInfo.body + 'Up');
            self.tail.play(playerInfo.tail + 'Up');
            self.eyes.play(playerInfo.eyes + 'Up');
            self.secondaryBody.play(playerInfo.secondaryBody + 'Up');
            self.container.sendToBack(self.secondaryBody);
            self.container.sendToBack(self.eyes);
            self.container.sendToBack(self.body);
            self.container.sendToBack(self.head);
          }
          if (rotation == 4) {
            self.head.play(playerInfo.head + 'Left');
            self.body.play(playerInfo.body + 'Left');
            self.tail.play(playerInfo.tail + 'Left');
            self.eyes.play(playerInfo.eyes + 'Left');
            self.secondaryBody.play(playerInfo.secondaryBody + 'Left');
            self.container.sendToBack(self.tail);
          }

          self.head.setTint(playerInfo.primaryColor);
          self.body.setTint(playerInfo.primaryColor);
          self.tail.setTint(playerInfo.primaryColor);
          self.secondaryBody.setTint(playerInfo.secondaryColor);
          self.eyes.setTint(playerInfo.eyeColor);


          //console.log('Head: ', self.head.anims.nextTick, '\n', 'Body: ', self.body.anims.nextTick, '\n', 'Tail: ', self.tail.anims.nextTick, '\n', 'Eyes: ', self.eyes.anims.nextTick);
          return;
        }
    });


    function addPlayer(self, playerInfo) {
      //self.stack = self.add.sprite(0, 0, 'body_01');
      //self.stack.visible = false;
      //self.stack.play('bodyDown');


      console.log('player head = ', playerInfo.head);
      self.container = self.add.container(0, 0).setSize(109, 220).setInteractive();
      self.head = self.physics.add.sprite(0, 0, playerInfo.head).setInteractive();
      self.head.setTint(playerInfo.primaryColor);
      self.body = self.physics.add.sprite(0, 0, playerInfo.body).setInteractive();
      self.body.setTint(playerInfo.primaryColor);
      self.tail = self.physics.add.sprite(0, 0, playerInfo.tail).setInteractive();
      self.tail.setTint(playerInfo.primaryColor);
      self.eyes = self.physics.add.sprite(0, 0, playerInfo.eyes).setInteractive();
      self.eyes.setTint(playerInfo.eyeColor);
      self.secondaryBody = self.physics.add.sprite(0, 0, playerInfo.secondaryBody).setInteractive();
      self.secondaryBody.setTint(playerInfo.secondaryColor);
      self.container.add([ self.tail, self.head, self.body, self.eyes, self.secondaryBody ]);
      //self.container.sendToBack(self.tail);

      //self.container.visible = false;
      self.head.play('head_01Down');
      self.body.play('body_01Down');
      self.tail.play('tail_01Down');
      self.eyes.play('eyes_01Down');
      self.secondaryBody.play('secondaryBody_01Down')


      localPlayerInfo.playerId = playerInfo.playerId;
      //localPlayerInfo.sprite = self.stack
      let cam1 = self.cameras.main.setSize(200, 200).startFollow(self.container).setName('Camera 1');


    }
    self.anims.create({
      key: 'head_01Down',
      frames: self.anims.generateFrameNumbers('head_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Right',
      frames: self.anims.generateFrameNumbers('head_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Left',
      frames: self.anims.generateFrameNumbers('head_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Up',
      frames: self.anims.generateFrameNumbers('head_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Stop',
      frames: self.anims.generateFrameNumbers('head_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_02Down',
      frames: self.anims.generateFrameNumbers('head_02', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Right',
      frames: self.anims.generateFrameNumbers('head_02', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Left',
      frames: self.anims.generateFrameNumbers('head_02', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Up',
      frames: self.anims.generateFrameNumbers('head_02', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Stop',
      frames: self.anims.generateFrameNumbers('head_02', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03Down',
      frames: self.anims.generateFrameNumbers('head_03', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Right',
      frames: self.anims.generateFrameNumbers('head_03', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Left',
      frames: self.anims.generateFrameNumbers('head_03', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Up',
      frames: self.anims.generateFrameNumbers('head_03', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Stop',
      frames: self.anims.generateFrameNumbers('head_03', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'body_01Down',
      frames: self.anims.generateFrameNumbers('body_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Right',
      frames: self.anims.generateFrameNumbers('body_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Left',
      frames: self.anims.generateFrameNumbers('body_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Up',
      frames: self.anims.generateFrameNumbers('body_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Stop',
      frames: self.anims.generateFrameNumbers('body_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'tail_01Down',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Right',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Left',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Up',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Stop',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_01Down',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Right',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Left',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Up',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_01Stop',
      frames: self.anims.generateFrameNumbers('eyes_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_01Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_02Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_03Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 19, end: 26 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
  }


  function update() {
    // if (cursors.down.isDown) {
    //   this.head.anims.stop();
    //   this.body.anims.stop();
    //   this.tail.anims.stop();
    //   this.eyes.anims.stop();
    // }
    // if (cursors.up.isDown) {
    //   this.head.play(localPlayerInfo.head + 'Down');
    //   this.body.play(localPlayerInfo.body + 'Down');
    //   this.tail.play(localPlayerInfo.tail + 'Down');
    //   this.eyes.play(localPlayerInfo.eyes + 'Down');
    // }
    // if (cursors.left.isDown) {
    //   this.head.setDepth(4);
    //   this.body.setDepth(3);
    //   this.tail.setDepth(1);
    //   this.eyes.setDepth(2);
    // }
  }
</script>
