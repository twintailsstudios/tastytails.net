<section id ="characterCreator">
  <div class="container">
    <div id="characterCreatorUi">
      <div id="primaryButtons">
        <ul>
          <li><button type="button" id="gender" class="button main" style="vertical-align:middle"><span>Style </span></button></li>
          <li><button type="button" id="about" class="button main" style="vertical-align:middle"><span>About </span></button></li>
          <li><button type="button" id="kinks" class="button main" style="vertical-align:middle"><span>Kinks </span></button></li>
          <li><button type="button" id="vore" class="button main" style="vertical-align:middle"><span>Vore </span></button></li>
        </ul>
      </div>


<% if (charList == 'new') { %><form action="/api/user/createcharacter" method="POST"><% } else {%><form action="/api/user/editcharacter" method="POST"><%}%>

  <div id ="genderPullout" class="pullout">
    <div id ="collapsibleBox">
      <button type="button" class="collapsible" style="font-size: 30px;"><span>&#65086;</span><span> &#9892; </span><span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <select name="body" id="body">
              <option value = "body_01">Feminine</option>
              <option value = "empty">Masculine (unavailable)</option>
            </select>
            <select name="genitles" id="genitles">
              <option value = "empty">Vagina (unavailable)</option>
              <option value = "empty">Penis (unavailable)</option>
              <option value = "empty">Both (unavailable)</option>
            </select>
          </div></li>
        </ul>
      </div>



      <button type="button" class="collapsible"><span>&#65086;</span> Head <span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Head:<br>
              <select name="head" id="head">
                <option value = "head_01">Vulpine</option>
                <option value = "head_02">Canine</option>
                <option value = "head_03">Feline</option>
                <option value = "head_04">Bunny</option>
                <option value = "head_05">Avian</option>
                <option value = "head_06">Reptile</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="headColorBtn" class="selected"></button> -->
              <div id="headColorBtn">

              </div>
            </div>

            <div class="dropDownDivide" style="display:none">
              <br>
              <input id="beakSprite" name="beakSprite" type="text" autocomplete="off" class="hexReadOut" placeholder="Beak Sprite" aria-label="Beak Sprite" ></input>
            </div>
            <div id="sneakyBeak">
              <div class="colorDivide">
                Beak Color:
                <br>
                <!-- <button type="button" id="headColorBtn" class="selected"></button> -->
                <div id="beakColorBtn">

                </div>
              </div>
            </div>
          </div>
        </li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Secondary Fur:<br>
              <select name="headSecondaryFur" id="headSecondaryFur">
                <option value="empty">None</option>
                <!-- <option value="head_01-secondaryHead_01">Half Mask</option>
                <option value="head_01-secondaryHead_02">Full Mask</option>
                <option value="head_01-secondaryHead_03">Single Stripe</option>
                <option value="head_01-secondaryHead_04">Around Eyes</option>
                <option value="head_01-secondaryHead_05">Snout Only</option> -->
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="secondaryHeadColorBtn" class="selected"></button> -->
              <div id="secondaryHeadColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Accent Fur: <br>
              <select name="headAccentFur" id="headAccentFur">
                <option value="empty">None</option>
                <option value="head_01-secondaryHead_01">Half Mask</option>
                <option value="head_01-secondaryHead_02">Full Mask</option>
                <option value="head_01-secondaryHead_03">Stripes</option>
                <option value="head_01-secondaryHead_04">Around Eyes</option>
                <option value="head_01-secondaryHead_05">Snout Only</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentHeadColorBtn" class="selected"></button> -->
              <div id="accentHeadColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Hair: <br>
              <select name="hair" id="hair">
                <option value="empty">None</option>
                <option value="hair_01">Short Bob</option>
                <option value="hair_02">Pony Tail</option>
                <option value="hair_03">Covers Eye</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="hairColorBtn" class="selected"></button> -->
              <div id="hairColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Ears: <br>
              <select name="outerEar" id="outerEar">
                <option value="ears_outer_01">Perky and Pointy</option>
                <option value="ears_outer_04">Big and Tol</option>
                <!-- <option value="ear_01">Innear Ear Floof</option> -->
              </select>
              <input id="innerEar" name="innerEar" type="text" autocomplete="off" class="hexReadOut" placeholder="inner ear Sprite" aria-label="inner ear Sprite" ></input>
            </div>
            <div class="colorDivide">
              Outer Color: <br>
              <!-- <button type="button" id="earColorBtn" class="selected"></button> -->
              <div id="outerEarColorBtn">

              </div>
            </div>
            <div class="colorDivide">
              Inner Color: <br>
              <!-- <button type="button" id="earColorBtn" class="selected"></button> -->
              <div id="innerEarColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Eye Color:<br>
              <input id="eyesIris" name="eyesIris" type="text" autocomplete="off" class="hexReadOut" placeholder="Iris Sprite" aria-label="Iris Sprite" ></input>
              <input id="eyesOuter" name="eyesOuter" type="text" autocomplete="off" class="hexReadOut" placeholder="Outer Sprite" aria-label="Outer Sprite" ></input>
            </div>
            <div class="colorDivide">
              <!-- <button type="button" id="eyeColorBtn" class="selected"></button> -->
              <div id="eyeColorBtn">

              </div>
            </div>
          </div></li>
        </ul>
      </div>
      <button type="button" class="collapsible"><span>&#65086;</span> Body <span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Body:
              <br>
              <select name="mainBodyType" id="mainBodyType">
                <option value="body_01">Anthropomorphic</option>
                <option value="taur">Taur</option>
                <option value="naga">Naga</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="bodyColorBtn" class="selected"></button> -->
              <div id="bodyColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Secondary Fur: <br>
              <select name="bodySecondaryFur" id="bodySecondaryFur">
                <option value="empty">None</option>
                <option value="secondaryBody_01">Belly</option>
                <option value="secondaryBody_03">Scales</option>
                <option value="secondaryBody_04">Chest to Thighs</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="secondaryBodyColorBtn" class="selected"></button> -->
              <div id="secondaryBodyColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Accent Fur: <br>
              <select name="bodyAccentFur" id="bodyAccentFur">
                <option value="empty">None</option>
                <option value="accentBody_01">Stripes</option>
                <option value="accentBody_02">Spots</option>
                <option value="empty">none</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentBodyColorBtn" class="selected"></button> -->
              <div id="accentBodyColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Hands: <br>
              <select name="handsFur" id="handsFur">
                <option value="empty">None</option>
                <option value="empty">Hands(Unavailable)</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentBodyColorBtn" class="selected"></button> -->
              <div id="handsColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Feet: <br>
              <select name="feetFur" id="feetFur">
                <option value="empty">None</option>
                <option value="secondaryBody_02">Feet</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentBodyColorBtn" class="selected"></button> -->
              <div id="feetColorBtn">

              </div>
            </div>
          </div></li>
        </ul>
      </div>
      <button type="button" class="collapsible"><span>&#65086;</span> Tail <span>&#65086;</span></button>
      <div class="content">
        <ul class="partsSelections">
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Tail: <br>
              <select name="tail" id="tail">
                <option value="tail_01">Vulpine</option>
                <option value="tail_02">Feline</option>
                <option value="tail_03">Chumky Lizarb</option>
                <option value="tail_04">Reptile</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="tailColorBtn" class="selected"></button> -->
              <div id="tailColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Secondary Fur: <br>
              <select name="tailSecondaryFur" id="tailSecondaryFur">
                <option value="empty">None</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="secondaryTailColorBtn" class="selected"></button> -->
              <div id="secondaryTailColorBtn">

              </div>
            </div>
          </div></li>
          <li><div class="selectionContainer">
            <div class="dropDownDivide">
              Accent Fur: <br>
              <select name="tailAccentFur" id="tailAccentFur">
                <option value="empty">None</option>
              </select>
            </div>
            <div class="colorDivide">
              Color: <br>
              <!-- <button type="button" id="accentTailColorBtn" class="selected"></button> -->
              <div id="accentTailColorBtn">

              </div>
            </div>
          </div></li>
        </ul>
      </div>
    </div>
        <div class="info">
          <!-- <ul class="partsSelections">
            <li><div id= "test1">
              Primary Color:<br>
              <button type="button" id="primary" class="selected"></button>
            </div></li>
            <li><div id= "test2">
              Secondary Color:<br>
              <button type="button" id="secondary" class="selected"></button>
            </div></li>
            <li><div id="test3">
              Accent Color:<br>
              <button type="button" id="accent" class="selected"></button>
            </div></li>
            <li><div id="test4">
              Eye Color:<br>
              <button type="button" id="eyeColor" class="selected"></button>
            </div></li>
          </ul> -->
        </div>
        <div class="colorContainer">
        <!-- <canvas id="color-picker"></canvas>
        <br>-->
        <div class="hexContainer">
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="primaryHeadHex" name="primaryHeadColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value" ></input>
        </div>
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="beakHex" name="beakHex" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value" ></input>
        </div>
         <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="secondaryHeadHex" name="secondaryHeadColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Primary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="accentHeadHex" name="accentHeadColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="hairHex" name="hairColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
          <!-- Color Hex Value: <br> -->
          <input id="outerEarHex" name="outerEarColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
          <!-- Color Hex Value: <br> -->
          <input id="innerEarHex" name="innerEarColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
        </div>
        <div class="colorQuickSelect">
          <!-- Color Hex Value: <br> -->
          <input id="eyesHex" name="eyesColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="bodyHex" name="bodyColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Primary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="secondaryBodyHex" name="secondaryBodyColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="accentBodyHex" name="accentBodyColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Accent Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="handsHex" name="handsColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="feetHex" name="feetColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Head's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="tailHex" name="tailColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Body's Primary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="secondaryTailHex" name="secondaryTailColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Body's Secondary Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
        <div class="colorQuickSelect">
          <div class="hexDivide">
            <!-- Color Hex Value: <br> -->
            <input id="accentTailHex" name="accentTailColor" type="hidden" autocomplete="off" class="hexReadOut" placeholder="Hex Value" aria-label="Hex Value"></input>
          </div>
          <!-- <div class="copyDivide">
            Copy Your Body's Accent Color? <br>
            <button type="button" class="button colorQuickSelectBtn" style="vertical-align:middle"><span></span></button>
          </div> -->
        </div>
      </div>
    </div>
  </div>
      <div id ="aboutPullout" class="pullout">
        <div id="playerInformation">
          <div id="nameInput">
            <label for="firstName">First Name:</label>
            <br>
            <input id="firstName" name="firstName" type="text" autocomplete="off" class="form-control" placeholder="First Name" aria-label="First Name"></input>
            <br>
            <label for="lastName">Last Name:</label><br>
            <input id="lastName" name="lastName" type="text" autocomplete="off" class="form-control" placeholder="Last Name" aria-label="Last Name"></input>
            <br>
            <label for="nickName">Nick Name:</label><br>
            <input id="nickName" name="nickName" type="text" autocomplete="off" class="form-control" placeholder="Nick Name" aria-label="Nick Name"></input>
            <br>
            <label for="speciesName">Species Name:</label>
            <br>
            <input id="speciesName" name="speciesName" type="text" autocomplete="off" class="form-control" placeholder="Species Name" aria-label="Species Name"></input>
            <div id="pronouns">
              <label>Preferred Pronouns:</label>
              <label for="she/her" class="radioContainer"> She/Her
                <input id="she/her" type="radio" name="pronouns" value="1">
                <span class="checkmark"></span>
              </label>

              <label for="he/his" class="radioContainer"> He/His
                <input id="he/his" type="radio" name="pronouns" value="2">
                <span class="checkmark"></span>
              </label>
            </div>
          </div>
          <div id="detailsInput">
            <div id="descriptionInput">
              <button type="button" class="collapsible">In Character Description</button>
              <div class="content active">
                Input Character Description here: <br> <textarea id="icDescrip" name="icDescrip" autocomplete="off" class="form-control" placeholder="In Character Description..." aria-label="description"></textarea>
              </div>

              <button type="button" class="collapsible">Out of Character Description</button>
              <div class="content">
                Input Character Description here: <br> <textarea id="oocDescrip" type="text" name="oocDescrip" autocomplete="off" class="form-control" placeholder="Out of Charactrer Description" aria-label="description"></textarea>
              </div>
            </div>
          </div>
        </div>
      </div>



      <div id ="kinksPullout" class="pullout">
        <div id="kinksInput">
          <ul>
            <li>
              Oral Vore
              <div class="rating">
                <input type="radio" name="ovStar" id="ovStar1" value="1"><label for="ovStar1"> </label>
                <input type="radio" name="ovStar" id="ovStar2" value="2"><label for="ovStar2"> </label>
                <input type="radio" name="ovStar" id="ovStar3" value="3"><label for="ovStar3"> </label>
                <input type="radio" name="ovStar" id="ovStar4" value="4"><label for="ovStar4"> </label>
                <input type="radio" name="ovStar" id="ovStar5" value="5"><label for="ovStar5"> </label>
              </div>
            </li>
            <li>
              Anal Vore
              <div class="rating">
                <input type="radio" name="avStar" id="avStar1" value="1"><label for="avStar1"> </label>
                <input type="radio" name="avStar" id="avStar2" value="2"><label for="avStar2"> </label>
                <input type="radio" name="avStar" id="avStar3" value="3"><label for="avStar3"> </label>
                <input type="radio" name="avStar" id="avStar4" value="4"><label for="avStar4"> </label>
                <input type="radio" name="avStar" id="avStar5" value="5"><label for="avStar5"> </label>
              </div>
            </li>
            <li>
              Cock Vore
              <div class="rating">
                <input type="radio" name="cvStar" id="cvStar1" value="1"><label for="cvStar1"> </label>
                <input type="radio" name="cvStar" id="cvStar2" value="2"><label for="cvStar2"> </label>
                <input type="radio" name="cvStar" id="cvStar3" value="3"><label for="cvStar3"> </label>
                <input type="radio" name="cvStar" id="cvStar4" value="4"><label for="cvStar4"> </label>
                <input type="radio" name="cvStar" id="cvStar5" value="5"><label for="cvStar5"> </label>
              </div>
            </li>
            <li>
              Unbirth
              <div class="rating">
                <input type="radio" name="ubStar" id="ubStar1" value="1"><label for="ubStar1"> </label>
                <input type="radio" name="ubStar" id="ubStar2" value="2"><label for="ubStar2"> </label>
                <input type="radio" name="ubStar" id="ubStar3" value="3"><label for="ubStar3"> </label>
                <input type="radio" name="ubStar" id="ubStar4" value="4"><label for="ubStar4"> </label>
                <input type="radio" name="ubStar" id="ubStar5" value="5"><label for="ubStar5"> </label>
              </div>
            </li>
            <li>
              Tail Vore
              <div class="rating">
                <input type="radio" name="tvStar" id="tvStar1" value="1"><label for="tvStar1"> </label>
                <input type="radio" name="tvStar" id="tvStar2" value="2"><label for="tvStar2"> </label>
                <input type="radio" name="tvStar" id="tvStar3" value="3"><label for="tvStar3"> </label>
                <input type="radio" name="tvStar" id="tvStar4" value="4"><label for="tvStar4"> </label>
                <input type="radio" name="tvStar" id="tvStar5" value="5"><label for="tvStar5"> </label>
              </div>
            </li>
            <li>
              Absorbtion
              <div class="rating">
                <input type="radio" name="absStar" id="absStar1" value="1"><label for="absStar1"> </label>
                <input type="radio" name="absStar" id="absStar2" value="2"><label for="absStar2"> </label>
                <input type="radio" name="absStar" id="absStar3" value="3"><label for="absStar3"> </label>
                <input type="radio" name="absStar" id="absStar4" value="4"><label for="absStar4"> </label>
                <input type="radio" name="absStar" id="absStar5" value="5"><label for="absStar5"> </label>
              </div>
            </li>
            <li>
              Soul Vore
              <div class="rating">
                <input type="radio" name="svStar" id="svStar1" value="1"><label for="svStar1"> </label>
                <input type="radio" name="svStar" id="svStar2" value="2"><label for="svStar2"> </label>
                <input type="radio" name="svStar" id="svStar3" value="3"><label for="svStar3"> </label>
                <input type="radio" name="svStar" id="svStar4" value="4"><label for="svStar4"> </label>
                <input type="radio" name="svStar" id="svStar5" value="5"><label for="svStar5"> </label>
              </div>
            </li>
          </ul>
          <ul>
            <li>
              Being Predator
              <div class="rating">
                <input type="radio" name="predStar" id="predStar1" value="1"><label for="predStar1"> </label>
                <input type="radio" name="predStar" id="predStar2" value="2"><label for="predStar2"> </label>
                <input type="radio" name="predStar" id="predStar3" value="3"><label for="predStar3"> </label>
                <input type="radio" name="predStar" id="predStar4" value="4"><label for="predStar4"> </label>
                <input type="radio" name="predStar" id="predStar5" value="5"><label for="predStar5"> </label>
              </div>
            </li>
            <li>
              Being Prey
              <div class="rating">
                <input type="radio" name="preyStar" id="preyStar1" value="1"><label for="preyStar1"> </label>
                <input type="radio" name="preyStar" id="preyStar2" value="2"><label for="preyStar2"> </label>
                <input type="radio" name="preyStar" id="preyStar3" value="3"><label for="preyStar3"> </label>
                <input type="radio" name="preyStar" id="preyStar4" value="4"><label for="preyStar4"> </label>
                <input type="radio" name="preyStar" id="preyStar5" value="5"><label for="preyStar5"> </label>
              </div>
            </li>
            <li>
              Soft Vore
              <div class="rating">
                <input type="radio" name="softStar" id="softStar1" value="1"><label for="softStar1"> </label>
                <input type="radio" name="softStar" id="softStar2" value="2"><label for="softStar2"> </label>
                <input type="radio" name="softStar" id="softStar3" value="3"><label for="softStar3"> </label>
                <input type="radio" name="softStar" id="softStar4" value="4"><label for="softStar4"> </label>
                <input type="radio" name="softStar" id="softStar5" value="5"><label for="softStar5"> </label>
              </div>
            </li>
            <li>
              Hard Vore
              <div class="rating">
                <input type="radio" name="hardStar" id="hardStar1" value="1"><label for="hardStar1"> </label>
                <input type="radio" name="hardStar" id="hardStar2" value="2"><label for="hardStar2"> </label>
                <input type="radio" name="hardStar" id="hardStar3" value="3"><label for="hardStar3"> </label>
                <input type="radio" name="hardStar" id="hardStar4" value="4"><label for="hardStar4"> </label>
                <input type="radio" name="hardStar" id="hardStar5" value="5"><label for="hardStar5"> </label>
              </div>
            </li>
            <li>
              Digestion
              <div class="rating">
                <input type="radio" name="digestionStar" id="digestionStar1" value="1"><label for="digestionStar1"> </label>
                <input type="radio" name="digestionStar" id="digestionStar2" value="2"><label for="digestionStar2"> </label>
                <input type="radio" name="digestionStar" id="digestionStar3" value="3"><label for="digestionStar3"> </label>
                <input type="radio" name="digestionStar" id="digestionStar4" value="4"><label for="digestionStar4"> </label>
                <input type="radio" name="digestionStar" id="digestionStar5" value="5"><label for="digestionStar5"> </label>
              </div>
            </li>
            <li>
              Disposal
              <div class="rating">
                <input type="radio" name="disposalStar" id="disposalStar1" value="1"><label for="disposalStar1"> </label>
                <input type="radio" name="disposalStar" id="disposalStar2" value="2"><label for="disposalStar2"> </label>
                <input type="radio" name="disposalStar" id="disposalStar3" value="3"><label for="disposalStar3"> </label>
                <input type="radio" name="disposalStar" id="disposalStar4" value="4"><label for="disposalStar4"> </label>
                <input type="radio" name="disposalStar" id="disposalStar5" value="5"><label for="disposalStar5"> </label>
              </div>
            </li>
          </ul>
          <ul>
            <li>
              Transformation
              <div class="rating">
                <input type="radio" name="tfStar" id="tfStar1" value="1"><label for="tfStar1"> </label>
                <input type="radio" name="tfStar" id="tfStar2" value="2"><label for="tfStar2"> </label>
                <input type="radio" name="tfStar" id="tfStar3" value="3"><label for="tfStar3"> </label>
                <input type="radio" name="tfStar" id="tfStar4" value="4"><label for="tfStar4"> </label>
                <input type="radio" name="tfStar" id="tfStar5" value="5"><label for="tfStar5"> </label>
              </div>
            </li>
            <li>
              Body Part Transformation
              <div class="rating">
                <input type="radio" name="btfStar" id="btfStar1" value="1"><label for="btfStar1"> </label>
                <input type="radio" name="btfStar" id="btfStar2" value="2"><label for="btfStar2"> </label>
                <input type="radio" name="btfStar" id="btfStar3" value="3"><label for="btfStar3"> </label>
                <input type="radio" name="btfStar" id="btfStar4" value="4"><label for="btfStar4"> </label>
                <input type="radio" name="btfStar" id="btfStar5" value="5"><label for="btfStar5"> </label>
              </div>
            </li>
            <li>
              Body Swapping
              <div class="rating">
                <input type="radio" name="bsStar" id="bsStar1" value="1"><label for="bsStar1"> </label>
                <input type="radio" name="bsStar" id="bsStar2" value="2"><label for="bsStar2"> </label>
                <input type="radio" name="bsStar" id="bsStar3" value="3"><label for="bsStar3"> </label>
                <input type="radio" name="bsStar" id="bsStar4" value="4"><label for="bsStar4"> </label>
                <input type="radio" name="bsStar" id="bsStar5" value="5"><label for="bsStar5"> </label>
              </div>
            </li>
            <li>
              Gender Transformation
              <div class="rating">
                <input type="radio" name="gStar" id="gStar1" value="1"><label for="gStar1"> </label>
                <input type="radio" name="gStar" id="gStar2" value="2"><label for="gStar2"> </label>
                <input type="radio" name="gStar" id="gStar3" value="3"><label for="gStar3"> </label>
                <input type="radio" name="gStar" id="gStar4" value="4"><label for="gStar4"> </label>
                <input type="radio" name="gStar" id="gStar5" value="5"><label for="gStar5"> </label>
              </div>
            </li>
            <li>
              Species Transformation
              <div class="rating">
                <input type="radio" name="sStar" id="sStar1" value="1"><label for="sStar1"> </label>
                <input type="radio" name="sStar" id="sStar2" value="2"><label for="sStar2"> </label>
                <input type="radio" name="sStar" id="sStar3" value="3"><label for="sStar3"> </label>
                <input type="radio" name="sStar" id="sStar4" value="4"><label for="sStar4"> </label>
                <input type="radio" name="sStar" id="sStar5" value="5"><label for="sStar5"> </label>
              </div>
            </li>
            <li>
              Inanimate Object Transformation
              <div class="rating">
                <input type="radio" name="iaoStar" id="iaoStar1" value="1"><label for="iaoStar1"> </label>
                <input type="radio" name="iaoStar" id="iaoStar2" value="2"><label for="iaoStar2"> </label>
                <input type="radio" name="iaoStar" id="iaoStar3" value="3"><label for="iaoStar3"> </label>
                <input type="radio" name="iaoStar" id="iaoStar4" value="4"><label for="iaoStar4"> </label>
                <input type="radio" name="iaoStar" id="iaoStar5" value="5"><label for="iaoStar5"> </label>
              </div>
            </li>
          </ul>
        </div>
      </div>

      <div id ="vorePullout" class="pullout">
        <div id="voreTypes">
          <h1>Input Vore Types Here</h1>
          <ul id="voreList">

          </ul>
          <button type="button" id="addVore" class="button main"><span>Add New Vore</span></button>
        </div>

        <!-- <a href="gameindex.html" id="finish" class="button main" style="vertical-align:middle">Finish</a> -->
      </div>

      <div id="previewContainer">
        <div id="previewAndButtons">
          <div id="preview">

          </div>
          <div id ="previewRotation">
            <button type ="button" id="rotateLeft" class="button left rotate" style="vertical-align:middle"><span> </span></button>

            <button type ="button" id="rotateRight" class="button right rotate" style="vertical-align:middle"><span> </span></button>
          </div>
        </div>
        <div id="previewModifierButtons">
          <div>
            <div>
              Randomize:<br>
              <button type="button" id="randomizer" class="button random" style="vertical-align:middle"><span> </span></button>
            </div>

            <div>
              Reset to Default:<br>
              <button type="button" id="resetMainDefaults" class="button reset" style="vertical-align:middle"><span> </span></button>
            </div>
          </div>
          <div id="mainColorSelection">
            <div class="mainColorSelectionContainer">
              Default Primary Color:<br>
              <div id="mainPrimaryColorBtn">

              </div>
            </div>
            <div class="mainColorSelectionContainer">
              Default Secondary Color:<br>
              <div id="mainSecondaryColorBtn">

              </div>
            </div>
            <div class="mainColorSelectionContainer">
              Default Accent Color:<br>
              <div id="mainAccentColorBtn">

              </div>
            </div>
          </div>
        </div>
      </div>

      <div id="buttonHolder">
        <button type="button" id="next" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="button" id="next2" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="button" id="next3" class="button main" style="vertical-align:middle"><span>Next </span></button>
        <button type="submit" id="finish" class="button main" style="vertical-align:middle"><span>Finish</span></button>
      </div>
    </form>
  </div>
</section>


<script src="https://cdn.jsdelivr.net/npm/phaser@3.24.1/dist/phaser.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.min.js"></script>


<script>
  <% if (charList == 'new') { %>
      var charList = '<%- charList %>';
      console.log('charList = ', charList);

      var localPlayerInfo = {
        Identifier:'',
        playerId:'',
        Username:'',
        Description:'',
        head: {
          sprite: 'head_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        body: {
          sprite: 'body_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        hands: {
          sprite: 'empty',
          color: '0xe0e0e0',
        },
        feet: {
          sprite: 'empty',
          color: '0xe0e0e0',
        },
        tail: {
          sprite: 'tail_01',
          color: '0xe0e0e0',
          secondarySprite: 'empty',
          secondaryColor: '0xffffff',
          accentSprite: 'empty',
          accentColor: '0x636363'
        },
        eyes: {
          outer: 'eyes_whites_01',
          iris: 'iris_01',
          color: '0xfcf2f2'
        },
        hair: {
          sprite: 'empty',
          color: '0x636363'
        },
        ear: {
          outerSprite: 'ears_outer_01',
          innerSprite: 'ears_inner_01',
          outerColor: '0xe0e0e0',
          innerColor: '0x636363'
        },
        beak: {
          sprite: 'empty',
          color: '0xffffff'
        },
        genitles:{
          sprite: 'empty',
          secondarySprite: 'empty'
        },
        specialList:[],
        spellInventory:[],
        consumedBy:'',
        input: {
          left: false,
          right: false,
          up: false,
          down: false
        }
      };

      //Set default color hex values in input fields
      // document.getElementById('primaryHeadHex').value = localPlayerInfo.head.color.replace("0x", "#");
      // document.getElementById('secondaryHeadHex').value = localPlayerInfo.head.secondaryColor.replace("0x", "#");
      // document.getElementById('accentHeadHex').value = localPlayerInfo.head.accentColor.replace("0x", "#");
      // document.getElementById('hairHex').value = localPlayerInfo.hair.color.replace("0x", "#");
      // document.getElementById('earHex').value = localPlayerInfo.ear.color.replace("0x", "#");
      // document.getElementById('eyesHex').value = localPlayerInfo.eyes.color.replace("0x", "#");
      // document.getElementById('bodyHex').value = localPlayerInfo.body.color.replace("0x", "#");
      // document.getElementById('secondaryBodyHex').value = localPlayerInfo.body.secondaryColor.replace("0x", "#");
      // document.getElementById('accentBodyHex').value = localPlayerInfo.body.accentColor.replace("0x", "#");
      // document.getElementById('tailHex').value = localPlayerInfo.tail.color.replace("0x", "#");
      // document.getElementById('secondaryTailHex').value = localPlayerInfo.tail.secondaryColor.replace("0x", "#");
      // document.getElementById('accentTailHex').value = localPlayerInfo.tail.accentColor.replace("0x", "#");

      //set default sprite selections
      // document.getElementById('body').value = localPlayerInfo.body.sprite;
      // document.getElementById('genitles').value = localPlayerInfo.genitles.sprite;
      // document.getElementById('head').value = localPlayerInfo.head.sprite;
      // document.getElementById('headSecondaryFur').value = localPlayerInfo.head.secondarySprite;
      // document.getElementById('headAccentFur').value = localPlayerInfo.head.accentSprite;
      // document.getElementById('hair').value = localPlayerInfo.hair.sprite;
      // document.getElementById('ear').value = localPlayerInfo.ear.sprite;
      // document.getElementById('body').value = localPlayerInfo.body.sprite;
      // document.getElementById('bodySecondaryFur').value = localPlayerInfo.body.secondarySprite;
      // document.getElementById('bodyAccentFur').value = localPlayerInfo.body.accentSprite;
      // document.getElementById('tail').value = localPlayerInfo.tail.sprite;
      // document.getElementById('tailSecondaryFur').value = localPlayerInfo.tail.secondarySprite;
      // document.getElementById('tailAccentFur').value = localPlayerInfo.tail.accentSprite;

      //set default background color for color selection buttons
      // document.getElementsByClassName("selected")[0].style.backgroundColor = localPlayerInfo.head.color.replace("0x", "#");
      // document.getElementsByClassName("selected")[1].style.backgroundColor = localPlayerInfo.head.secondaryColor.replace("0x", "#");
      // document.getElementsByClassName("selected")[2].style.backgroundColor = localPlayerInfo.head.accentColor.replace("0x", "#");
      // document.getElementsByClassName("selected")[3].style.backgroundColor = localPlayerInfo.hair.color.replace("0x", "#");
      // document.getElementsByClassName("selected")[4].style.backgroundColor = localPlayerInfo.ear.color.replace("0x", "#");
      // document.getElementsByClassName("selected")[5].style.backgroundColor = localPlayerInfo.eyes.color.replace("0x", "#");
      // document.getElementsByClassName("selected")[6].style.backgroundColor = localPlayerInfo.body.color.replace("0x", "#");
      // document.getElementsByClassName("selected")[7].style.backgroundColor = localPlayerInfo.body.secondaryColor.replace("0x", "#");
      // document.getElementsByClassName("selected")[8].style.backgroundColor = localPlayerInfo.body.accentColor.replace("0x", "#");
      // document.getElementsByClassName("selected")[9].style.backgroundColor = localPlayerInfo.tail.color.replace("0x", "#");
      // document.getElementsByClassName("selected")[10].style.backgroundColor = localPlayerInfo.tail.secondaryColor.replace("0x", "#");
      // document.getElementsByClassName("selected")[11].style.backgroundColor = localPlayerInfo.tail.accentColor.replace("0x", "#");




      var voreList = [
        { destination: "Stomach",
          verb: "shoves",
          digestionTimer: "120",
          animation: "1",
          destinationDescrip: "The walls feel hot and slimy as they constrict around you.",
          examineMsgDescrip: "<pred>'s belly looks as though something inside is moving...",
          struggleInsideMsgDescrip: "Pressing against the slimy walls doesn't seem to get much of a reaction from <pred>.",
          struggleOutsideMsgDescrip: "<pred>'s belly bulges out with the outline of a hand print for a moment before returning to it's distended shape.",
          digestionInsideMsgDescrip: "You finally feel your body succumb and are reduced to mush for <pred> to absorb.",
          digestionOutsideMsgDescrip: "The constant movement inside <pred>'s middle finally goes still as a soft gurgling sound comes from their belly."
        } ,
        { destination: "Bowels",
          verb: "forces",
          digestionTimer: "120",
          animation: "2",
          destinationDescrip: "You feel the musky walls of <pred>'s digestive tract undulating around you as you are shoved up their ass.",
          examineMsgDescrip: "<pred>'s lower abdomen seems to be swollen out quite a lot...did something just move?",
          struggleInsideMsgDescrip: "Wriggling about only seems to make that tight fleshy tube squeeze tighter around your body.",
          struggleOutsideMsgDescrip: "The outline of a footprint forms against the surface of <pred>'s lower belly",
          digestionInsideMsgDescrip: "A final powerful squeeze of the muscles around you causes your body to give out and you become a puddle of nutrients to feed <pred>",
          digestionOutsideMsgDescrip: "<pred>'s tummy seems to shrink some as it lets out a satisfied burbling sound."
        },
        { destination: "Balls",
          verb: "presses",
          digestionTimer: "120",
          animation: "3",
          destinationDescrip: "You fall down into a thick, musky puddle of jizz that immediately starts coating your body and you feel the wrinkly walls of <pred>'s scrotum tighten up to welcome you~",
          examineMsgDescrip: "A large bulge between their thighs seems to shift and sway on it's own.",
          struggleInsideMsgDescrip: "The walls of your prison seem to give easily when you push out against them, but they always clench right back down the moment you relax...",
          struggleOutsideMsgDescrip: "A very clear imprint of someone's face bulges out from the side of <pred>'s nutsack.",
          digestionInsideMsgDescrip: "The walls around you suddenly cinch up tightly submerging your head completely in <pred>'s sperm before you finally melt, becoming one with the pool of seed you had been bathing in.",
          digestionOutsideMsgDescrip: "There are a few frantic garbled sounds seeming to come up from <pred>'s crotch before there was a sudden, thick sounding, GLORP and those frantic sounds were reduced to a soft sloshing."
        },
        { destination: "Womb",
          verb: "slurps",
          digestionTimer: "120",
          animation: "4",
          destinationDescrip: "You are wholly enveloped in a humid heat as you are deposited into a wet and slimy chamber. The air is filled with the scent of <pred>'s arousal and their heart can be heard beating just above.",
          examineMsgDescrip: "<pred>'s tummy looks swollen... could they be pregnant?",
          struggleInsideMsgDescrip: "Struggling seems to do little good, but you do feel the gentle rubbing of <pred>'s hand over your shape as they press the bulges you make back into their core.",
          struggleOutsideMsgDescrip: "<pred>'s distended belly seems to rock and sway on it's own, they coo softly and seem to rub over their middle affectionately.",
          digestionInsideMsgDescrip: "Your body seems to feel soggy and wet as the heat surrounding you grows more intense. The walls seem to flex down harder and harder until finally... splorsh! You succumb to <pred>'s arousal and are reduced to a pool of fem-cum.",
          digestionOutsideMsgDescrip: "<pred>'s middle suddenly compacts down noticeably and their face flushes red as they bite their lower lip. A muffled sloshing sound could be heard seemingly coming from their belly!"
        }
      ];
  <% } else { %>
      var charList = <%- charList %>;
      console.log('charList = ', charList);
      var localPlayerInfo = charList;
      console.log('localPlayerInfo at start = ', localPlayerInfo);
      document.getElementById('firstName').value = charList.firstName;
      document.getElementById('lastName').value = charList.lastName;
      document.getElementById('nickName').value = charList.nickName;
      document.getElementById('speciesName').value = charList.speciesName;
      if (charList.pronouns == 1){
        document.getElementById('she/her').value = charList.pronouns;
        document.getElementById('she/her').checked = true;
      }
      if (charList.pronouns == 2){
        document.getElementById('he/his').value = charList.pronouns;
        document.getElementById('he/his').checked = true;
      }
      document.getElementById('icDescrip').value = charList.icDescrip;
      document.getElementById('oocDescrip').value = charList.oocDescrip;


      //set default sprite selections
      document.getElementById('body').value = localPlayerInfo.body.sprite;
      document.getElementById('genitles').value = localPlayerInfo.genitles.sprite;
      document.getElementById('head').value = localPlayerInfo.head.sprite;
      document.getElementById('headSecondaryFur').value = localPlayerInfo.head.secondarySprite;
      document.getElementById('headAccentFur').value = localPlayerInfo.head.accentSprite;
      document.getElementById('hair').value = localPlayerInfo.hair.sprite;
      document.getElementById('ear').value = localPlayerInfo.ear.outerSprite;
      document.getElementById('body').value = localPlayerInfo.body.sprite;
      document.getElementById('bodySecondaryFur').value = localPlayerInfo.body.secondarySprite;
      document.getElementById('bodyAccentFur').value = localPlayerInfo.body.accentSprite;
      document.getElementById('tail').value = localPlayerInfo.tail.sprite;
      document.getElementById('tailSecondaryFur').value = localPlayerInfo.tail.secondarySprite;
      document.getElementById('tailAccentFur').value = localPlayerInfo.tail.accentSprite;


      ratingClass = document.getElementsByClassName("rating");
      //console.log('ratingClass = ', ratingClass[0].firstElementChild.name);
      for (i = 0; i < ratingClass.length; i++) {
        const ratingName = ratingClass[i].firstElementChild.name;
        //console.log('ratingName = ', ratingName);
        var ratingGroup = document.getElementsByName(ratingName);
        //console.log('ratingGroup = ', ratingGroup);
        for (j = 0; j < ratingGroup.length; j++) {
          //console.log('ratingName = ', ratingName);
          //ratingName = 'cvStar';
          //console.log('charList.ratings = ', charList.ratings);
          //console.log('ratingGroup[j].value = ', ratingGroup[j].value, 'charList.ratings.',ratingName, ' = ', charList.ratings[ratingName])
          if (ratingGroup[j].value == charList.ratings[ratingName]) {
            ratingGroup[j].checked = true;
            //console.log('checking box');
          }
        }
        //ratingGroup.find(setRatings);
        //setRatings(ratingName, ratingGroup);
      }

      var voreList = charList.voreTypes;
  <% } %>

  var coll = document.getElementsByClassName("collapsible");
  var i;

  for (i = 0; i < coll.length; i++) {
    coll[i].addEventListener("click", function() {
      for (i = 0; i < coll.length; i++) {
        var content = coll[i].nextElementSibling;
        content.classList.remove("active");
      }
      var content = this.nextElementSibling;
      content.classList.toggle("active");
    });
  }


  var currentVoreCount = document.getElementById("voreList").childElementCount;
  createVoreList(voreList);



  function createVoreList() {
    currentVoreCount = document.getElementById("voreList").childElementCount;
    //console.log('document.getElementById("voreList").childElementCount;', document.getElementById("voreList").childElementCount);
    if (!currentVoreCount) {

      currentVoreCount = 0;
    }
    //console.log('currentVoreCount = ', currentVoreCount);

    for(i = currentVoreCount; i < voreList.length; i++) {
      var br = document.createElement('br');
      var br2 = document.createElement('br');
      var br3 = document.createElement('br');
      var br4 = document.createElement('br');
      var li = document.createElement("li");
      var button = document.createElement("button");
      var examineButton = document.createElement('button');
      var struggleInsideButton = document.createElement('button');
      var struggleOutsideButton = document.createElement('button');
      var digestionInsideButton = document.createElement('button');
      var digestionOutsideButton = document.createElement('button');
      var div = document.createElement("div");
      var div2 = document.createElement("div");
      var div3 = document.createElement("div");
      var examineMsgDiv = document.createElement("div");
      var examineContentDiv = document.createElement("div");
      var struggleInsideContentDiv = document.createElement("div");
      var struggleOutsideContentDiv = document.createElement("div");
      var digestionInsideContentDiv = document.createElement("div");
      var digestionOutsideContentDiv = document.createElement("div");
      var destinationLbl = document.createElement('label');
      var destination = document.createElement('input');
      var destinationDescripLbl = document.createElement('label');
      var destinationDescrip = document.createElement('textarea');
      var verbLbl = document.createElement('label');
      var verb = document.createElement('input');
      var digestionTimerLbl = document.createElement('label');
      var digestionTimer = document.createElement('input');
      var animationLbl = document.createElement('label');
      var animation = document.createElement('select');
      var examineMsgLbl = document.createElement('label');
      var examineMsgDescrip = document.createElement('textarea');
      var struggleInsideMsgLbl = document.createElement('label');
      var struggleInsideMsgDescrip = document.createElement('textarea');
      var struggleOutsideMsgLbl = document.createElement('label');
      var struggleOutsideMsgDescrip = document.createElement('textarea');
      var digestionInsideMsgLbl = document.createElement('label');
      var digestionInsideMsgDescrip = document.createElement('textarea');
      var digestionOutsideMsgLbl = document.createElement('label');
      var digestionOutsideMsgDescrip = document.createElement('textarea');

      //li.className = "voreListItem";

      button.id = 'voreOption'+i;
      button.className = 'voreTypecollapsible';
      button.type = 'button';
      button.innerHTML = "<h1>" + voreList[i].destination; + "</h1>"
      li.appendChild(button);

      div.id = 'content'+i;
      div.className = "voreTypecontent";
      div2.id = 'voreClassifiers'+i;
      div2.className = 'voreClassifiers';
      div.appendChild(div2);
      div3.className = 'activityMessages'
      div.appendChild(div3);

      destinationLbl.innerHTML = 'Destination: ';
      destinationLbl.htmlFor = 'destination'+i;
      div2.appendChild(destinationLbl);
      //onkeyup='updateBttnName(event)'
      destination.id = 'destination'+i;
      destination.name = 'destination';
      destination.onkeyup = updateBttnName;
      destination.type = 'text';
      destination.autocomplete = 'off';
      destination.className = 'form-control';
      destination.placeholder = 'Destination';
      destination.ariaLabel = 'Destination';
      destination.value = voreList[i].destination;
      div2.appendChild(destination);
      div2.appendChild(br);

      verbLbl.innerHTML = 'Verb: ';
      verbLbl.htmlFor = 'verb'+i;
      div2.appendChild(verbLbl);

      verb.id = 'verb'+i;
      verb.name = 'verb';
      verb.type = 'text';
      verb.autocomplete = 'off';
      verb.className = 'form-control';
      verb.placeholder = 'Destination Verb...';
      verb.ariaLabel = 'verb';
      verb.value = voreList[i].verb;
      div2.appendChild(verb);
      div2.appendChild(br2);

      var test = document.createTextNode ('Digestion Timer: ');
      div2.appendChild(test);

      digestionTimer.id = 'digestionTimer'+i;
      digestionTimer.name = 'digestionTimer';
      digestionTimer.type = 'number';
      digestionTimer.autocomplete = 'off';
      digestionTimer.className = 'form-control';
      digestionTimer.placeholder = 'Digestion Timer (In Seconds)';
      digestionTimer.ariaLabel = 'digestionTimer';
      digestionTimer.value = voreList[i].digestionTimer;
      div2.appendChild(digestionTimer);
      div2.appendChild(br3);

      var test2 = document.createTextNode ('Animation: ');
      div2.appendChild(test2);

      animation.id = 'animation'+i;
      animation.name = 'animation';
      animation.innerHTML = '<option value="1">Oral Vore</option><option value="2">Anal Vore</option><option value="3">Cock Vore</option><option value="4">Unbirth</option><option value="5">Tail Vore</option><option value="6">Absorbtion</option>';
      animation.value = voreList[i].animation;
      div2.appendChild(animation);
      div2.appendChild(br4);

      destinationDescrip.id = 'destinationDescrip'+i;
      destinationDescrip.name = 'destinationDescrip';
      destinationDescrip.autocomplete = 'off';
      destinationDescrip.className = 'form-control';
      destinationDescrip.placeholder = "Describe the inside of the prey's destination...";
      destinationDescrip.areaLabel = 'destinationDescrip';
      destinationDescrip.innerHTML = voreList[i].destinationDescrip;
      div2.appendChild(destinationDescrip);

      examineButton.id = 'examineButton'+i;
      examineButton.className = 'actMsgcollapsible';
      examineButton.type = 'button';
      examineButton.innerHTML = "Examine Messages";
      div3.appendChild(examineButton);

      examineMsgDiv.className = 'actMsgcontent';
      //examineMsgDiv.innerHTML = 'testing activity messages';
      examineMsgLbl.innerHTML = 'Describe what people would see when examining you while this destination is "full":';
      examineMsgLbl.htmlFor = 'examineMsgDescrip'+i;
      examineMsgDiv.appendChild(examineMsgLbl);
      examineMsgDescrip.id = 'examineMsgDescrip'+i;
      examineMsgDescrip.name = 'examineMsgDescrip';
      examineMsgDescrip.autocomplete = 'off';
      examineMsgDescrip.className = 'form-control';
      examineMsgDescrip.placeholder = 'What do you look like when this destination is "full"?';
      examineMsgDescrip.areaLabel = 'examineMsgDescrip';
      examineMsgDescrip.innerHTML = voreList[i].examineMsgDescrip;
      examineMsgDiv.appendChild(examineMsgDescrip);
      div3.appendChild(examineMsgDiv);

      struggleInsideButton.id = 'struggleInsideMsgButton'+i;
      struggleInsideButton.className = 'actMsgcollapsible';
      struggleInsideButton.type = 'button';
      struggleInsideButton.innerHTML = "Struggle Messages (Interior)";
      div3.appendChild(struggleInsideButton);

      struggleInsideContentDiv.className = 'actMsgcontent';
      //struggleInsideMsgDiv.innerHTML = 'testing activity messages';
      struggleInsideMsgLbl.innerHTML = 'Describe what your prey experiances when struggling:';
      struggleInsideMsgLbl.htmlFor = 'struggleInsideMsgDescrip'+i;
      struggleInsideContentDiv.appendChild(struggleInsideMsgLbl);
      struggleInsideMsgDescrip.id = 'struggleInsideMsgDescrip'+i;
      struggleInsideMsgDescrip.name = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.autocomplete = 'off';
      struggleInsideMsgDescrip.className = 'form-control';
      struggleInsideMsgDescrip.placeholder = 'What does your prey experiance when struggling while inside this destination?';
      struggleInsideMsgDescrip.areaLabel = 'struggleInsideMsgDescrip';
      struggleInsideMsgDescrip.innerHTML = voreList[i].struggleInsideMsgDescrip;
      struggleInsideContentDiv.appendChild(struggleInsideMsgDescrip);
      div3.appendChild(struggleInsideContentDiv);

      struggleOutsideButton.id = 'struggleOutsideMsgButton'+i;
      struggleOutsideButton.className = 'actMsgcollapsible';
      struggleOutsideButton.type = 'button';
      struggleOutsideButton.innerHTML = "Struggle Messages (Exterior)";
      div3.appendChild(struggleOutsideButton);

      struggleOutsideContentDiv.className = 'actMsgcontent';
      //struggleOutsideMsgDiv.innerHTML = 'testing activity messages';
      struggleOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may see when your prey is struggling inside this destination:';
      struggleOutsideMsgLbl.htmlFor = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgLbl);
      struggleOutsideMsgDescrip.id = 'struggleOutsideMsgDescrip'+i;
      struggleOutsideMsgDescrip.name = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.autocomplete = 'off';
      struggleOutsideMsgDescrip.className = 'form-control';
      struggleOutsideMsgDescrip.placeholder = 'What do others see when prey is struggling in here?';
      struggleOutsideMsgDescrip.areaLabel = 'struggleOutsideMsgDescrip';
      struggleOutsideMsgDescrip.innerHTML = voreList[i].struggleOutsideMsgDescrip;
      struggleOutsideContentDiv.appendChild(struggleOutsideMsgDescrip);
      div3.appendChild(struggleOutsideContentDiv);

      digestionInsideButton.id = 'digestionInsideMsgButton'+i;
      digestionInsideButton.className = 'actMsgcollapsible';
      digestionInsideButton.type = 'button';
      digestionInsideButton.innerHTML = "Digestion Messages (Interior)";
      div3.appendChild(digestionInsideButton);

      digestionInsideContentDiv.className = 'actMsgcontent';
      //digestionInsideMsgDiv.innerHTML = 'testing activity messages';
      digestionInsideMsgLbl.innerHTML = 'Describe what your prey may experiance in their final moments as they are digested in this destination:';
      digestionInsideMsgLbl.htmlFor = 'digestionInsideMsgDescrip'+i;
      digestionInsideContentDiv.appendChild(digestionInsideMsgLbl);
      digestionInsideMsgDescrip.id = 'digestionInsideMsgDescrip'+i;
      digestionInsideMsgDescrip.name = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.autocomplete = 'off';
      digestionInsideMsgDescrip.className = 'form-control';
      digestionInsideMsgDescrip.placeholder = 'What does your prey experiance in the moment they are completely digested here?';
      digestionInsideMsgDescrip.areaLabel = 'digestionInsideMsgDescrip';
      digestionInsideMsgDescrip.innerHTML = voreList[i].digestionInsideMsgDescrip;
      digestionInsideContentDiv.appendChild(digestionInsideMsgDescrip);
      div3.appendChild(digestionInsideContentDiv);

      digestionOutsideButton.id = 'digestionOutsideMsgButton'+i;
      digestionOutsideButton.className = 'actMsgcollapsible';
      digestionOutsideButton.type = 'button';
      digestionOutsideButton.innerHTML = "Digestion Messages (Exterior)";
      div3.appendChild(digestionOutsideButton);

      digestionOutsideContentDiv.className = 'actMsgcontent';
      //digestionOutsideMsgDiv.innerHTML = 'testing activity messages';
      digestionOutsideMsgLbl.innerHTML = 'Describe what an outside onlooker may notice as this destination finishes digetsing your prey:';
      digestionOutsideMsgLbl.htmlFor = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgLbl);
      digestionOutsideMsgDescrip.id = 'digestionOutsideMsgDescrip'+i;
      digestionOutsideMsgDescrip.name = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.autocomplete = 'off';
      digestionOutsideMsgDescrip.className = 'form-control';
      digestionOutsideMsgDescrip.placeholder = 'What do others around you notice as you finish digesting prey here?';
      digestionOutsideMsgDescrip.areaLabel = 'digestionOutsideMsgDescrip';
      digestionOutsideMsgDescrip.innerHTML = voreList[i].digestionOutsideMsgDescrip;
      digestionOutsideContentDiv.appendChild(digestionOutsideMsgDescrip);
      div3.appendChild(digestionOutsideContentDiv);

      li.appendChild(div);


      button.addEventListener("click", function() {

        var voreTypecollapsible = document.getElementsByClassName("voreTypecollapsible");
        for (i = 0; i < voreTypecollapsible.length; i++) {
          var content = voreTypecollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      examineButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      struggleInsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      struggleOutsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      digestionInsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });
      digestionOutsideButton.addEventListener("click", function() {
        var actMsgcollapsible = document.getElementsByClassName("actMsgcollapsible");
        for (i = 0; i < actMsgcollapsible.length; i++) {
          var content = actMsgcollapsible[i].nextElementSibling;
          content.classList.remove("active");
        }
        var content = this.nextElementSibling;
        content.classList.toggle("active");
      });

      document.getElementById("voreList").appendChild(li);
    }
  }

  function updateBttnName(event) {
    //console.log(event.srcElement.id);
    //console.log('text box value = ', event.srcElement.value);
    var parent = document.getElementById(event.srcElement.id).parentElement.id;
    //console.log('parent = ', parent);
    var grandParent = document.getElementById(parent).parentElement.id;
    //console.log('grandParent = ', grandParent);

    var parentSibling = document.getElementById(grandParent).previousSibling.id;
    //console.log('grandParent = ', grandParent);
    document.getElementById(parentSibling).innerHTML = '<h1>'+event.srcElement.value+'</h1>';
  }

  gender.addEventListener("click", function() {
    console.log('gender clicked');
    document.getElementById("genderPullout").style.display = "block";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "block";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
    //document.getElementById("genderPullout").style.transform = translateX(50px);
  });
  about.addEventListener("click", function() {
    console.log('about clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "block";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
  });
  kinks.addEventListener("click", function() {
    console.log('kinks clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "block";
    document.getElementById("finish").style.display = "none";
  });
  vore.addEventListener("click", function() {
    console.log('Vore Types clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "block";
  });
  next.addEventListener("click", function() {
    console.log('next clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "block";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "block";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "none";
  });
  next2.addEventListener("click", function() {
    console.log('next2 clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "block";
    document.getElementById("vorePullout").style.display = "none";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "block";
    document.getElementById("finish").style.display = "none";
  });
  next3.addEventListener("click", function() {
    console.log('next3 clicked');
    document.getElementById("genderPullout").style.display = "none";
    document.getElementById("aboutPullout").style.display = "none";
    document.getElementById("kinksPullout").style.display = "none";
    document.getElementById("vorePullout").style.display = "block";
    document.getElementById("next").style.display = "none";
    document.getElementById("next2").style.display = "none";
    document.getElementById("next3").style.display = "none";
    document.getElementById("finish").style.display = "block";
  });
  addVore.addEventListener("click", function() {
    console.log('Add New Vore clicked');
    voreList.push(
      { destination: "New Vore",
        verb: "",
        digestionTimer: "120",
        animation: "1",
        destinationDescrip: "",
        examineMsgDescrip: "",
        struggleInsideMsgDescrip: "",
        struggleOutsideMsgDescrip: "",
        digestionInsideMsgDescrip: "",
        digestionOutsideMsgDescrip: ""
      }
    );
    //var voreArray = voreList[vorelist.length - 1];
    createVoreList(voreList[voreList.length - 1]);
    console.log('voreList = ', voreList[voreList.length - 1]);
  });


  var bodySelection = 1;
  var genitleSelection = 1;
  var headSelection = 1;
  var secondaryFurSelection = 1;
  var rotation = 1;
  console.log('bodySelection = ', bodySelection);
  console.log('genitleSelection = ', genitleSelection);
  var config = {
    type: Phaser.AUTO,
    parent: 'preview',
    width: 200,
    height: 300,
    backgroundColor: '#4488aa',
    physics: {
      default: 'arcade',
      arcade: {
        debug: false,
        gravity: { y: 0 }
      }
    },
    scene: {
      preload: preload,
      create: create,
      update: update
    }
  };

  var game = new Phaser.Game(config);
  console.log('localPlayerInfo before preload = ', localPlayerInfo);

  function preload() {
    this.load.spritesheet('empty', './../assets/spritesheets/empty.png', {frameWidth: 109, frameHeight: 220});
    this.load.spritesheet('head_01', './../assets/spritesheets/head_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_02', './../assets/spritesheets/head_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_03', './../assets/spritesheets/head_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_04', './../assets/spritesheets/head_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_05', './../assets/spritesheets/head_05.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_06', './../assets/spritesheets/head_06.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('body_01', './../assets/spritesheets/body_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('tail_01', './../assets/spritesheets/tail_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('tail_02', './../assets/spritesheets/tail_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('tail_03', './../assets/spritesheets/tail_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('tail_04', './../assets/spritesheets/tail_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('secondaryTail_02', './../assets/spritesheets/secondaryTail_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('secondaryTail_03', './../assets/spritesheets/secondaryTail_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('secondaryTail_04', './../assets/spritesheets/secondaryTail_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('hair_01', './../assets/spritesheets/hair_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('hair_02', './../assets/spritesheets/hair_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('hair_03', './../assets/spritesheets/hair_03.png', {frameWidth: 221, frameHeight: 243});

    this.load.spritesheet('ears_outer_01', './../assets/spritesheets/ears_outer_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('ears_inner_01', './../assets/spritesheets/ears_inner_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('ears_outer_04', './../assets/spritesheets/ears_outer_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('ears_inner_04', './../assets/spritesheets/ears_inner_04.png', {frameWidth: 221, frameHeight: 243});

    this.load.spritesheet('ear_05', './../assets/spritesheets/ear_05.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('eyes_whites_01', './../assets/spritesheets/eyes_whites_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('iris_01', './../assets/spritesheets/iris_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('eyes_whites_02', './../assets/spritesheets/eyes_whites_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('iris_02', './../assets/spritesheets/iris_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('eyes_whites_03', './../assets/spritesheets/eyes_whites_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('iris_03', './../assets/spritesheets/iris_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('eyes_whites_04', './../assets/spritesheets/eyes_whites_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('iris_04', './../assets/spritesheets/iris_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('eyes_whites_05', './../assets/spritesheets/eyes_whites_05.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('iris_05', './../assets/spritesheets/iris_05.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('eyes_whites_06', './../assets/spritesheets/eyes_whites_06.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('iris_06', './../assets/spritesheets/iris_06.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('secondaryBody_01', './../assets/spritesheets/secondaryBody_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('secondaryBody_02', './../assets/spritesheets/secondaryBody_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('secondaryBody_03', './../assets/spritesheets/secondaryBody_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('secondaryBody_04', './../assets/spritesheets/secondaryBody_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('accentBody_01', './../assets/spritesheets/accentBody_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('accentBody_02', './../assets/spritesheets/accentBody_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_01-secondaryHead_01', './../assets/spritesheets/head_01-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_01-secondaryHead_02', './../assets/spritesheets/head_01-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_01-secondaryHead_03', './../assets/spritesheets/head_01-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_01-secondaryHead_04', './../assets/spritesheets/head_01-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_01-secondaryHead_05', './../assets/spritesheets/head_01-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

    this.load.spritesheet('head_02-secondaryHead_01', './../assets/spritesheets/head_02-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_02-secondaryHead_02', './../assets/spritesheets/head_02-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_02-secondaryHead_03', './../assets/spritesheets/head_02-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_02-secondaryHead_04', './../assets/spritesheets/head_02-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_02-secondaryHead_05', './../assets/spritesheets/head_02-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

    this.load.spritesheet('head_03-secondaryHead_01', './../assets/spritesheets/head_03-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_03-secondaryHead_02', './../assets/spritesheets/head_03-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_03-secondaryHead_03', './../assets/spritesheets/head_03-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_03-secondaryHead_04', './../assets/spritesheets/head_03-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_03-secondaryHead_05', './../assets/spritesheets/head_03-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

    this.load.spritesheet('head_04-secondaryHead_01', './../assets/spritesheets/head_04-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_04-secondaryHead_02', './../assets/spritesheets/head_04-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_04-secondaryHead_03', './../assets/spritesheets/head_04-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_04-secondaryHead_04', './../assets/spritesheets/head_04-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_04-secondaryHead_05', './../assets/spritesheets/head_04-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

    this.load.spritesheet('head_05_beak', './../assets/spritesheets/head_05_beak.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_05-secondaryHead_01', './../assets/spritesheets/head_05-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_05-secondaryHead_02', './../assets/spritesheets/head_05-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_05-secondaryHead_03', './../assets/spritesheets/head_05-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_05-secondaryHead_04', './../assets/spritesheets/head_05-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_05-secondaryHead_05', './../assets/spritesheets/head_05-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});

    this.load.spritesheet('head_06-secondaryHead_01', './../assets/spritesheets/head_06-secondaryHead_01.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_06-secondaryHead_02', './../assets/spritesheets/head_06-secondaryHead_02.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_06-secondaryHead_03', './../assets/spritesheets/head_06-secondaryHead_03.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_06-secondaryHead_04', './../assets/spritesheets/head_06-secondaryHead_04.png', {frameWidth: 221, frameHeight: 243});
    this.load.spritesheet('head_06-secondaryHead_05', './../assets/spritesheets/head_06-secondaryHead_05.png', {frameWidth: 221, frameHeight: 243});
  }

  function create() {
    console.log('localPlayerInfo in create = ', localPlayerInfo);
    var self = this;
    this.socket = io();
    this.otherPlayers = this.physics.add.group();
    //cursors = this.input.keyboard.createCursorKeys();
    //console.log('self.socket = ', self.socket);
    this.socket.on('currentPlayers', function (players, spells) {
      Object.keys(players).forEach(function (id) {
        console.log('Local players socket Id = ', players[id].playerId);
        if (players[id].playerId === self.socket.id) {
          console.log('players[id] = ', players[id]);
          addPlayer(self, players[id]);
        } else {
          return;
        }
      });
    });









    // Simple example, see optional options for more configuration.
    console.log('Calling Pickr.create');
    const mainPrimaryHex = Pickr.create({
      el: '#mainPrimaryColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });
    console.log('created pickr button with empty default');

    mainPrimaryHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.color = gameColorCode;
      localPlayerInfo.ear.outerColor = gameColorCode;
      localPlayerInfo.body.color = gameColorCode;
      localPlayerInfo.tail.color = gameColorCode;
      self.head.setTint(localPlayerInfo.head.color);
      self.outerEar.setTint(localPlayerInfo.body.color);
      self.body.setTint(localPlayerInfo.body.color);
      self.tail.setTint(localPlayerInfo.tail.color);
      mainPrimaryHex.setColor(gameColorCode.replace("0x", "#"));
      outerEarHex.setColor(gameColorCode.replace("0x", "#"));
      primaryHeadHex.setColor(localPlayerInfo.head.color.replace("0x", "#"));
      bodyHex.setColor(localPlayerInfo.body.color.replace("0x", "#"));
      tailHex.setColor(localPlayerInfo.tail.color.replace("0x", "#"));
    })
    console.log('created picker.on function');

    const mainSecondaryHex = Pickr.create({
      el: '#mainSecondaryColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    mainSecondaryHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.secondaryColor = gameColorCode;
      localPlayerInfo.beak.color = gameColorCode;
      localPlayerInfo.ear.innerColor = gameColorCode;
      localPlayerInfo.body.secondaryColor = gameColorCode;
      localPlayerInfo.hands.color = gameColorCode;
      localPlayerInfo.feet.color = gameColorCode;
      localPlayerInfo.tail.secondaryColor = gameColorCode;
      self.secondaryHead.setTint(localPlayerInfo.head.secondaryColor);
      self.beak.setTint(localPlayerInfo.beak.color);
      self.innerEar.setTint(localPlayerInfo.ear.innerColor);
      self.secondaryBody.setTint(localPlayerInfo.body.secondaryColor);
      self.hands.setTint(localPlayerInfo.hands.color);
      self.feet.setTint(localPlayerInfo.feet.color);
      self.secondaryTail.setTint(localPlayerInfo.tail.secondaryColor);
      mainSecondaryHex.setColor(gameColorCode.replace("0x", "#"));
      beakHex.setColor(gameColorCode.replace("0x", "#"));
      secondaryHeadHex.setColor(localPlayerInfo.head.secondaryColor.replace("0x", "#"));
      innerEarHex.setColor(localPlayerInfo.ear.innerColor.replace("0x", "#"));
      secondaryBodyHex.setColor(localPlayerInfo.body.secondaryColor.replace("0x", "#"));
      handsHex.setColor(localPlayerInfo.hands.color.replace("0x", "#"));
      feetHex.setColor(localPlayerInfo.feet.color.replace("0x", "#"));
      secondaryTailHex.setColor(localPlayerInfo.tail.secondaryColor.replace("0x", "#"));
    })

    const mainAccentHex = Pickr.create({
      el: '#mainAccentColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    mainAccentHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.accentColor = gameColorCode;
      localPlayerInfo.body.accentColor = gameColorCode;
      localPlayerInfo.tail.accentColor = gameColorCode;
      self.accentHead.setTint(localPlayerInfo.head.accentColor);
      self.accentBody.setTint(localPlayerInfo.body.accentColor);
      self.accentTail.setTint(localPlayerInfo.tail.accentColor);
      mainAccentHex.setColor(gameColorCode.replace("0x", "#"));
      accentHeadHex.setColor(localPlayerInfo.head.accentColor.replace("0x", "#"));
      accentBodyHex.setColor(localPlayerInfo.body.accentColor.replace("0x", "#"));
      accentTailHex.setColor(localPlayerInfo.tail.accentColor.replace("0x", "#"));
    })

    const primaryHeadHex = Pickr.create({
      el: '#headColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    primaryHeadHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.color = gameColorCode;
      self.head.setTint(localPlayerInfo.head.color);
      document.getElementById('primaryHeadHex').value = localPlayerInfo.head.color.replace("0x", "#");
      primaryHeadHex.setColor(localPlayerInfo.head.color.replace("0x", "#"));
    })
    // document.getElementById("primaryHeadHex").addEventListener("click", function(i) {
    //   console.log('hex box clicked');
    //   primaryHeadHex.show();
    // });

    const beakHex = Pickr.create({
      el: '#beakColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    beakHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.beak.color = gameColorCode;
      self.beak.setTint(localPlayerInfo.beak.color);
      document.getElementById('beakHex').value = localPlayerInfo.beak.color.replace("0x", "#");
      beakHex.setColor(localPlayerInfo.beak.color.replace("0x", "#"));
    })

    const secondaryHeadHex = Pickr.create({
      el: '#secondaryHeadColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    secondaryHeadHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.secondaryColor = gameColorCode;
      self.secondaryHead.setTint(localPlayerInfo.head.secondaryColor);
      document.getElementById('secondaryHeadHex').value = localPlayerInfo.head.secondaryColor.replace("0x", "#");
      secondaryHeadHex.setColor(localPlayerInfo.head.secondaryColor.replace("0x", "#"));
    })

    const accentHeadHex = Pickr.create({
      el: '#accentHeadColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    accentHeadHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.head.accentColor = gameColorCode;
      self.accentHead.setTint(localPlayerInfo.head.accentColor);
      document.getElementById('accentHeadHex').value = localPlayerInfo.head.accentColor.replace("0x", "#");
      accentHeadHex.setColor(localPlayerInfo.head.accentColor.replace("0x", "#"));
    })

    const hairHex = Pickr.create({
      el: '#hairColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    hairHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.hair.color = gameColorCode;
      self.hair.setTint(localPlayerInfo.hair.color);
      document.getElementById('hairHex').value = localPlayerInfo.hair.color.replace("0x", "#");
      hairHex.setColor(localPlayerInfo.hair.color.replace("0x", "#"));
    })

    const outerEarHex = Pickr.create({
      el: '#outerEarColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    outerEarHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.ear.outerColor = gameColorCode;
      self.outerEar.setTint(localPlayerInfo.ear.outerColor);
      document.getElementById('outerEarHex').value = localPlayerInfo.ear.outerColor.replace("0x", "#");
      outerEarHex.setColor(localPlayerInfo.ear.outerColor.replace("0x", "#"));
    })

    const innerEarHex = Pickr.create({
      el: '#innerEarColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    innerEarHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.ear.innerColor = gameColorCode;
      self.innerEar.setTint(localPlayerInfo.ear.innerColor);
      document.getElementById('innerEarHex').value = localPlayerInfo.ear.innerColor.replace("0x", "#");
      innerEarHex.setColor(localPlayerInfo.ear.innerColor.replace("0x", "#"));
    })

    const eyesHex = Pickr.create({
      el: '#eyeColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    eyesHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.eyes.color = gameColorCode;
      self.iris.setTint(localPlayerInfo.eyes.color);
      document.getElementById('eyesHex').value = localPlayerInfo.eyes.color.replace("0x", "#");
      eyesHex.setColor(localPlayerInfo.eyes.color.replace("0x", "#"));
    })

    const bodyHex = Pickr.create({
      el: '#bodyColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    bodyHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.body.color = gameColorCode;
      self.body.setTint(localPlayerInfo.body.color);
      document.getElementById('bodyHex').value = localPlayerInfo.body.color.replace("0x", "#");
      bodyHex.setColor(localPlayerInfo.body.color.replace("0x", "#"));
    })

    const secondaryBodyHex = Pickr.create({
      el: '#secondaryBodyColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    secondaryBodyHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.body.secondaryColor = gameColorCode;
      self.secondaryBody.setTint(localPlayerInfo.body.secondaryColor);
      document.getElementById('secondaryBodyHex').value = localPlayerInfo.body.secondaryColor.replace("0x", "#");
      secondaryBodyHex.setColor(localPlayerInfo.body.secondaryColor.replace("0x", "#"));
    })

    const accentBodyHex = Pickr.create({
      el: '#accentBodyColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    accentBodyHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.body.accentColor = gameColorCode;
      self.accentBody.setTint(localPlayerInfo.body.accentColor);
      document.getElementById('accentBodyHex').value = localPlayerInfo.body.accentColor.replace("0x", "#");
      accentBodyHex.setColor(localPlayerInfo.body.accentColor.replace("0x", "#"));
    })

    const handsHex = Pickr.create({
      el: '#handsColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    handsHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.hands.color = gameColorCode;
      self.hands.setTint(localPlayerInfo.hands.color);
      document.getElementById('handsHex').value = localPlayerInfo.hands.color.replace("0x", "#");
      handsHex.setColor(localPlayerInfo.hands.color.replace("0x", "#"));
      // console.log('hands sprite not currently defined on character');
    })

    const feetHex = Pickr.create({
      el: '#feetColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    feetHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.feet.color = gameColorCode;
      self.feet.setTint(localPlayerInfo.feet.color);
      document.getElementById('feetHex').value = localPlayerInfo.feet.color.replace("0x", "#");
      feetHex.setColor(localPlayerInfo.feet.color.replace("0x", "#"));
      //console.log('feet sprite not currently defined on character');
    })

    const tailHex = Pickr.create({
      el: '#tailColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    tailHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.tail.color = gameColorCode;
      self.tail.setTint(localPlayerInfo.tail.color);
      document.getElementById('tailHex').value = localPlayerInfo.tail.color.replace("0x", "#");
      tailHex.setColor(localPlayerInfo.tail.color.replace("0x", "#"));
    })

    const secondaryTailHex = Pickr.create({
      el: '#secondaryTailColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    secondaryTailHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.tail.secondaryColor = gameColorCode;
      self.secondaryTail.setTint(localPlayerInfo.tail.secondaryColor);
      document.getElementById('secondaryTailHex').value = localPlayerInfo.tail.secondaryColor.replace("0x", "#");
      secondaryTailHex.setColor(localPlayerInfo.tail.secondaryColor.replace("0x", "#"));
      //console.log('changing secondary Tail color');
    })

    const accentTailHex = Pickr.create({
      el: '#accentTailColorBtn',
      container: '.colorContainer',
      theme: 'classic', // or 'monolith', or 'nano'
      default:'',
      comparison: false,
      padding: 100,
      position: 'right-middle',

      swatches: [
      //----- First Row -----//
        'rgba(254, 253, 253, 1)',
        'rgba(69, 69, 69, 1)',
        'rgba(84, 67, 77, 1)',
        'rgba(208, 109, 50, 1)',
        'rgba(247, 148, 29, 1)',
        'rgba(96, 63, 30, 1)',
        'rgba(50, 133, 159, 1)',
        'rgba(126, 198, 238, 1)',
        'rgba(63, 150, 247, 1)',
        //----- Second Row -----//
        'rgba(255, 198, 215, 1)',
        'rgba(229, 229, 229, 1)',
        'rgba(217, 203, 216, 1)',
        'rgba(232, 193, 164, 1)',
        'rgba(255, 239, 220, 1)',
        'rgba(207, 186, 133, 1)',
        'rgba(227, 255, 255, 1)',
        'rgba(244, 254, 255, 1)',
        'rgba(242, 230, 242, 1)',
        //----- Third Row -----//
        'rgba(180, 110, 209, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(255, 117, 6, 1)',
        'rgba(239, 129, 158, 1)',
        'rgba(96, 57, 19, 1)',
        'rgba(142, 82, 56, 1)',
        'rgba(209, 53, 65, 1)',
        'rgba(47, 44, 39, 1)',
        'rgba(192, 126, 224, 1)'
      ],

      components: {
        // Main components
        preview: false,
        opacity: false,
        hue: true,
        // Input / output Options
        interaction: {
          hex: true,
          rgba: true,
          hsla: false,
          hsva: false,
          cmyk: false,
          input: true,
          clear: false,
          save: false
        }
      }
    });

    accentTailHex.on('change', (color, source, instance) => {
      //console.log(color.toHEXA());
      var gameColorCode = "0x"+color.toHEXA()[0]+color.toHEXA()[1]+color.toHEXA()[2]
      //console.log('gameColorCode = ', gameColorCode);
      localPlayerInfo.tail.accentColor = gameColorCode;
      self.accentTail.setTint(localPlayerInfo.tail.accentColor);
      document.getElementById('accentTailHex').value = localPlayerInfo.tail.accentColor.replace("0x", "#");
      accentTailHex.setColor(localPlayerInfo.tail.accentColor.replace("0x", "#"));
    })


    document.getElementById('randomizer').addEventListener("click", randomizeColors);

    var bodyColorSets = [
      {
        primary: 'rgba(254, 253, 253, 1)',
        secondary: 'rgba(255, 198, 215, 1)',
        accent: 'rgba(180, 110, 209, 1)',
        hair: 'rgba(250, 250, 255, 1)',
        outerEar: 'rgba(254, 253, 253, 1)',
        innerEar: 'rgba(255, 198, 215, 1)',
        eyes: 'rgba(255, 252, 108, 1)'
      },
      {
        primary: 'rgba(69, 69, 69, 1)',
        secondary: 'rgba(229, 229, 229, 1)',
        accent: 'rgba(239, 129, 158, 1)',
        hair: 'rgba(93, 53, 88, 1)',
        outerEar: 'rgba(69, 69, 69, 1)',
        innerEar: 'rgba(239, 129, 158, 1)',
        eyes: 'rgba(209, 25, 175, 1)'
      },
      {
        primary: 'rgba(84, 67, 77, 1)',
        secondary: 'rgba(217, 203, 216, 1)',
        accent: 'rgba(255, 117, 6, 1)',
        hair: 'rgba(33, 33, 33, 1)',
        outerEar: 'rgba(84, 67, 77, 1)',
        innerEar: 'rgba(255, 166, 94, 1)',
        eyes: 'rgba(126, 205, 136, 1)'
      },
      {
        primary: 'rgba(208, 109, 50, 1)',
        secondary: 'rgba(232, 193, 164, 1)',
        accent: 'rgba(58, 17, 13, 1)',
        hair: 'rgba(105, 55, 28, 1)',
        outerEar: 'rgba(208, 109, 50, 1)',
        innerEar: 'rgba(232, 193, 164, 1)',
        eyes: 'rgba(126, 205, 136, 1)'
      },
      {
        primary: 'rgba(247, 148, 29, 1)',
        secondary: 'rgba(255, 239, 220, 1)',
        accent: 'rgba(96, 57, 19, 1)',
        hair: 'rgba(96, 57, 19, 1)',
        outerEar: 'rgba(247, 148, 29, 1)',
        innerEar: 'rgba(255, 239, 220, 1)',
        eyes: 'rgba(0, 174, 239, 1)'
      },
      {
        primary: 'rgba(96, 63, 30, 1)',
        secondary: 'rgba(207, 186, 133, 1)',
        accent: 'rgba(142, 82, 56, 1)',
        hair: 'rgba(142, 82, 56, 1)',
        outerEar: 'rgba(96, 63, 30, 1)',
        innerEar: 'rgba(207, 186, 133, 1)',
        eyes: 'rgba(86, 161, 242, 1)'
      },
      {
        primary: 'rgba(50, 133, 159, 1)',
        secondary: 'rgba(227, 255, 255, 1)',
        accent: 'rgba(209, 53, 65, 1)',
        hair: 'rgba(83, 38, 0, 1)',
        outerEar: 'rgba(50, 133, 159, 1)',
        innerEar: 'rgba(0, 27, 48, 1)',
        eyes: 'rgba(188, 227, 232, 1)'
      },
      {
        primary: 'rgba(126, 198, 238, 1)',
        secondary: 'rgba(244, 254, 255, 1)',
        accent: 'rgba(47, 44, 39, 1)',
        hair: 'rgba(21, 41, 65, 1)',
        outerEar: 'rgba(126, 198, 238, 1)',
        innerEar: 'rgba(249, 255, 253, 1)',
        eyes: 'rgba(186, 162, 36, 1)'
      },
      {
        primary: 'rgba(63, 150, 247, 1)',
        secondary: 'rgba(242, 230, 242, 1)',
        accent: 'rgba(192, 126, 224, 1)',
        hair: 'rgba(255, 98, 191, 1)',
        outerEar: 'rgba(63, 150, 247, 1)',
        innerEar: 'rgba(159, 74, 105, 1)',
        eyes: 'rgba(255, 215, 97, 1)'
      },
      {
        primary: 'rgba(85, 52, 61, 1)',
        secondary: 'rgba(137, 118, 104, 1)',
        accent: 'rgba(64, 36, 24, 1)',
        hair: 'rgba(171, 92, 59, 1)',
        outerEar: 'rgba(85, 52, 61, 1)',
        innerEar: 'rgba(61, 31, 20, 1)',
        eyes: 'rgba(59, 98, 35, 1)'
      },
      {
        primary: 'rgba(255, 255, 255, 1)',
        secondary: 'rgba(147, 238, 243, 1)',
        accent: 'rgba(26, 68, 108, 1)',
        hair: 'rgba(26, 68, 108, 1)',
        outerEar: 'rgba(255, 255, 255, 1)',
        innerEar: 'rgba(147, 238, 243, 1)',
        eyes: 'rgba(55, 203, 255, 1)'
      },
      {
        primary: 'rgba(255, 235, 203, 1)',
        secondary: 'rgba(255, 255, 255, 1)',
        accent: 'rgba(204, 169, 134, 1)',
        hair: 'rgba(153, 127, 99, 1)',
        outerEar: 'rgba(255, 235, 203, 1)',
        innerEar: 'rgba(203, 185, 178, 1)',
        eyes: 'rgba(59, 226, 226, 1)'
      },
      {
        primary: 'rgba(70, 70, 70, 1)',
        secondary: 'rgba(185, 175, 140, 1)',
        accent: 'rgba(110, 222, 229, 1)',
        hair: 'rgba(185, 175, 140, 1)',
        outerEar: 'rgba(70, 70, 70, 1)',
        innerEar: 'rgba(185, 175, 140, 1)',
        eyes: 'rgba(255, 204, 4, 1)'
      },
      {
        primary: 'rgba(226, 200, 173, 1)',
        secondary: 'rgba(249, 241, 234, 1)',
        accent: 'rgba(135, 87, 71, 1)',
        hair: 'rgba(114, 74, 61, 1)',
        outerEar: 'rgba(226, 200, 173, 1)',
        innerEar: 'rgba(249, 241, 234, 1)',
        eyes: 'rgba(255, 200, 124, 1)'
      },
      {
        primary: 'rgba(253, 175, 100, 1)',
        secondary: 'rgba(246, 240, 240, 1)',
        accent: 'rgba(26, 24, 27, 1)',
        hair: 'rgba(114, 74, 61, 1)',
        outerEar: 'rgba(253, 175, 100, 1)',
        innerEar: 'rgba(246, 240, 240, 1)',
        eyes: 'rgba(42, 183, 254, 1)'
      },
      {
        primary: 'rgba(182, 240, 240, 1)',
        secondary: 'rgba(255, 253, 236, 1)',
        accent: 'rgba(255, 239, 255, 1)',
        hair: 'rgba(255, 239, 255, 1)',
        outerEar: 'rgba(182, 240, 240, 1)',
        innerEar: 'rgba(255, 253, 236, 1)',
        eyes: 'rgba(106, 22, 109, 1)'
      },
      {
        primary: 'rgba(114, 170, 203, 1)',
        secondary: 'rgba(221, 255, 249, 1)',
        accent: 'rgba(63, 63, 63, 1)',
        hair: 'rgba(19, 75, 122, 1)',
        outerEar: 'rgba(114, 170, 203, 1)',
        innerEar: 'rgba(19, 75, 122, 1)',
        eyes: 'rgba(112, 188, 238, 1)'
      },
      {
        //----- Zoey <3 -----//
        primary: 'rgba(229, 121, 197, 1)',
        secondary: 'rgba(229, 228, 208, 1)',
        accent: 'rgba(65, 157, 206, 1)',
        hair: 'rgba(67, 159, 208, 1)',
        outerEar: 'rgba(229, 121, 197, 1)',
        innerEar: 'rgba(229, 228, 208, 1)',
        eyes: 'rgba(231, 125, 199, 1)'
      },
      {
        primary: 'rgba(118, 100, 98, 1)',
        secondary: 'rgba(236, 235, 233, 1)',
        accent: 'rgba(240, 240, 2, 1)',
        hair: 'rgba(34, 30, 29, 1)',
        outerEar: 'rgba(118, 100, 98, 1)',
        innerEar: 'rgba(236, 235, 233, 1)',
        eyes: 'rgba(255, 253, 148, 1)'
      },
      {
        primary: 'rgba(55, 45, 82, 1)',
        secondary: 'rgba(74, 59, 114, 1)',
        accent: 'rgba(144, 40, 197, 1)',
        hair: 'rgba(55, 45, 82, 1)',
        outerEar: 'rgba(55, 45, 82, 1)',
        innerEar: 'rgba(74, 59, 114, 1)',
        eyes: 'rgba(74, 251, 21, 1)'
      },
      {
        primary: 'rgba(66, 73, 84, 1)',
        secondary: 'rgba(237, 255, 95, 1)',
        accent: 'rgba(62, 147, 59, 1)',
        hair: 'rgba(39, 48, 60, 1)',
        outerEar: 'rgba(66, 73, 84, 1)',
        innerEar: 'rgba(237, 255, 95, 1)',
        eyes: 'rgba(77, 204, 0, 1)'
      },
      {
        primary: 'rgba(48, 34, 43, 1)',
        secondary: 'rgba(4, 251, 245, 1)',
        accent: 'rgba(109, 36, 93, 1)',
        hair: 'rgba(26, 10, 52, 1)',
        outerEar: 'rgba(48, 34, 43, 1)',
        innerEar: 'rgba(65, 13, 80, 1)',
        eyes: 'rgba(50, 252, 252, 1)'
      },
      {
        primary: 'rgba(36, 36, 36, 1)',
        secondary: 'rgba(250, 250, 250, 1)',
        accent: 'rgba(70, 156, 155, 1)',
        hair: 'rgba(79, 149, 151, 1)',
        outerEar: 'rgba(36, 36, 36, 1)',
        innerEar: 'rgba(250, 250, 250, 1)',
        eyes: 'rgba(76, 93, 109, 1)'
      },
      {
        primary: 'rgba(47, 47, 47, 1)',
        secondary: 'rgba(58, 58, 58, 1)',
        accent: 'rgba(9, 114, 195, 1)',
        hair: 'rgba(32, 32, 32, 1)',
        outerEar: 'rgba(47, 47, 47, 1)',
        innerEar: 'rgba(58, 58, 58, 1)',
        eyes: 'rgba(89, 66, 249, 1)'
      },
      {
        primary: 'rgba(174, 2, 192, 1)',
        secondary: 'rgba(225, 193, 227, 1)',
        accent: 'rgba(60, 62, 60, 1)',
        hair: 'rgba(58, 51, 59, 1)',
        outerEar: 'rgba(174, 2, 192, 1)',
        innerEar: 'rgba(239, 225, 240, 1)',
        eyes: '#00E600'
      },
      {
        primary: '#00636D',
        secondary: '#CBE6E1',
        accent: '#17AD58',
        hair: '#CB7083',
        innerEar:'#CBE6E1',
        outerEar: '00636D',
        eyes: '#FFAD0B'
      },
    ]
    function randomizeColors() {
      console.log('Colors Randomized');
      var randomChoice = Math.floor(Math.random() * 26);
      var randomBody = Math.floor(Math.random() * 2);
      var randomGenitles = Math.floor(Math.random() * 2);
      var randomHead = Math.floor(Math.random() * 6);
      var randomHeadSecondaryFur = Math.floor(Math.random() * 6);
      var randomHeadAccentFur = Math.floor(Math.random() * 1);
      var randomHair = Math.floor(Math.random() * 4);
      var randomEars = Math.floor(Math.random() * 1);
      var randomBodySecondaryFur = Math.floor(Math.random() * 4);
      var randomBodyAccentFur = Math.floor(Math.random() * 4);
      var randomHandsFur = Math.floor(Math.random() * 2);
      var randomFeetFur = Math.floor(Math.random() * 2);
      var randomTail = Math.floor(Math.random() * 4);
      var randomSecondaryTail = Math.floor(Math.random() * 1);
      var randomAccentTail = Math.floor(Math.random() * 1);


      document.getElementById('body').value = document.getElementById('body')[randomBody].value;
      //localPlayerInfo.body.sprite = document.getElementById('body')[randomBody].value;
      document.getElementById('genitles').value = document.getElementById('genitles')[randomGenitles].value;
      //localPlayerInfo.genitles.sprite = document.getElementById('genitles')[randomGenitles].value;
      document.getElementById('head').value = document.getElementById('head')[randomHead].value;
      document.getElementById('head').dispatchEvent(new Event("change"))
      localPlayerInfo.head.sprite = document.getElementById('head')[randomHead].value;

      document.getElementById('headSecondaryFur').value = document.getElementById('headSecondaryFur')[randomHeadSecondaryFur].value;
      localPlayerInfo.head.secondarySprite = document.getElementById('headSecondaryFur')[randomHeadSecondaryFur].value;
      document.getElementById('headAccentFur').value = document.getElementById('headAccentFur')[randomHeadAccentFur].value;
      localPlayerInfo.head.accentSprite = document.getElementById('headAccentFur')[randomHeadAccentFur].value;
      document.getElementById('hair').value = document.getElementById('hair')[randomHair].value;
      localPlayerInfo.hair.sprite = document.getElementById('hair')[randomHair].value;
      document.getElementById('outerEar').value = document.getElementById('outerEar')[randomEars].value;
      document.getElementById('outerEar').dispatchEvent(new Event("change"))
      localPlayerInfo.ear.outerSprite = document.getElementById('outerEar')[randomEars].value;
      // document.getElementById('ear').value = document.getElementById('ear')[randomEars].value;
      // localPlayerInfo.ear.innerSprite = document.getElementById('ear')[randomEars].value;
      document.getElementById('bodySecondaryFur').value = document.getElementById('bodySecondaryFur')[randomBodySecondaryFur].value;
      localPlayerInfo.body.secondarySprite = document.getElementById('bodySecondaryFur')[randomBodySecondaryFur].value;
      document.getElementById('bodyAccentFur').value = document.getElementById('bodyAccentFur')[randomBodyAccentFur].value;
      localPlayerInfo.body.accentSprite = document.getElementById('bodyAccentFur')[randomBodyAccentFur].value;
      document.getElementById('handsFur').value = document.getElementById('handsFur')[randomHandsFur].value;
      localPlayerInfo.hands.sprite = document.getElementById('handsFur')[randomHandsFur].value;
      document.getElementById('feetFur').value = document.getElementById('feetFur')[randomFeetFur].value;
      localPlayerInfo.feet.sprite = document.getElementById('feetFur')[randomFeetFur].value;
      document.getElementById('tail').value = document.getElementById('tail')[randomTail].value;
      document.getElementById('tail').dispatchEvent(new Event("change"))
      localPlayerInfo.tail.sprite = document.getElementById('tail')[randomTail].value;
      document.getElementById('tailSecondaryFur').value = document.getElementById('tailSecondaryFur')[randomSecondaryTail].value;
      localPlayerInfo.tail.secondarySprite = document.getElementById('tailSecondaryFur')[randomSecondaryTail].value;
      document.getElementById('tailAccentFur').value = document.getElementById('tailAccentFur')[randomSecondaryTail].value;
      //localPlayerInfo.tail.accentSprite = document.getElementById('tailAccentFur')[randomAccentTail].value;


      characterUpdated(localPlayerInfo);
















      //console.log(bodyColorSets);
      console.log('mainSecondaryHex default color = ', bodyColorSets[randomChoice].secondary)
      mainPrimaryHex.setColor(bodyColorSets[randomChoice].primary);
      mainSecondaryHex.setColor(bodyColorSets[randomChoice].secondary);
      mainAccentHex.setColor(bodyColorSets[randomChoice].accent);

      primaryHeadHex.setColor(bodyColorSets[randomChoice].primary);
      beakHex.setColor(bodyColorSets[randomChoice].secondary);
      secondaryHeadHex.setColor(bodyColorSets[randomChoice].secondary);
      accentHeadHex.setColor(bodyColorSets[randomChoice].accent);

      hairHex.setColor(bodyColorSets[randomChoice].hair);
      outerEarHex.setColor(bodyColorSets[randomChoice].outerEar);
      innerEarHex.setColor(bodyColorSets[randomChoice].innerEar);
      eyesHex.setColor(bodyColorSets[randomChoice].eyes);

      bodyHex.setColor(bodyColorSets[randomChoice].primary);
      secondaryBodyHex.setColor(bodyColorSets[randomChoice].secondary);
      accentBodyHex.setColor(bodyColorSets[randomChoice].accent);
      handsHex.setColor(bodyColorSets[randomChoice].secondary);
      feetHex.setColor(bodyColorSets[randomChoice].secondary);

      tailHex.setColor(bodyColorSets[randomChoice].primary);
      secondaryTailHex.setColor(bodyColorSets[randomChoice].secondary);
      accentTailHex.setColor(bodyColorSets[randomChoice].accent);
    };









    function getHex(color) {
      var hex = parseInt(color).toString(16);
      return hex.length == 1 ? "0" + hex : hex;
      console.log('this is still getting used?!');
    };







    document.getElementById("body").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.body.sprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("outerEar").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.ear.outerSprite = i.srcElement.value;

      if(document.getElementById("outerEar").value == 'ears_outer_01'){
        console.log('selected perky and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_inner_01";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }
      if(document.getElementById("outerEar").value == 'ears_outer_04'){
        console.log('selected perky and pointy ears');
        localPlayerInfo.ear.innerSprite = "ears_inner_04";
        document.getElementById('innerEar').value = localPlayerInfo.ear.innerSprite;
      }

      characterUpdated(localPlayerInfo);
    });


    //zimbabaway
    document.getElementById("head").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.head.sprite = i.srcElement.value;
      var headSecondaryFurID = document.getElementById('headSecondaryFur');
      headSecondaryFurID.innerHTML = "";
      localPlayerInfo.beak.sprite = 'empty';
      document.getElementById('beakSprite').value = localPlayerInfo.beak.sprite;
      document.getElementById('sneakyBeak').style.display = "none";


      //self.socket.emit('characterUpdate', localPlayerInfo);
      if(document.getElementById("head").value == 'empty'){
        var optionArray = ["empty|None"];
      }

      if(document.getElementById("head").value == 'head_01'){
        //----- Vulpine Head -----//
        localPlayerInfo.eyes.outer = 'eyes_whites_01';
        localPlayerInfo.eyes.iris = 'iris_01';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        // localPlayerInfo.ear.outerSprite = 'ears_outer_01';
        // localPlayerInfo.ear.innerSprite = 'ears_inner_01';

        var optionArray = ["empty|None","head_01-secondaryHead_01|Half Mask", "head_01-secondaryHead_02|Full Mask", "head_01-secondaryHead_03|Single Stripe", "head_01-secondaryHead_04|Around Eyes", "head_01-secondaryHead_05|Snout Only"];

        //chinglebingle
      }
      if(document.getElementById("head").value == 'head_02'){
        //----- Canine Head -----//
        localPlayerInfo.eyes.outer = 'eyes_whites_02';
        localPlayerInfo.eyes.iris = 'iris_02';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_02-secondaryHead_01|Half Mask", "head_02-secondaryHead_02|Full Mask", "head_02-secondaryHead_03|Single Stripe", "head_02-secondaryHead_04|Around Eyes", "head_02-secondaryHead_05|Snout Only"];
      }
      if(document.getElementById("head").value == 'head_03'){
        //----- Feline Head -----//
        localPlayerInfo.eyes.outer = 'eyes_whites_03';
        localPlayerInfo.eyes.iris = 'iris_03';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_03-secondaryHead_01|Half Mask", "head_03-secondaryHead_02|Full Mask", "head_03-secondaryHead_03|Single Stripe", "head_03-secondaryHead_04|Around Eyes", "head_03-secondaryHead_05|Snout Only"];
      }
      if(document.getElementById("head").value == 'head_04'){
        //----- Bunny Head -----//
        localPlayerInfo.eyes.outer = 'eyes_whites_04';
        localPlayerInfo.eyes.iris = 'iris_04';
        // localPlayerInfo.ear.outer = 'ear_05';
        // localPlayerInfo.ear.inner = 'ear_05';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_04-secondaryHead_01|Half Mask", "head_04-secondaryHead_02|Full Mask", "head_04-secondaryHead_03|Single Stripe", "head_04-secondaryHead_04|Around Eyes", "head_04-secondaryHead_05|Snout Only"];
      }
      if(document.getElementById("head").value == 'head_05'){
        //----- Avain Head -----//
        document.getElementById('sneakyBeak').style.display = "block";
        localPlayerInfo.beak.sprite = 'head_05_beak';
        localPlayerInfo.eyes.outer = 'eyes_whites_05';
        localPlayerInfo.eyes.iris = 'iris_05';
        document.getElementById('beakSprite').value = localPlayerInfo.beak.sprite;
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_05-secondaryHead_01|Half Mask", "head_05-secondaryHead_02|Full Mask", "head_05-secondaryHead_03|Single Stripe", "head_05-secondaryHead_04|Around Eyes", "head_05-secondaryHead_05|Around Beak"];
      }
      if(document.getElementById("head").value == 'head_06'){
        //----- Reptile Head -----//
        localPlayerInfo.eyes.outer = 'eyes_whites_06';
        localPlayerInfo.eyes.iris = 'iris_06';
        document.getElementById('eyesIris').value = localPlayerInfo.eyes.iris;
        document.getElementById('eyesOuter').value = localPlayerInfo.eyes.outer;

        var optionArray = ["empty|None","head_06-secondaryHead_01|Half Mask", "head_06-secondaryHead_02|Full Mask", "head_06-secondaryHead_03|Single Stripe", "head_06-secondaryHead_04|Around Eyes", "head_06-secondaryHead_05|Snout Only"];
      }

      for(var option in optionArray) {
        var pair = optionArray[option].split("|");
        var newOption = document.createElement("option");
        newOption.value = pair[0];
        newOption.innerHTML = pair[1];
        headSecondaryFurID.options.add(newOption);
      }
      document.getElementById('headSecondaryFur').dispatchEvent(new Event("change"))
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("headSecondaryFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.head.secondarySprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("headAccentFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.head.accentSprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("bodySecondaryFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.body.secondarySprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("bodyAccentFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.body.accentSprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("handsFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.hands.sprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("feetFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.feet.sprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("hair").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.hair.sprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    // document.getElementById("ear").addEventListener("change", function(i) {
    //   console.log('i = ', i.srcElement.value);
    //   localPlayerInfo.ear.outerSprite = i.srcElement.value;
    //   characterUpdated(localPlayerInfo);
    // });



    document.getElementById("tail").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      document.getElementById('tailSecondaryFur').innerHTML = "";

      if(document.getElementById("tail").value == 'tail_01'){
        console.log('selected vulpine tail');
        var optionArray = ["empty|None","secondaryTail_02|Racoon Stripes"];
      }

      if(document.getElementById("tail").value == 'tail_02'){
        console.log('selected feline tail');
        var optionArray = ["empty|None","secondaryTail_03|Stripes", "secondaryTail_04|Spots"];
      }

      if(document.getElementById("tail").value == 'tail_03'){
        console.log('selected chumky lizarb tail');
        var optionArray = ["empty|None"];
      }

      if(document.getElementById("tail").value == 'tail_04'){
        console.log('selected reptile tail');
        var optionArray = ["empty|None"];
      }
      localPlayerInfo.tail.sprite = i.srcElement.value;
      localPlayerInfo.tail.secondarySprite = "empty";

      for(var option in optionArray) {
        var pair = optionArray[option].split("|");
        var newOption = document.createElement("option");
        newOption.value = pair[0];
        newOption.innerHTML = pair[1];
        document.getElementById('tailSecondaryFur').options.add(newOption);
      }
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("tailSecondaryFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.tail.secondarySprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });

    document.getElementById("tailAccentFur").addEventListener("change", function(i) {
      console.log('i = ', i.srcElement.value);
      localPlayerInfo.tail.accentSprite = i.srcElement.value;
      characterUpdated(localPlayerInfo);
    });









    rotateRight.addEventListener("click", function() {
      console.log('rotateRight clicked');
      if (rotation < 4) {
        rotation = rotation + 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 1;
        rotationfunct(self, rotation);
      }
    });
    rotateLeft.addEventListener("click", function() {
      console.log('rotateLeft clicked');
      if (rotation > 1) {
        rotation = rotation - 1;
        rotationfunct(self, rotation);
      } else {
        rotation = 4;
        rotationfunct(self, rotation);
      }
    });
    function rotationfunct(self, rotation) {
      if (rotation == 1) {
        self.head.play(localPlayerInfo.head.sprite + 'Down');
        self.beak.play(localPlayerInfo.beak.sprite + 'Down');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Down');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Down');
        self.body.play(localPlayerInfo.body.sprite + 'Down');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Down');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Down');
        self.tail.play(localPlayerInfo.tail.sprite + 'Down');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Down');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Down');
        self.hair.play(localPlayerInfo.hair.sprite + 'Down');
        self.outerEar.play(localPlayerInfo.ear.outerSprite + 'Down');
        self.innerEar.play(localPlayerInfo.ear.innerSprite + 'Down');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Down');
        self.iris.play(localPlayerInfo.eyes.iris + 'Down');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Down');
        self.hands.play(localPlayerInfo.hands.sprite + 'Down');
        self.feet.play(localPlayerInfo.feet.sprite + 'Down');
        self.container.sendToBack(self.accentTail);
        self.container.sendToBack(self.secondaryTail);
        self.container.sendToBack(self.tail);
      }
      if (rotation == 2) {
        self.head.play(localPlayerInfo.head.sprite + 'Right');
        self.beak.play(localPlayerInfo.beak.sprite + 'Right');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Right');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Right');
        self.body.play(localPlayerInfo.body.sprite + 'Right');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Right');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Right');
        self.tail.play(localPlayerInfo.tail.sprite + 'Right');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Right');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Right');
        self.hair.play(localPlayerInfo.hair.sprite + 'Right');
        self.outerEar.play(localPlayerInfo.ear.outerSprite + 'Right');
        self.innerEar.play(localPlayerInfo.ear.innerSprite + 'Right');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Right');
        self.iris.play(localPlayerInfo.eyes.iris + 'Right');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Right');
        self.hands.play(localPlayerInfo.hands.sprite + 'Right');
        self.feet.play(localPlayerInfo.feet.sprite + 'Right');
        self.container.sendToBack(self.accentTail);
        self.container.sendToBack(self.secondaryTail);
        self.container.sendToBack(self.tail);
      }
      if (rotation == 3) {
        self.head.play(localPlayerInfo.head.sprite + 'Up');
        self.beak.play(localPlayerInfo.beak.sprite + 'Up');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Up');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Up');
        self.body.play(localPlayerInfo.body.sprite + 'Up');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Up');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Up');
        self.tail.play(localPlayerInfo.tail.sprite + 'Up');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Up');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Up');
        self.hair.play(localPlayerInfo.hair.sprite + 'Up');
        self.outerEar.play(localPlayerInfo.ear.outerSprite + 'Up');
        self.innerEar.play(localPlayerInfo.ear.innerSprite + 'Up');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Up');
        self.iris.play(localPlayerInfo.eyes.iris + 'Up');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Up');
        self.hands.play(localPlayerInfo.hands.sprite + 'Up');
        self.feet.play(localPlayerInfo.feet.sprite + 'Up');
        self.conatiner.sendToBack(self.innerEar);
        self.container.sendToBack(self.outerEar);
        self.container.sendToBack(self.hair);
        self.container.sendToBack(self.eyes);
        self.container.sendToBack(self.iris);
        self.container.sendToBack(self.accentBody);
        self.container.sendToBack(self.secondaryBody);
        self.container.sendToBack(self.body);
        self.container.sendToBack(self.accentHead);
        self.container.sendToBack(self.secondaryHead);

        self.container.sendToBack(self.head);
        self.container.sendToBack(self.beak);
      }
      if (rotation == 4) {
        self.head.play(localPlayerInfo.head.sprite + 'Left');
        self.beak.play(localPlayerInfo.beak.sprite + 'Left');
        self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Left');
        self.accentHead.play(localPlayerInfo.head.accentSprite + 'Left');
        self.body.play(localPlayerInfo.body.sprite + 'Left');
        self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Left');
        self.accentBody.play(localPlayerInfo.body.accentSprite + 'Left');
        self.tail.play(localPlayerInfo.tail.sprite + 'Left');
        self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Left');
        self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Left');
        self.hair.play(localPlayerInfo.hair.sprite + 'Left');
        self.outerEar.play(localPlayerInfo.ear.outerSprite + 'Left');
        self.innerEar.play(localPlayerInfo.ear.innerSprite + 'Left');
        self.eyes.play(localPlayerInfo.eyes.outer + 'Left');
        self.iris.play(localPlayerInfo.eyes.iris + 'Left');
        self.genitles.play(localPlayerInfo.genitles.sprite + 'Left');
        self.hands.play(localPlayerInfo.hands.sprite + 'Left');
        self.feet.play(localPlayerInfo.feet.sprite + 'Left');
        self.container.sendToBack(self.accentTail);
        self.container.sendToBack(self.secondaryTail);
        self.container.sendToBack(self.tail);
      }
    }

    //this.socket.on('characterUpdated', function (playerInfo) {
    function characterUpdated(playerInfo){
      //console.log('characterUpdated', '\n', 'playerInfo.playerId = ', playerInfo.playerId, '\n', 'self.socket.id = ', self.socket.id);
        if (playerInfo.playerId === self.socket.id) {
          //addOtherPlayers(self, playerInfo);
          // console.log(
          //   playerInfo.playerId, 'Called new animation successfully: ', '\n',
          //   'Set head Sprite to: ', playerInfo.head.sprite, '\n',
          //   'Set head Color to: ', playerInfo.head.color, '\n',
          //   'Set head Secondary Sprite to: ', playerInfo.head.secondarySprite, '\n',
          //   'Set head Secondary Color to: ', playerInfo.head.secondaryColor, '\n',
          //   'Set head Accent Sprite to: ', playerInfo.head.accentSprite, '\n',
          //   'Set head Accent Color to: ', playerInfo.head.accentColor, '\n',
          //   'Set body Sprite to: ', playerInfo.body.sprite, '\n',
          //   'Set body Color to: ', playerInfo.body.color, '\n',
          //   'Set body Secondary Sprite to: ', playerInfo.body.secondarySprite, '\n',
          //   'Set body Secondary Color to: ', playerInfo.body.secondaryColor, '\n',
          //   'Set body Accent Sprite to: ', playerInfo.body.accentSprite, '\n',
          //   'Set body Accent Color to: ', playerInfo.body.accentColor, '\n',
          //   'Set tail Sprite to: ', playerInfo.tail.sprite, '\n',
          //   'Set tail Color to: ', playerInfo.tail.color, '\n',
          //   'Set tail Secondary Sprite to: ', playerInfo.tail.secondarySprite, '\n',
          //   'Set tail Secondary Color to: ', playerInfo.tail.secondaryColor, '\n',
          //   'Set tail Accent Sprite to: ', playerInfo.tail.accentSprite, '\n',
          //   'Set tail Accent Color to: ', playerInfo.tail.accentColor, '\n',
          //   'Set hair Sprite to: ', playerInfo.hair.sprite, '\n',
          //   'Set hair Color to: ', playerInfo.hair.color, '\n',
          //   'Set ear Sprite to: ', playerInfo.ear.sprite, '\n',
          //   'Set ear Color to: ', playerInfo.ear.color, '\n',
          //   'Set outer eyes sprite to:', playerInfo.eyes.outer, '\n',
          //   'Set irises to:', playerInfo.eyes.iris, '\n',
          //   'Set eye color to:', playerInfo.eyes.color, '\n',
          //   'Set genitles to:', playerInfo.genitles.sprite
          // );
          if (rotation == 1) {
            self.head.play(playerInfo.head.sprite + 'Down');
            self.beak.play(playerInfo.beak.sprite + 'Down');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Down');
            self.accentHead.play(playerInfo.head.accentSprite + 'Down');
            self.body.play(playerInfo.body.sprite + 'Down');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Down');
            self.accentBody.play(playerInfo.body.accentSprite + 'Down');
            self.tail.play(playerInfo.tail.sprite + 'Down');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Down');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Down');
            self.hair.play(playerInfo.hair.sprite + 'Down');
            self.outerEar.play(playerInfo.ear.outerSprite + 'Down');
            self.innerEar.play(playerInfo.ear.innerSprite + 'Down');
            self.eyes.play(playerInfo.eyes.outer + 'Down');
            self.iris.play(playerInfo.eyes.iris + 'Down');
            self.genitles.play(playerInfo.genitles.sprite + 'Down');
            self.hands.play(playerInfo.hands.sprite + 'Down');
            self.feet.play(playerInfo.feet.sprite + 'Down');
            self.container.sendToBack(self.tail);
          }
          if (rotation == 2) {
            self.head.play(playerInfo.head.sprite + 'Right');
            self.beak.play(playerInfo.beak.sprite + 'Right');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Right');
            self.accentHead.play(playerInfo.head.accentSprite + 'Right');
            self.body.play(playerInfo.body.sprite + 'Right');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Right');
            self.accentBody.play(playerInfo.body.accentSprite + 'Right');
            self.tail.play(playerInfo.tail.sprite + 'Right');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Right');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Right');
            self.hair.play(playerInfo.hair.sprite + 'Right');
            self.outerEar.play(playerInfo.ear.outerSprite + 'Right');
            self.innerEar.play(playerInfo.ear.innerSprite + 'Right');
            self.eyes.play(playerInfo.eyes.outer + 'Right');
            self.iris.play(playerInfo.eyes.iris + 'Right');
            self.genitles.play(playerInfo.genitles.sprite + 'Right');
            self.hands.play(playerInfo.hands.sprite + 'Right');
            self.feet.play(playerInfo.feet.sprite + 'Right');
            self.container.sendToBack(self.accentTail);
            self.container.sendToBack(self.secondaryTail);
            self.container.sendToBack(self.tail);
          }
          if (rotation == 3) {
            self.head.play(playerInfo.head.sprite + 'Up');
            self.beak.play(playerInfo.beak.sprite + 'Up');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Up');
            self.accentHead.play(playerInfo.head.accentSprite + 'Up');
            self.body.play(playerInfo.body.sprite + 'Up');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Up');
            self.accentBody.play(playerInfo.body.accentSprite + 'Up');
            self.tail.play(playerInfo.tail.sprite + 'Up');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Up');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Up');
            self.hair.play(playerInfo.hair.sprite + 'Up');
            self.outerEar.play(playerInfo.ear.outerSprite + 'Up');
            self.innerEar.play(playerInfo.ear.innerSprite + 'Up');
            self.eyes.play(playerInfo.eyes.outer + 'Up');
            self.iris.play(playerInfo.eyes.iris + 'Up');
            self.genitles.play(playerInfo.genitles.sprite + 'Up');
            self.hands.play(playerInfo.hands.sprite + 'Up');
            self.feet.play(playerInfo.feet.sprite + 'Up');
            self.conatiner.sendToBack(self.innerEar);
            self.container.sendToBack(self.outerEar);
            self.container.sendToBack(self.hair);
            self.container.sendToBack(self.eyes);
            self.container.sendToBack(self.iris);
            self.container.sendToBack(self.accentBody);
            self.container.sendToBack(self.secondaryBody);
            self.container.sendToBack(self.body);
            self.container.sendToBack(self.accentHead);
            self.container.sendToBack(self.secondaryHead);

            self.container.sendToBack(self.head);
            self.container.sendToBack(self.beak);
          }
          if (rotation == 4) {
            self.head.play(playerInfo.head.sprite + 'Left');
            self.beak.play(playerInfo.beak.sprite + 'Left');
            self.secondaryHead.play(playerInfo.head.secondarySprite + 'Left');
            self.accentHead.play(playerInfo.head.accentSprite + 'Left');
            self.body.play(playerInfo.body.sprite + 'Left');
            self.secondaryBody.play(playerInfo.body.secondarySprite + 'Left');
            self.accentBody.play(playerInfo.body.accentSprite + 'Left');
            self.tail.play(playerInfo.tail.sprite + 'Left');
            self.secondaryTail.play(playerInfo.tail.secondarySprite + 'Left');
            self.accentTail.play(playerInfo.tail.accentSprite + 'Left');
            self.hair.play(playerInfo.hair.sprite + 'Left');
            self.outerEar.play(playerInfo.ear.outerSprite + 'Left');
            self.innerEar.play(playerInfo.ear.innerSprite + 'Left');
            self.eyes.play(playerInfo.eyes.outer + 'Left');
            self.iris.play(playerInfo.eyes.iris + 'Left');
            self.genitles.play(playerInfo.genitles.sprite + 'Left');
            self.hands.play(playerInfo.hands.sprite + 'Left');
            self.feet.play(playerInfo.feet.sprite + 'Left');
            self.container.sendToBack(self.accentTail);
            self.container.sendToBack(self.secondaryTail);
            self.container.sendToBack(self.tail);
          }

          self.head.setTint(playerInfo.head.color);
          self.beak.setTint(playerInfo.beak.color);
          self.secondaryHead.setTint(playerInfo.head.secondaryColor);
          self.accentHead.setTint(playerInfo.head.accentColor);
          self.body.setTint(playerInfo.body.color);
          self.secondaryBody.setTint(playerInfo.body.secondaryColor);
          self.accentBody.setTint(playerInfo.body.accentColor);
          self.hands.setTint(playerInfo.hands.color);
          self.feet.setTint(playerInfo.feet.color);
          self.tail.setTint(playerInfo.tail.color);
          self.secondaryTail.setTint(playerInfo.tail.secondaryColor);
          self.accentTail.setTint(playerInfo.tail.accentColor);
          self.hair.setTint(playerInfo.hair.color);
          self.outerEar.setTint(playerInfo.ear.outerColor);
          self.innerEar.setTint(playerInfo.ear.innerColor);
          self.iris.setTint(playerInfo.eyes.color);


          //console.log('Head: ', self.head.anims.nextTick, '\n', 'Body: ', self.body.anims.nextTick, '\n', 'Tail: ', self.tail.anims.nextTick, '\n', 'Eyes: ', self.eyes.anims.nextTick);
          return;
        }
    };


    function addPlayer(self, playerInfo) {
      console.log('localPlayerInfo at addPlayer Function = ', localPlayerInfo);
      console.log(
        playerInfo.playerId, 'Has entered the Character Creation screen with the following default values: ', '\n',
        'Set head Sprite to: ', localPlayerInfo.head.sprite, '\n',
        'Set head Color to: ', localPlayerInfo.head.color, '\n',
        'Set beak Sprite to: ', localPlayerInfo.beak.sprite, '\n',
        'Set beak Color to: ', localPlayerInfo.beak.color, '\n',
        'Set head Secondary Sprite to: ', localPlayerInfo.head.secondarySprite, '\n',
        'Set head Secondary Color to: ', localPlayerInfo.head.secondaryColor, '\n',
        'Set head Accent Sprite to: ', localPlayerInfo.head.accentSprite, '\n',
        'Set head Accent Color to: ', localPlayerInfo.head.accentColor, '\n',
        'Set body Sprite to: ', localPlayerInfo.body.sprite, '\n',
        'Set body Color to: ', localPlayerInfo.body.color, '\n',
        'Set body Secondary Sprite to: ', localPlayerInfo.body.secondarySprite, '\n',
        'Set body Secondary Color to: ', localPlayerInfo.body.secondaryColor, '\n',
        'Set body Accent Sprite to: ', localPlayerInfo.body.accentSprite, '\n',
        'Set body Accent Color to: ', localPlayerInfo.body.accentColor, '\n',
        'Set hands Sprite to: ', localPlayerInfo.hands.sprite, '\n',
        'Set hands Color to: ', localPlayerInfo.hands.color, '\n',
        'Set feet Sprite to: ', localPlayerInfo.feet.sprite, '\n',
        'Set feet Color to: ', localPlayerInfo.feet.color, '\n',
        'Set tail Sprite to: ', localPlayerInfo.tail.sprite, '\n',
        'Set tail Color to: ', localPlayerInfo.tail.color, '\n',
        'Set tail Secondary Sprite to: ', localPlayerInfo.tail.secondarySprite, '\n',
        'Set tail Secondary Color to: ', localPlayerInfo.tail.secondaryColor, '\n',
        'Set tail Accent Sprite to: ', localPlayerInfo.tail.accentSprite, '\n',
        'Set tail Accent Color to: ', localPlayerInfo.tail.accentColor, '\n',
        'Set hair Sprite to: ', localPlayerInfo.hair.sprite, '\n',
        'Set hair Color to: ', localPlayerInfo.hair.color, '\n',
        'Set ear Sprite to: ', localPlayerInfo.ear.outerSprite, '\n',
        'Set ear Color to: ', localPlayerInfo.ear.outerColor, '\n',
        'Set ear Sprite to: ', localPlayerInfo.ear.innerSprite, '\n',
        'Set ear Color to: ', localPlayerInfo.ear.innerColor, '\n',
        'Set outer eyes sprite to:', localPlayerInfo.eyes.outer, '\n',
        'Set irises to:', localPlayerInfo.eyes.iris, '\n',
        'Set eye color to:', localPlayerInfo.eyes.color, '\n',
        'Set genitles to:', localPlayerInfo.genitles.sprite
      );

      self.container = self.add.container(0, 0).setSize(70, 170).setInteractive().setScale(1.5);

      self.head = self.physics.add.sprite(0, 0, localPlayerInfo.head.sprite).setInteractive();
      self.head.setTint(localPlayerInfo.head.color);
      self.beak = self.physics.add.sprite(0, 0, localPlayerInfo.beak.sprite).setInteractive();
      self.beak.setTint(localPlayerInfo.beak.color);
      self.secondaryHead = self.physics.add.sprite(0, 0, localPlayerInfo.head.secondarySprite).setInteractive();
      self.secondaryHead.setTint(localPlayerInfo.head.secondaryColor);
      self.accentHead = self.physics.add.sprite(0, 0, localPlayerInfo.head.accentSprite).setInteractive();
      self.accentHead.setTint(localPlayerInfo.head.accentColor);

      self.body = self.physics.add.sprite(0, 0, localPlayerInfo.body.sprite).setInteractive();
      self.body.setTint(localPlayerInfo.body.color);
      self.secondaryBody = self.physics.add.sprite(0, 0, localPlayerInfo.body.secondarySprite).setInteractive();
      self.secondaryBody.setTint(localPlayerInfo.body.secondaryColor);
      self.accentBody = self.physics.add.sprite(0, 0, localPlayerInfo.body.accentSprite).setInteractive();
      self.accentBody.setTint(localPlayerInfo.body.accentColor);
      self.hands = self.physics.add.sprite(0, 0, localPlayerInfo.hands.sprite).setInteractive();
      self.hands.setTint(localPlayerInfo.hands.color);
      self.feet = self.physics.add.sprite(0, 0, localPlayerInfo.feet.sprite).setInteractive();
      self.feet.setTint(localPlayerInfo.feet.color);

      self.tail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.sprite).setInteractive();
      self.tail.setTint(localPlayerInfo.tail.color);
      self.secondaryTail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.secondarySprite).setInteractive();
      self.secondaryTail.setTint(localPlayerInfo.tail.secondaryColor);
      self.accentTail = self.physics.add.sprite(0, 0, localPlayerInfo.tail.accentSprite).setInteractive();
      self.accentTail.setTint(localPlayerInfo.tail.accentColor);

      self.hair = self.physics.add.sprite(0, 0, localPlayerInfo.hair.sprite).setInteractive();
      self.hair.setTint(localPlayerInfo.hair.color);

      self.outerEar = self.physics.add.sprite(0, 0, localPlayerInfo.ear.outerSprite).setInteractive();
      self.outerEar.setTint(localPlayerInfo.ear.outerColor);
      self.innerEar = self.physics.add.sprite(0, 0, localPlayerInfo.ear.innerSprite).setInteractive();
      self.innerEar.setTint(localPlayerInfo.ear.innerColor);

      self.eyes = self.physics.add.sprite(0, 0, localPlayerInfo.eyes.outer).setInteractive();
      self.iris = self.physics.add.sprite(0, 0, localPlayerInfo.eyes.iris).setInteractive();
      self.iris.setTint(localPlayerInfo.eyes.color);

      self.genitles = self.physics.add.sprite(0, 0, localPlayerInfo.genitles.sprite).setInteractive();
      //self.genitles.setTint(localPlayerInfo.genitles.color);


      self.container.add([
        self.tail,
        self.secondaryTail,
        self.accentTail,


        self.body,
        self.secondaryBody,
        self.accentBody,
        self.genitles,
        self.hands,
        self.feet,

        self.head,
        self.beak,

        self.secondaryHead,
        self.accentHead,
        self.eyes,
        self.iris,
        self.hair,
        self.outerEar,
        self.innerEar
      ]);
      //self.container.sendToBack(self.tail);

      //self.container.visible = false;
      self.head.play(localPlayerInfo.head.sprite + 'Down');
      self.beak.play(localPlayerInfo.beak.sprite + 'Down');
      self.secondaryHead.play(localPlayerInfo.head.secondarySprite + 'Down');
      self.accentHead.play(localPlayerInfo.head.accentSprite + 'Down');
      self.body.play(localPlayerInfo.body.sprite + 'Down');
      self.secondaryBody.play(localPlayerInfo.body.secondarySprite + 'Down');
      self.accentBody.play(localPlayerInfo.body.accentSprite + 'Down');
      self.tail.play(localPlayerInfo.tail.sprite + 'Down');
      self.secondaryTail.play(localPlayerInfo.tail.secondarySprite + 'Down');
      self.accentTail.play(localPlayerInfo.tail.accentSprite + 'Down');
      self.hair.play(localPlayerInfo.hair.sprite + 'Down');
      self.outerEar.play(localPlayerInfo.ear.outerSprite + 'Down');
      self.innerEar.play(localPlayerInfo.ear.innerSprite + 'Down');
      self.eyes.play(localPlayerInfo.eyes.outer + 'Down');
      self.iris.play(localPlayerInfo.eyes.iris + 'Down');
      self.genitles.play(localPlayerInfo.genitles.sprite + 'Down');
      self.hands.play(localPlayerInfo.hands.sprite + 'Down');
      self.feet.play(localPlayerInfo.feet.sprite + 'Down');
      self.container.sendToBack(self.tail);


      localPlayerInfo.playerId = playerInfo.playerId;
      //localPlayerInfo.sprite = self.stack
      let cam1 = self.cameras.main.setSize(200, 300).startFollow(self.container).setName('Camera 1');

      randomizeColors();
    }
    self.anims.create({
      key: 'head_01Down',
      frames: self.anims.generateFrameNumbers('head_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Right',
      frames: self.anims.generateFrameNumbers('head_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Left',
      frames: self.anims.generateFrameNumbers('head_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Up',
      frames: self.anims.generateFrameNumbers('head_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01Stop',
      frames: self.anims.generateFrameNumbers('head_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_02Down',
      frames: self.anims.generateFrameNumbers('head_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Right',
      frames: self.anims.generateFrameNumbers('head_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Left',
      frames: self.anims.generateFrameNumbers('head_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Up',
      frames: self.anims.generateFrameNumbers('head_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02Stop',
      frames: self.anims.generateFrameNumbers('head_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03Down',
      frames: self.anims.generateFrameNumbers('head_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Right',
      frames: self.anims.generateFrameNumbers('head_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Left',
      frames: self.anims.generateFrameNumbers('head_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03Up',
      frames: self.anims.generateFrameNumbers('head_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04Stop',
      frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_04Down',
      frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04Right',
      frames: self.anims.generateFrameNumbers('head_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04Left',
      frames: self.anims.generateFrameNumbers('head_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04Up',
      frames: self.anims.generateFrameNumbers('head_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04Stop',
      frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_04Stop',
      frames: self.anims.generateFrameNumbers('head_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_05Down',
      frames: self.anims.generateFrameNumbers('head_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05Right',
      frames: self.anims.generateFrameNumbers('head_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05Left',
      frames: self.anims.generateFrameNumbers('head_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05Up',
      frames: self.anims.generateFrameNumbers('head_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05Stop',
      frames: self.anims.generateFrameNumbers('head_05', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_06Stop',
      frames: self.anims.generateFrameNumbers('head_06', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_06Down',
      frames: self.anims.generateFrameNumbers('head_06', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06Right',
      frames: self.anims.generateFrameNumbers('head_06', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06Left',
      frames: self.anims.generateFrameNumbers('head_06', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06Up',
      frames: self.anims.generateFrameNumbers('head_06', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06Stop',
      frames: self.anims.generateFrameNumbers('head_06', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'body_01Down',
      frames: self.anims.generateFrameNumbers('body_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Right',
      frames: self.anims.generateFrameNumbers('body_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Left',
      frames: self.anims.generateFrameNumbers('body_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Up',
      frames: self.anims.generateFrameNumbers('body_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'body_01Stop',
      frames: self.anims.generateFrameNumbers('body_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'tail_01Down',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Right',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Left',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Up',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_01Stop',
      frames: self.anims.generateFrameNumbers('tail_01', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'tail_02Down',
      frames: self.anims.generateFrameNumbers('tail_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_02Right',
      frames: self.anims.generateFrameNumbers('tail_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_02Left',
      frames: self.anims.generateFrameNumbers('tail_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_02Up',
      frames: self.anims.generateFrameNumbers('tail_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_02Stop',
      frames: self.anims.generateFrameNumbers('tail_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'tail_03Down',
      frames: self.anims.generateFrameNumbers('tail_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_03Right',
      frames: self.anims.generateFrameNumbers('tail_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_03Left',
      frames: self.anims.generateFrameNumbers('tail_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_03Up',
      frames: self.anims.generateFrameNumbers('tail_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_03Stop',
      frames: self.anims.generateFrameNumbers('tail_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'tail_04Down',
      frames: self.anims.generateFrameNumbers('tail_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_04Right',
      frames: self.anims.generateFrameNumbers('tail_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_04Left',
      frames: self.anims.generateFrameNumbers('tail_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_04Up',
      frames: self.anims.generateFrameNumbers('tail_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'tail_04Stop',
      frames: self.anims.generateFrameNumbers('tail_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryTail_02Down',
      frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_02Right',
      frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_02Left',
      frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_02Up',
      frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_02Stop',
      frames: self.anims.generateFrameNumbers('secondaryTail_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryTail_03Down',
      frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_03Right',
      frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_03Left',
      frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_03Up',
      frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_03Stop',
      frames: self.anims.generateFrameNumbers('secondaryTail_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryTail_04Down',
      frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_04Right',
      frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_04Left',
      frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_04Up',
      frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryTail_04Stop',
      frames: self.anims.generateFrameNumbers('secondaryTail_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_whites_01Down',
      frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_01Right',
      frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_01Left',
      frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_01Up',
      frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_01Stop',
      frames: self.anims.generateFrameNumbers('eyes_whites_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'iris_01Down',
      frames: self.anims.generateFrameNumbers('iris_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_01Right',
      frames: self.anims.generateFrameNumbers('iris_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_01Left',
      frames: self.anims.generateFrameNumbers('iris_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_01Up',
      frames: self.anims.generateFrameNumbers('iris_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_01Stop',
      frames: self.anims.generateFrameNumbers('iris_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_whites_02Down',
      frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_02Right',
      frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_02Left',
      frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_02Up',
      frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_02Stop',
      frames: self.anims.generateFrameNumbers('eyes_whites_02', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'iris_02Down',
      frames: self.anims.generateFrameNumbers('iris_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_02Right',
      frames: self.anims.generateFrameNumbers('iris_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_02Left',
      frames: self.anims.generateFrameNumbers('iris_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_02Up',
      frames: self.anims.generateFrameNumbers('iris_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_02Stop',
      frames: self.anims.generateFrameNumbers('iris_02', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_whites_03Down',
      frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_03Right',
      frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_03Left',
      frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_03Up',
      frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_03Stop',
      frames: self.anims.generateFrameNumbers('eyes_whites_03', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'iris_03Down',
      frames: self.anims.generateFrameNumbers('iris_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_03Right',
      frames: self.anims.generateFrameNumbers('iris_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_03Left',
      frames: self.anims.generateFrameNumbers('iris_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_03Up',
      frames: self.anims.generateFrameNumbers('iris_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_03Stop',
      frames: self.anims.generateFrameNumbers('iris_03', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_whites_04Down',
      frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_04Right',
      frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_04Left',
      frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_04Up',
      frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_04Stop',
      frames: self.anims.generateFrameNumbers('eyes_whites_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'iris_04Down',
      frames: self.anims.generateFrameNumbers('iris_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_04Right',
      frames: self.anims.generateFrameNumbers('iris_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_04Left',
      frames: self.anims.generateFrameNumbers('iris_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_04Up',
      frames: self.anims.generateFrameNumbers('iris_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_04Stop',
      frames: self.anims.generateFrameNumbers('iris_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_whites_05Down',
      frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_05Right',
      frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_05Left',
      frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_05Up',
      frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_05Stop',
      frames: self.anims.generateFrameNumbers('eyes_whites_05', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'iris_05Down',
      frames: self.anims.generateFrameNumbers('iris_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_05Right',
      frames: self.anims.generateFrameNumbers('iris_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_05Left',
      frames: self.anims.generateFrameNumbers('iris_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_05Up',
      frames: self.anims.generateFrameNumbers('iris_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_05Stop',
      frames: self.anims.generateFrameNumbers('iris_05', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'eyes_whites_06Down',
      frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_06Right',
      frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_06Left',
      frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_06Up',
      frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'eyes_whites_06Stop',
      frames: self.anims.generateFrameNumbers('eyes_whites_06', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'iris_06Down',
      frames: self.anims.generateFrameNumbers('iris_06', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_06Right',
      frames: self.anims.generateFrameNumbers('iris_06', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_06Left',
      frames: self.anims.generateFrameNumbers('iris_06', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_06Up',
      frames: self.anims.generateFrameNumbers('iris_06', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'iris_06Stop',
      frames: self.anims.generateFrameNumbers('iris_06', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_01Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_01Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_02Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_02Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_02', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_03Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_03Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_03', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'secondaryBody_04Down',
      frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_04Right',
      frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_04Left',
      frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_04Up',
      frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'secondaryBody_04Stop',
      frames: self.anims.generateFrameNumbers('secondaryBody_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'accentBody_01Down',
      frames: self.anims.generateFrameNumbers('accentBody_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_01Right',
      frames: self.anims.generateFrameNumbers('accentBody_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_01Left',
      frames: self.anims.generateFrameNumbers('accentBody_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_01Up',
      frames: self.anims.generateFrameNumbers('accentBody_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_01Stop',
      frames: self.anims.generateFrameNumbers('accentBody_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'accentBody_02Down',
      frames: self.anims.generateFrameNumbers('accentBody_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_02Right',
      frames: self.anims.generateFrameNumbers('accentBody_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_02Left',
      frames: self.anims.generateFrameNumbers('accentBody_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_02Up',
      frames: self.anims.generateFrameNumbers('accentBody_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'accentBody_02Stop',
      frames: self.anims.generateFrameNumbers('accentBody_02', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_01-secondaryHead_01Down',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_01Right',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_01Left',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_01Up',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_01Stop',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_01', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_01-secondaryHead_02Down',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_02Right',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_02Left',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_02Up',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_02Stop',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_01-secondaryHead_03Down',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_03Right',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_03Left',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_03Up',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_03Stop',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_01-secondaryHead_04Down',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_04Right',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_04Left',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_04Up',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_04Stop',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_01-secondaryHead_05Down',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_05Right',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_05Left',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_05Up',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_01-secondaryHead_05Stop',
      frames: self.anims.generateFrameNumbers('head_01-secondaryHead_05', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });

    self.anims.create({
      key: 'head_02-secondaryHead_01Down',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_01Right',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_01Left',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_01Up',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_01Stop',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_01', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_02-secondaryHead_02Down',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_02Right',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_02Left',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_02Up',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_02Stop',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_02-secondaryHead_03Down',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_03Right',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_03Left',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_03Up',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_03Stop',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_02-secondaryHead_04Down',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_04Right',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_04Left',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_04Up',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_04Stop',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_02-secondaryHead_05Down',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_05Right',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_05Left',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_05Up',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_02-secondaryHead_05Stop',
      frames: self.anims.generateFrameNumbers('head_02-secondaryHead_05', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03-secondaryHead_01Down',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_01Right',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_01Left',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_01Up',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_01Stop',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_01', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03-secondaryHead_02Down',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_02Right',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_02Left',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_02Up',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_02Stop',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03-secondaryHead_03Down',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_03Right',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_03Left',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_03Up',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_03Stop',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03-secondaryHead_04Down',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_04Right',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_04Left',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_04Up',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_04Stop',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_03-secondaryHead_05Down',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_05Right',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_05Left',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_05Up',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_03-secondaryHead_05Stop',
      frames: self.anims.generateFrameNumbers('head_03-secondaryHead_05', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });

    self.anims.create({
      key: 'head_04-secondaryHead_01Down',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_01Right',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_01Left',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_01Up',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_01Stop',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_01', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_04-secondaryHead_02Down',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_02Right',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_02Left',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_02Up',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_02Stop',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_04-secondaryHead_03Down',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_03Right',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_03Left',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_03Up',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_03Stop',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_04-secondaryHead_04Down',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_04Right',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_04Left',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_04Up',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_04Stop',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_04-secondaryHead_05Down',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_05Right',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_05Left',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_05Up',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_04-secondaryHead_05Stop',
      frames: self.anims.generateFrameNumbers('head_04-secondaryHead_05', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });



    self.anims.create({
      key: 'head_05_beakDown',
      frames: self.anims.generateFrameNumbers('head_05_beak', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05_beakRight',
      frames: self.anims.generateFrameNumbers('head_05_beak', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05_beakLeft',
      frames: self.anims.generateFrameNumbers('head_05_beak', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05_beakUp',
      frames: self.anims.generateFrameNumbers('head_05_beak', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05_beakStop',
      frames: self.anims.generateFrameNumbers('head_05_beak', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });





    self.anims.create({
      key: 'head_05-secondaryHead_01Down',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_01Right',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_01Left',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_01Up',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_01Stop',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_01', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_05-secondaryHead_02Down',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_02Right',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_02Left',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_02Up',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_02Stop',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_05-secondaryHead_03Down',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_03Right',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_03Left',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_03Up',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_03Stop',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_05-secondaryHead_04Down',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_04Right',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_04Left',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_04Up',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_04Stop',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_05-secondaryHead_05Down',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_05Right',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_05Left',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_05Up',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_05-secondaryHead_05Stop',
      frames: self.anims.generateFrameNumbers('head_05-secondaryHead_05', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });




    self.anims.create({
      key: 'head_06-secondaryHead_01Down',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_01Right',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_01Left',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_01Up',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_01Stop',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_01', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_06-secondaryHead_02Down',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_02Right',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_02Left',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_02Up',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_02Stop',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_02', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_06-secondaryHead_03Down',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_03Right',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_03Left',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_03Up',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_03Stop',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_06-secondaryHead_04Down',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_04Right',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_04Left',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_04Up',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_04Stop',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_04', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'head_06-secondaryHead_05Down',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_05Right',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_05Left',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_05Up',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'head_06-secondaryHead_05Stop',
      frames: self.anims.generateFrameNumbers('head_06-secondaryHead_05', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });


    self.anims.create({
      key: 'hair_01Down',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Right',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Left',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Up',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_01Stop',
      frames: self.anims.generateFrameNumbers('hair_01', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'hair_02Down',
      frames: self.anims.generateFrameNumbers('hair_02', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_02Right',
      frames: self.anims.generateFrameNumbers('hair_02', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_02Left',
      frames: self.anims.generateFrameNumbers('hair_02', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_02Up',
      frames: self.anims.generateFrameNumbers('hair_02', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_02Stop',
      frames: self.anims.generateFrameNumbers('hair_02', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
    self.anims.create({
      key: 'hair_03Down',
      frames: self.anims.generateFrameNumbers('hair_03', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_03Right',
      frames: self.anims.generateFrameNumbers('hair_03', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_03Left',
      frames: self.anims.generateFrameNumbers('hair_03', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_03Up',
      frames: self.anims.generateFrameNumbers('hair_03', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'hair_03Stop',
      frames: self.anims.generateFrameNumbers('hair_03', { start: 0, end: 0 }),
      frameRate: 7,
      repeat: -1,
    });
    self.anims.create({
      key: 'ears_outer_01Down',
      frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_01Right',
      frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_01Left',
      frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_01Up',
      frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_01Stop',
      frames: self.anims.generateFrameNumbers('ears_outer_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'ears_inner_01Down',
      frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'ears_inner_01Right',
      frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_inner_01Left',
      frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_inner_01Up',
      frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_inner_01Stop',
      frames: self.anims.generateFrameNumbers('ears_inner_01', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'ears_outer_04Down',
      frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_04Right',
      frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_04Left',
      frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_04Up',
      frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_outer_04Stop',
      frames: self.anims.generateFrameNumbers('ears_outer_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'ears_inner_04Down',
      frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_inner_04Right',
      frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_inner_04Left',
      frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_inner_04Up',
      frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ears_inner_04Stop',
      frames: self.anims.generateFrameNumbers('ears_inner_04', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'ear_05Down',
      frames: self.anims.generateFrameNumbers('ear_05', { start: 0, end: 5 }),
      frameRate: 6,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_05Right',
      frames: self.anims.generateFrameNumbers('ear_05', { start: 7, end: 13 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_05Left',
      frames: self.anims.generateFrameNumbers('ear_05', { start: 14, end: 20 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_05Up',
      frames: self.anims.generateFrameNumbers('ear_05', { start: 21, end: 27 }),
      frameRate: 7,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'ear_05Stop',
      frames: self.anims.generateFrameNumbers('ear_05', { start: 0, end: 0 }),
      frameRate: 6,
      repeat: -1,
    });
    self.anims.create({
      key: 'emptyDown',
      frames: self.anims.generateFrameNumbers('empty', { start: 1, end: 8 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyRight',
      frames: self.anims.generateFrameNumbers('empty', { start: 10, end: 17 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyLeft',
      frames: self.anims.generateFrameNumbers('empty', { start: 19, end: 27 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyUp',
      frames: self.anims.generateFrameNumbers('empty', { start: 28, end: 35 }),
      frameRate: 8,
      repeat: -1,
      showOnStart: true
    });
    self.anims.create({
      key: 'emptyStop',
      frames: self.anims.generateFrameNumbers('empty', { start: 0, end: 0 }),
      frameRate: 8,
      repeat: -1,
    });
  }


  function update() {
    // if (cursors.down.isDown) {
    //   this.head.anims.stop();
    //   this.body.anims.stop();
    //   this.tail.anims.stop();
    //   this.eyes.anims.stop();
    // }
    // if (cursors.up.isDown) {
    //   this.head.play(localPlayerInfo.head + 'Down');
    //   this.body.play(localPlayerInfo.body + 'Down');
    //   this.tail.play(localPlayerInfo.tail + 'Down');
    //   this.eyes.play(localPlayerInfo.eyes + 'Down');
    // }
    // if (cursors.left.isDown) {
    //   this.head.setDepth(4);
    //   this.body.setDepth(3);
    //   this.tail.setDepth(1);
    //   this.eyes.setDepth(2);
    // }
  }
</script>
